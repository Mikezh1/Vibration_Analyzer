
RTOS_MPU6050_FFT_2Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  0800ac20  0800ac20  0001ac20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be94  0800be94  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800be94  0800be94  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be94  0800be94  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be98  0800be98  0001be98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800be9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a3c  200001e8  0800c084  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003c24  0800c084  00023c24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001a0a3  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00017fd4  00000000  00000000  0003a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a06  00000000  00000000  00052288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00055c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00097dda  00000000  00000000  00057328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001508  00000000  00000000  000ef108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b3e9  00000000  00000000  000f0610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071c8  00000000  00000000  0010ba4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac08 	.word	0x0800ac08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ac08 	.word	0x0800ac08

08000150 <cr4_fft_256_stm32>:
;* Return         : None
;********************************************************************************/
.thumb_func
cr4_fft_256_stm32:

        STMFD   SP!, {R4-R11, LR}
 8000150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        
        MOV r12, #0
 8000154:	f04f 0c00 	mov.w	ip, #0
        MOV r3, r0 
 8000158:	4603      	mov	r3, r0
        MOV r0,#0
 800015a:	f04f 0000 	mov.w	r0, #0

0800015e <preloop_v7>:
        
preloop_v7:
        ADD     r14, r1, r12, LSR#24 /*256pts*/
 800015e:	eb01 6e1c 	add.w	lr, r1, ip, lsr #24
       
        LDRSH r5, [r14, #2]       
 8000162:	f9be 5002 	ldrsh.w	r5, [lr, #2]
        LDRSH r4, [r14]
 8000166:	f9be 4000 	ldrsh.w	r4, [lr]
        ADD   r14, #NPT
 800016a:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
        LDRSH r9, [r14, #2]
 800016e:	f9be 9002 	ldrsh.w	r9, [lr, #2]
        LDRSH r8, [r14]
 8000172:	f9be 8000 	ldrsh.w	r8, [lr]
        ADD   r14, #NPT      
 8000176:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
        LDRSH r7, [r14, #2]
 800017a:	f9be 7002 	ldrsh.w	r7, [lr, #2]
        LDRSH r6, [r14]
 800017e:	f9be 6000 	ldrsh.w	r6, [lr]
        ADD   r14, #NPT        
 8000182:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
        LDRSH r11, [r14, #2]
 8000186:	f9be b002 	ldrsh.w	fp, [lr, #2]
        LDRSH r10, [r14]
 800018a:	f9be a000 	ldrsh.w	sl, [lr]
        ADD   r14, #NPT
 800018e:	f50e 7e80 	add.w	lr, lr, #256	; 0x100

        ADD     r8, r8, r10
 8000192:	44d0      	add	r8, sl
        ADD     r9, r9, r11
 8000194:	44d9      	add	r9, fp
        SUB     r10, r8, r10, LSL#1  
 8000196:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
        SUB     r11, r9, r11, LSL#1  
 800019a:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1

        MOV     r4, r4, ASR#2
 800019e:	ea4f 04a4 	mov.w	r4, r4, asr #2
        MOV     r5, r5, ASR#2
 80001a2:	ea4f 05a5 	mov.w	r5, r5, asr #2
        ADD     r4, r4, r6, ASR#2
 80001a6:	eb04 04a6 	add.w	r4, r4, r6, asr #2
        ADD     r5, r5, r7, ASR#2
 80001aa:	eb05 05a7 	add.w	r5, r5, r7, asr #2
        SUB     r6, r4, r6, ASR#1
 80001ae:	eba4 0666 	sub.w	r6, r4, r6, asr #1
        SUB     r7, r5, r7, ASR#1
 80001b2:	eba5 0767 	sub.w	r7, r5, r7, asr #1

        ADD     r4, r4, r8, ASR#2
 80001b6:	eb04 04a8 	add.w	r4, r4, r8, asr #2
        ADD     r5, r5, r9, ASR#2
 80001ba:	eb05 05a9 	add.w	r5, r5, r9, asr #2
        SUB     r8, r4, r8, ASR#1
 80001be:	eba4 0868 	sub.w	r8, r4, r8, asr #1
        SUB     r9, r5, r9, ASR#1
 80001c2:	eba5 0969 	sub.w	r9, r5, r9, asr #1

        ADD     r6, r6, r11, ASR#2
 80001c6:	eb06 06ab 	add.w	r6, r6, fp, asr #2
        SUB     r7, r7, r10, ASR#2
 80001ca:	eba7 07aa 	sub.w	r7, r7, sl, asr #2
        SUB     r11, r6, r11, ASR#1
 80001ce:	eba6 0b6b 	sub.w	fp, r6, fp, asr #1
        ADD     r10, r7, r10, ASR#1
 80001d2:	eb07 0a6a 	add.w	sl, r7, sl, asr #1
   
        STRH    r5, [r3, #2]
 80001d6:	805d      	strh	r5, [r3, #2]
        STRH    r4, [r3], #4
 80001d8:	f823 4b04 	strh.w	r4, [r3], #4
        STRH    r7, [r3, #2]
 80001dc:	805f      	strh	r7, [r3, #2]
        STRH    r6, [r3], #4
 80001de:	f823 6b04 	strh.w	r6, [r3], #4
        STRH    r9, [r3, #2]
 80001e2:	f8a3 9002 	strh.w	r9, [r3, #2]
        STRH    r8, [r3], #4
 80001e6:	f823 8b04 	strh.w	r8, [r3], #4
        STRH    r10, [r3, #2]  
 80001ea:	f8a3 a002 	strh.w	sl, [r3, #2]
        STRH    r11, [r3], #4
 80001ee:	f823 bb04 	strh.w	fp, [r3], #4
        
         ADD r0, r0, #1
 80001f2:	f100 0001 	add.w	r0, r0, #1
         
         RBIT r12, r0 
 80001f6:	fa90 fca0 	rbit	ip, r0
         
         CMP r0,#64 /*256pts*/  
 80001fa:	2840      	cmp	r0, #64	; 0x40
         BNE  preloop_v7
 80001fc:	d1af      	bne.n	800015e <preloop_v7>

         SUB     r1, r3, r2, LSL#2
 80001fe:	eba3 0182 	sub.w	r1, r3, r2, lsl #2
         MOV     r0, #16
 8000202:	f04f 0010 	mov.w	r0, #16
         MOVS    r2, r2, LSR#4   
 8000206:	0912      	lsrs	r2, r2, #4
;      in your main file.
;   2. Decomment the line LDR.W pssK, =TableFFT and comment the line 
;      ADRL    pssK, TableFFT_V7
;   3. Comment all the TableFFT_V7 data.
;------------------------------------------------------------------------------*/
         ADR    r3, TableFFT_V7    
 8000208:	f20f 132e 	addw	r3, pc, #302	; 0x12e

0800020c <passloop_v7>:
         /*LDR.W r3, =TableFFT*/      


passloop_v7:
         STMFD   SP!, {r1,r2}
 800020c:	e92d 0006 	stmdb	sp!, {r1, r2}
         ADD     r12, r0, r0, LSL#1
 8000210:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
         ADD     r1, r1, r12
 8000214:	4461      	add	r1, ip
         SUB     r2, r2, #1<<16
 8000216:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000

0800021a <grouploop_v7>:

grouploop_v7:
         ADD     r2,r2,r0,LSL#(16-2)
 800021a:	eb02 3280 	add.w	r2, r2, r0, lsl #14

0800021e <butterloop_v7>:

butterloop_v7:
        		
         LDRSH r5, [r1, #2]
 800021e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
         LDRSH r4, [r1]
 8000222:	f9b1 4000 	ldrsh.w	r4, [r1]
         SUB r1, r1, r0
 8000226:	eba1 0100 	sub.w	r1, r1, r0

      	LDRSH r11, [r3, #2]
 800022a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
      	LDRSH r10, [r3]
 800022e:	f9b3 a000 	ldrsh.w	sl, [r3]
      	ADD r3, r3, #4
 8000232:	f103 0304 	add.w	r3, r3, #4

         SUB  r14, r5, r4         
 8000236:	eba5 0e04 	sub.w	lr, r5, r4
         MUL  r12, r14, r11        
 800023a:	fb0e fc0b 	mul.w	ip, lr, fp
         ADD  r14, r10, r11, LSL#1  
 800023e:	eb0a 0e4b 	add.w	lr, sl, fp, lsl #1
         MLA  r11, r5, r10, r12     
 8000242:	fb05 cb0a 	mla	fp, r5, sl, ip
         MLA  r10, r4, r14, r12   
 8000246:	fb04 ca0e 	mla	sl, r4, lr, ip

         LDRSH r5, [r1, #2]
 800024a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
         LDRSH r4, [r1]
 800024e:	f9b1 4000 	ldrsh.w	r4, [r1]
         SUB r1, r1, r0
 8000252:	eba1 0100 	sub.w	r1, r1, r0
				
      	LDRSH r9, [r3, #2]
 8000256:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
      	LDRSH r8, [r3]
 800025a:	f9b3 8000 	ldrsh.w	r8, [r3]
      	ADD r3, r3, #4
 800025e:	f103 0304 	add.w	r3, r3, #4
        
         SUB  r14, r5, r4         
 8000262:	eba5 0e04 	sub.w	lr, r5, r4
         MUL  r12, r14, r9        
 8000266:	fb0e fc09 	mul.w	ip, lr, r9
         ADD  r14, r8, r9, LSL#1  
 800026a:	eb08 0e49 	add.w	lr, r8, r9, lsl #1
         MLA  r9, r5, r8, r12     
 800026e:	fb05 c908 	mla	r9, r5, r8, ip
         MLA  r8, r4, r14, r12   
 8000272:	fb04 c80e 	mla	r8, r4, lr, ip
	
         LDRSH r5, [r1, #2]
 8000276:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
         LDRSH r4, [r1]
 800027a:	f9b1 4000 	ldrsh.w	r4, [r1]
         SUB r1, r1, r0
 800027e:	eba1 0100 	sub.w	r1, r1, r0
				
         LDRSH r7, [r3, #2]
 8000282:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
      	LDRSH r6, [r3]
 8000286:	f9b3 6000 	ldrsh.w	r6, [r3]
      	ADD r3, r3, #4
 800028a:	f103 0304 	add.w	r3, r3, #4
		
         SUB  r14, r5, r4        
 800028e:	eba5 0e04 	sub.w	lr, r5, r4
         MUL  r12, r14, r7        
 8000292:	fb0e fc07 	mul.w	ip, lr, r7
         ADD  r14, r6, r7, LSL#1  
 8000296:	eb06 0e47 	add.w	lr, r6, r7, lsl #1
         MLA  r7, r5, r6, r12     
 800029a:	fb05 c706 	mla	r7, r5, r6, ip
         MLA  r6, r4, r14, r12   
 800029e:	fb04 c60e 	mla	r6, r4, lr, ip
		
         LDRSH r5, [r1, #2]
 80002a2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
      	LDRSH r4, [r1]
 80002a6:	f9b1 4000 	ldrsh.w	r4, [r1]
    		
         ADD     r8, r8, r10
 80002aa:	44d0      	add	r8, sl
         ADD     r9, r9, r11
 80002ac:	44d9      	add	r9, fp
         SUB     r10, r8, r10, LSL#1
 80002ae:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
         SUB     r11, r9, r11, LSL#1
 80002b2:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1

         MOV     r4, r4, ASR#2
 80002b6:	ea4f 04a4 	mov.w	r4, r4, asr #2
         MOV     r5, r5, ASR#2
 80002ba:	ea4f 05a5 	mov.w	r5, r5, asr #2
         ADD     r4, r4, r6, ASR#(2+14)
 80002be:	eb04 4426 	add.w	r4, r4, r6, asr #16
         ADD     r5, r5, r7, ASR#(2+14)
 80002c2:	eb05 4527 	add.w	r5, r5, r7, asr #16
         SUB     r6, r4, r6, ASR#(1+14)
 80002c6:	eba4 36e6 	sub.w	r6, r4, r6, asr #15
         SUB     r7, r5, r7, ASR#(1+14)
 80002ca:	eba5 37e7 	sub.w	r7, r5, r7, asr #15

         ADD     r4, r4, r8, ASR#(2+14)
 80002ce:	eb04 4428 	add.w	r4, r4, r8, asr #16
         ADD     r5, r5, r9, ASR#(2+14)
 80002d2:	eb05 4529 	add.w	r5, r5, r9, asr #16
         SUB     r8, r4, r8, ASR#(1+14)
 80002d6:	eba4 38e8 	sub.w	r8, r4, r8, asr #15
         SUB     r9, r5, r9, ASR#(1+14)
 80002da:	eba5 39e9 	sub.w	r9, r5, r9, asr #15

         ADD     r6, r6, r11, ASR#(2+14)
 80002de:	eb06 462b 	add.w	r6, r6, fp, asr #16
         SUB     r7, r7, r10, ASR#(2+14)
 80002e2:	eba7 472a 	sub.w	r7, r7, sl, asr #16
         SUB     r11, r6, r11, ASR#(1+14)
 80002e6:	eba6 3beb 	sub.w	fp, r6, fp, asr #15
         ADD     r10, r7, r10, ASR#(1+14)      
 80002ea:	eb07 3aea 	add.w	sl, r7, sl, asr #15

         STRH    r5, [r1, #2]
 80002ee:	804d      	strh	r5, [r1, #2]
         STRH    r4, [r1]
 80002f0:	800c      	strh	r4, [r1, #0]
         ADD 	r1, r1, r0
 80002f2:	4401      	add	r1, r0
         STRH    r7, [r1, #2]
 80002f4:	804f      	strh	r7, [r1, #2]
         STRH    r6, [r1]
 80002f6:	800e      	strh	r6, [r1, #0]
         ADD     r1, r1, r0
 80002f8:	4401      	add	r1, r0
         STRH    r9, [r1, #2]
 80002fa:	f8a1 9002 	strh.w	r9, [r1, #2]
         STRH    r8, [r1]
 80002fe:	f8a1 8000 	strh.w	r8, [r1]
         ADD     r1, r1, r0
 8000302:	4401      	add	r1, r0
         STRH    r10, [r1, #2]  
 8000304:	f8a1 a002 	strh.w	sl, [r1, #2]
         STRH    r11, [r1], #4
 8000308:	f821 bb04 	strh.w	fp, [r1], #4
         SUBS        r2,r2, #1<<16
 800030c:	f5b2 3280 	subs.w	r2, r2, #65536	; 0x10000
         BGE     butterloop_v7
 8000310:	da85      	bge.n	800021e <butterloop_v7>
         ADD     r12, r0, r0, LSL#1
 8000312:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
         ADD     r1, r1, r12
 8000316:	4461      	add	r1, ip

         SUB     r2, r2, #1
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
         MOVS    r14, r2, LSL#16
 800031c:	ea5f 4e02 	movs.w	lr, r2, lsl #16
         IT      ne
 8000320:	bf18      	it	ne
         SUBNE   r3, r3, r12
 8000322:	eba3 030c 	subne.w	r3, r3, ip
         BNE     grouploop_v7
 8000326:	f47f af78 	bne.w	800021a <grouploop_v7>

         LDMFD   sp!, {r1, r2}
 800032a:	bc06      	pop	{r1, r2}
         MOV  r0,r0,LSL#2		
 800032c:	ea4f 0080 	mov.w	r0, r0, lsl #2
         MOVS    r2, r2, LSR#2
 8000330:	0892      	lsrs	r2, r2, #2
       	BNE     passloop_v7
 8000332:	f47f af6b 	bne.w	800020c <passloop_v7>
       	LDMFD   SP!, {R4-R11, PC}
 8000336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800033a <TableFFT_V7>:
 800033a:	4000      	.short	0x4000
 800033c:	40000000 	.word	0x40000000
 8000340:	40000000 	.word	0x40000000
 8000344:	dd5d0000 	.word	0xdd5d0000
 8000348:	22a33b21 	.word	0x22a33b21
 800034c:	0000187e 	.word	0x0000187e
 8000350:	a57e2d41 	.word	0xa57e2d41
 8000354:	00002d41 	.word	0x00002d41
 8000358:	c0002d41 	.word	0xc0002d41
 800035c:	dd5d4000 	.word	0xdd5d4000
 8000360:	dd5de782 	.word	0xdd5de782
 8000364:	a57e3b21 	.word	0xa57e3b21
 8000368:	40002d41 	.word	0x40002d41
 800036c:	40000000 	.word	0x40000000
 8000370:	40000000 	.word	0x40000000
 8000374:	2aaa0000 	.word	0x2aaa0000
 8000378:	396b1294 	.word	0x396b1294
 800037c:	32490646 	.word	0x32490646
 8000380:	11a80c7c 	.word	0x11a80c7c
 8000384:	3249238e 	.word	0x3249238e
 8000388:	22a30c7c 	.word	0x22a30c7c
 800038c:	f721187e 	.word	0xf721187e
 8000390:	2aaa3179 	.word	0x2aaa3179
 8000394:	11a81294 	.word	0x11a81294
 8000398:	dd5d238e 	.word	0xdd5d238e
 800039c:	22a33b21 	.word	0x22a33b21
 80003a0:	0000187e 	.word	0x0000187e
 80003a4:	c6952d41 	.word	0xc6952d41
 80003a8:	1a463fb1 	.word	0x1a463fb1
 80003ac:	ee581e2b 	.word	0xee581e2b
 80003b0:	b4be3537 	.word	0xb4be3537
 80003b4:	11a83ec5 	.word	0x11a83ec5
 80003b8:	dd5d238e 	.word	0xdd5d238e
 80003bc:	a9633b21 	.word	0xa9633b21
 80003c0:	08df3871 	.word	0x08df3871
 80003c4:	cdb7289a 	.word	0xcdb7289a
 80003c8:	a57e3ec5 	.word	0xa57e3ec5
 80003cc:	00002d41 	.word	0x00002d41
 80003d0:	c0002d41 	.word	0xc0002d41
 80003d4:	a9634000 	.word	0xa9634000
 80003d8:	f7211e2b 	.word	0xf7211e2b
 80003dc:	b4be3179 	.word	0xb4be3179
 80003e0:	b4be3ec5 	.word	0xb4be3ec5
 80003e4:	ee580c7c 	.word	0xee580c7c
 80003e8:	ac613537 	.word	0xac613537
 80003ec:	c6953b21 	.word	0xc6953b21
 80003f0:	e5baf9ba 	.word	0xe5baf9ba
 80003f4:	a73b3871 	.word	0xa73b3871
 80003f8:	dd5d3537 	.word	0xdd5d3537
 80003fc:	dd5de782 	.word	0xdd5de782
 8000400:	a57e3b21 	.word	0xa57e3b21
 8000404:	f7212d41 	.word	0xf7212d41
 8000408:	d556d766 	.word	0xd556d766
 800040c:	a73b3d3f 	.word	0xa73b3d3f
 8000410:	11a8238e 	.word	0x11a8238e
 8000414:	cdb7cac9 	.word	0xcdb7cac9
 8000418:	ac613ec5 	.word	0xac613ec5
 800041c:	2aaa187e 	.word	0x2aaa187e
 8000420:	c695c2c1 	.word	0xc695c2c1
 8000424:	b4be3fb1 	.word	0xb4be3fb1
 8000428:	40000c7c 	.word	0x40000c7c
 800042c:	40000000 	.word	0x40000000
 8000430:	40000000 	.word	0x40000000
 8000434:	3b1e0000 	.word	0x3b1e0000
 8000438:	3e6904b5 	.word	0x3e6904b5
 800043c:	3cc80192 	.word	0x3cc80192
 8000440:	35eb0324 	.word	0x35eb0324
 8000444:	3cc80964 	.word	0x3cc80964
 8000448:	396b0324 	.word	0x396b0324
 800044c:	306c0646 	.word	0x306c0646
 8000450:	3b1e0e06 	.word	0x3b1e0e06
 8000454:	35eb04b5 	.word	0x35eb04b5
 8000458:	2aaa0964 	.word	0x2aaa0964
 800045c:	396b1294 	.word	0x396b1294
 8000460:	32490646 	.word	0x32490646
 8000464:	24ae0c7c 	.word	0x24ae0c7c
 8000468:	37af1709 	.word	0x37af1709
 800046c:	2e8807d6 	.word	0x2e8807d6
 8000470:	1e7e0f8d 	.word	0x1e7e0f8d
 8000474:	35eb1b5d 	.word	0x35eb1b5d
 8000478:	2aaa0964 	.word	0x2aaa0964
 800047c:	18241294 	.word	0x18241294
 8000480:	341e1f8c 	.word	0x341e1f8c
 8000484:	26b30af1 	.word	0x26b30af1
 8000488:	11a81590 	.word	0x11a81590
 800048c:	3249238e 	.word	0x3249238e
 8000490:	22a30c7c 	.word	0x22a30c7c
 8000494:	0b14187e 	.word	0x0b14187e
 8000498:	306c2760 	.word	0x306c2760
 800049c:	1e7e0e06 	.word	0x1e7e0e06
 80004a0:	04711b5d 	.word	0x04711b5d
 80004a4:	2e882afb 	.word	0x2e882afb
 80004a8:	1a460f8d 	.word	0x1a460f8d
 80004ac:	fdc71e2b 	.word	0xfdc71e2b
 80004b0:	2c9d2e5a 	.word	0x2c9d2e5a
 80004b4:	15fe1112 	.word	0x15fe1112
 80004b8:	f72120e7 	.word	0xf72120e7
 80004bc:	2aaa3179 	.word	0x2aaa3179
 80004c0:	11a81294 	.word	0x11a81294
 80004c4:	f087238e 	.word	0xf087238e
 80004c8:	28b23453 	.word	0x28b23453
 80004cc:	0d481413 	.word	0x0d481413
 80004d0:	ea022620 	.word	0xea022620
 80004d4:	26b336e5 	.word	0x26b336e5
 80004d8:	08df1590 	.word	0x08df1590
 80004dc:	e39c289a 	.word	0xe39c289a
 80004e0:	24ae392b 	.word	0x24ae392b
 80004e4:	04711709 	.word	0x04711709
 80004e8:	dd5d2afb 	.word	0xdd5d2afb
 80004ec:	22a33b21 	.word	0x22a33b21
 80004f0:	0000187e 	.word	0x0000187e
 80004f4:	d74e2d41 	.word	0xd74e2d41
 80004f8:	20933cc5 	.word	0x20933cc5
 80004fc:	fb8f19ef 	.word	0xfb8f19ef
 8000500:	d1782f6c 	.word	0xd1782f6c
 8000504:	1e7e3e15 	.word	0x1e7e3e15
 8000508:	f7211b5d 	.word	0xf7211b5d
 800050c:	cbe23179 	.word	0xcbe23179
 8000510:	1c643f0f 	.word	0x1c643f0f
 8000514:	f2b81cc6 	.word	0xf2b81cc6
 8000518:	c6953368 	.word	0xc6953368
 800051c:	1a463fb1 	.word	0x1a463fb1
 8000520:	ee581e2b 	.word	0xee581e2b
 8000524:	c1973537 	.word	0xc1973537
 8000528:	18243ffb 	.word	0x18243ffb
 800052c:	ea021f8c 	.word	0xea021f8c
 8000530:	bcf036e5 	.word	0xbcf036e5
 8000534:	15fe3fec 	.word	0x15fe3fec
 8000538:	e5ba20e7 	.word	0xe5ba20e7
 800053c:	b8a63871 	.word	0xb8a63871
 8000540:	13d53f85 	.word	0x13d53f85
 8000544:	e182223d 	.word	0xe182223d
 8000548:	b4be39db 	.word	0xb4be39db
 800054c:	11a83ec5 	.word	0x11a83ec5
 8000550:	dd5d238e 	.word	0xdd5d238e
 8000554:	b1403b21 	.word	0xb1403b21
 8000558:	0f793daf 	.word	0x0f793daf
 800055c:	d94d24da 	.word	0xd94d24da
 8000560:	ae2e3c42 	.word	0xae2e3c42
 8000564:	0d483c42 	.word	0x0d483c42
 8000568:	d5562620 	.word	0xd5562620
 800056c:	ab8e3d3f 	.word	0xab8e3d3f
 8000570:	0b143a82 	.word	0x0b143a82
 8000574:	d1782760 	.word	0xd1782760
 8000578:	a9633e15 	.word	0xa9633e15
 800057c:	08df3871 	.word	0x08df3871
 8000580:	cdb7289a 	.word	0xcdb7289a
 8000584:	a7b13ec5 	.word	0xa7b13ec5
 8000588:	06a93612 	.word	0x06a93612
 800058c:	ca1529ce 	.word	0xca1529ce
 8000590:	a6783f4f 	.word	0xa6783f4f
 8000594:	04713368 	.word	0x04713368
 8000598:	c6952afb 	.word	0xc6952afb
 800059c:	a5bc3fb1 	.word	0xa5bc3fb1
 80005a0:	02393076 	.word	0x02393076
 80005a4:	c3382c21 	.word	0xc3382c21
 80005a8:	a57e3fec 	.word	0xa57e3fec
 80005ac:	00002d41 	.word	0x00002d41
 80005b0:	c0002d41 	.word	0xc0002d41
 80005b4:	a5bc4000 	.word	0xa5bc4000
 80005b8:	fdc729ce 	.word	0xfdc729ce
 80005bc:	bcf02e5a 	.word	0xbcf02e5a
 80005c0:	a6783fec 	.word	0xa6783fec
 80005c4:	fb8f2620 	.word	0xfb8f2620
 80005c8:	ba092f6c 	.word	0xba092f6c
 80005cc:	a7b13fb1 	.word	0xa7b13fb1
 80005d0:	f957223d 	.word	0xf957223d
 80005d4:	b74d3076 	.word	0xb74d3076
 80005d8:	a9633f4f 	.word	0xa9633f4f
 80005dc:	f7211e2b 	.word	0xf7211e2b
 80005e0:	b4be3179 	.word	0xb4be3179
 80005e4:	ab8e3ec5 	.word	0xab8e3ec5
 80005e8:	f4ec19ef 	.word	0xf4ec19ef
 80005ec:	b25e3274 	.word	0xb25e3274
 80005f0:	ae2e3e15 	.word	0xae2e3e15
 80005f4:	f2b81590 	.word	0xf2b81590
 80005f8:	b02d3368 	.word	0xb02d3368
 80005fc:	b1403d3f 	.word	0xb1403d3f
 8000600:	f0871112 	.word	0xf0871112
 8000604:	ae2e3453 	.word	0xae2e3453
 8000608:	b4be3c42 	.word	0xb4be3c42
 800060c:	ee580c7c 	.word	0xee580c7c
 8000610:	ac613537 	.word	0xac613537
 8000614:	b8a63b21 	.word	0xb8a63b21
 8000618:	ec2b07d6 	.word	0xec2b07d6
 800061c:	aac83612 	.word	0xaac83612
 8000620:	bcf039db 	.word	0xbcf039db
 8000624:	ea020324 	.word	0xea020324
 8000628:	a96336e5 	.word	0xa96336e5
 800062c:	c1973871 	.word	0xc1973871
 8000630:	e7dcfe6e 	.word	0xe7dcfe6e
 8000634:	a83437b0 	.word	0xa83437b0
 8000638:	c69536e5 	.word	0xc69536e5
 800063c:	e5baf9ba 	.word	0xe5baf9ba
 8000640:	a73b3871 	.word	0xa73b3871
 8000644:	cbe23537 	.word	0xcbe23537
 8000648:	e39cf50f 	.word	0xe39cf50f
 800064c:	a678392b 	.word	0xa678392b
 8000650:	d1783368 	.word	0xd1783368
 8000654:	e182f073 	.word	0xe182f073
 8000658:	a5ed39db 	.word	0xa5ed39db
 800065c:	d74e3179 	.word	0xd74e3179
 8000660:	df6debed 	.word	0xdf6debed
 8000664:	a5993a82 	.word	0xa5993a82
 8000668:	dd5d2f6c 	.word	0xdd5d2f6c
 800066c:	dd5de782 	.word	0xdd5de782
 8000670:	a57e3b21 	.word	0xa57e3b21
 8000674:	e39c2d41 	.word	0xe39c2d41
 8000678:	db52e33a 	.word	0xdb52e33a
 800067c:	a5993bb6 	.word	0xa5993bb6
 8000680:	ea022afb 	.word	0xea022afb
 8000684:	d94ddf19 	.word	0xd94ddf19
 8000688:	a5ed3c42 	.word	0xa5ed3c42
 800068c:	f087289a 	.word	0xf087289a
 8000690:	d74edb26 	.word	0xd74edb26
 8000694:	a6783cc5 	.word	0xa6783cc5
 8000698:	f7212620 	.word	0xf7212620
 800069c:	d556d766 	.word	0xd556d766
 80006a0:	a73b3d3f 	.word	0xa73b3d3f
 80006a4:	fdc7238e 	.word	0xfdc7238e
 80006a8:	d363d3df 	.word	0xd363d3df
 80006ac:	a8343daf 	.word	0xa8343daf
 80006b0:	047120e7 	.word	0x047120e7
 80006b4:	d178d094 	.word	0xd178d094
 80006b8:	a9633e15 	.word	0xa9633e15
 80006bc:	0b141e2b 	.word	0x0b141e2b
 80006c0:	cf94cd8c 	.word	0xcf94cd8c
 80006c4:	aac83e72 	.word	0xaac83e72
 80006c8:	11a81b5d 	.word	0x11a81b5d
 80006cc:	cdb7cac9 	.word	0xcdb7cac9
 80006d0:	ac613ec5 	.word	0xac613ec5
 80006d4:	1824187e 	.word	0x1824187e
 80006d8:	cbe2c850 	.word	0xcbe2c850
 80006dc:	ae2e3f0f 	.word	0xae2e3f0f
 80006e0:	1e7e1590 	.word	0x1e7e1590
 80006e4:	ca15c625 	.word	0xca15c625
 80006e8:	b02d3f4f 	.word	0xb02d3f4f
 80006ec:	24ae1294 	.word	0x24ae1294
 80006f0:	c851c44a 	.word	0xc851c44a
 80006f4:	b25e3f85 	.word	0xb25e3f85
 80006f8:	2aaa0f8d 	.word	0x2aaa0f8d
 80006fc:	c695c2c1 	.word	0xc695c2c1
 8000700:	b4be3fb1 	.word	0xb4be3fb1
 8000704:	306c0c7c 	.word	0x306c0c7c
 8000708:	c4e2c18e 	.word	0xc4e2c18e
 800070c:	b74d3fd4 	.word	0xb74d3fd4
 8000710:	35eb0964 	.word	0x35eb0964
 8000714:	c338c0b1 	.word	0xc338c0b1
 8000718:	ba093fec 	.word	0xba093fec
 800071c:	3b1e0646 	.word	0x3b1e0646
 8000720:	c197c02c 	.word	0xc197c02c
 8000724:	bcf03ffb 	.word	0xbcf03ffb
 8000728:	0324      	.short	0x0324

0800072a <strlen>:
 800072a:	4603      	mov	r3, r0
 800072c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000730:	2a00      	cmp	r2, #0
 8000732:	d1fb      	bne.n	800072c <strlen+0x2>
 8000734:	1a18      	subs	r0, r3, r0
 8000736:	3801      	subs	r0, #1
 8000738:	4770      	bx	lr
	...

0800073c <__aeabi_drsub>:
 800073c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000740:	e002      	b.n	8000748 <__adddf3>
 8000742:	bf00      	nop

08000744 <__aeabi_dsub>:
 8000744:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000748 <__adddf3>:
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800074e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000752:	ea94 0f05 	teq	r4, r5
 8000756:	bf08      	it	eq
 8000758:	ea90 0f02 	teqeq	r0, r2
 800075c:	bf1f      	itttt	ne
 800075e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000762:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000766:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800076a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800076e:	f000 80e2 	beq.w	8000936 <__adddf3+0x1ee>
 8000772:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000776:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800077a:	bfb8      	it	lt
 800077c:	426d      	neglt	r5, r5
 800077e:	dd0c      	ble.n	800079a <__adddf3+0x52>
 8000780:	442c      	add	r4, r5
 8000782:	ea80 0202 	eor.w	r2, r0, r2
 8000786:	ea81 0303 	eor.w	r3, r1, r3
 800078a:	ea82 0000 	eor.w	r0, r2, r0
 800078e:	ea83 0101 	eor.w	r1, r3, r1
 8000792:	ea80 0202 	eor.w	r2, r0, r2
 8000796:	ea81 0303 	eor.w	r3, r1, r3
 800079a:	2d36      	cmp	r5, #54	; 0x36
 800079c:	bf88      	it	hi
 800079e:	bd30      	pophi	{r4, r5, pc}
 80007a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80007ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80007b0:	d002      	beq.n	80007b8 <__adddf3+0x70>
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80007bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80007c4:	d002      	beq.n	80007cc <__adddf3+0x84>
 80007c6:	4252      	negs	r2, r2
 80007c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007cc:	ea94 0f05 	teq	r4, r5
 80007d0:	f000 80a7 	beq.w	8000922 <__adddf3+0x1da>
 80007d4:	f1a4 0401 	sub.w	r4, r4, #1
 80007d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80007dc:	db0d      	blt.n	80007fa <__adddf3+0xb2>
 80007de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80007e2:	fa22 f205 	lsr.w	r2, r2, r5
 80007e6:	1880      	adds	r0, r0, r2
 80007e8:	f141 0100 	adc.w	r1, r1, #0
 80007ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80007f0:	1880      	adds	r0, r0, r2
 80007f2:	fa43 f305 	asr.w	r3, r3, r5
 80007f6:	4159      	adcs	r1, r3
 80007f8:	e00e      	b.n	8000818 <__adddf3+0xd0>
 80007fa:	f1a5 0520 	sub.w	r5, r5, #32
 80007fe:	f10e 0e20 	add.w	lr, lr, #32
 8000802:	2a01      	cmp	r2, #1
 8000804:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000808:	bf28      	it	cs
 800080a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800080e:	fa43 f305 	asr.w	r3, r3, r5
 8000812:	18c0      	adds	r0, r0, r3
 8000814:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800081c:	d507      	bpl.n	800082e <__adddf3+0xe6>
 800081e:	f04f 0e00 	mov.w	lr, #0
 8000822:	f1dc 0c00 	rsbs	ip, ip, #0
 8000826:	eb7e 0000 	sbcs.w	r0, lr, r0
 800082a:	eb6e 0101 	sbc.w	r1, lr, r1
 800082e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000832:	d31b      	bcc.n	800086c <__adddf3+0x124>
 8000834:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000838:	d30c      	bcc.n	8000854 <__adddf3+0x10c>
 800083a:	0849      	lsrs	r1, r1, #1
 800083c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000840:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000844:	f104 0401 	add.w	r4, r4, #1
 8000848:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800084c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000850:	f080 809a 	bcs.w	8000988 <__adddf3+0x240>
 8000854:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000858:	bf08      	it	eq
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	ea41 0105 	orr.w	r1, r1, r5
 800086a:	bd30      	pop	{r4, r5, pc}
 800086c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000870:	4140      	adcs	r0, r0
 8000872:	eb41 0101 	adc.w	r1, r1, r1
 8000876:	3c01      	subs	r4, #1
 8000878:	bf28      	it	cs
 800087a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800087e:	d2e9      	bcs.n	8000854 <__adddf3+0x10c>
 8000880:	f091 0f00 	teq	r1, #0
 8000884:	bf04      	itt	eq
 8000886:	4601      	moveq	r1, r0
 8000888:	2000      	moveq	r0, #0
 800088a:	fab1 f381 	clz	r3, r1
 800088e:	bf08      	it	eq
 8000890:	3320      	addeq	r3, #32
 8000892:	f1a3 030b 	sub.w	r3, r3, #11
 8000896:	f1b3 0220 	subs.w	r2, r3, #32
 800089a:	da0c      	bge.n	80008b6 <__adddf3+0x16e>
 800089c:	320c      	adds	r2, #12
 800089e:	dd08      	ble.n	80008b2 <__adddf3+0x16a>
 80008a0:	f102 0c14 	add.w	ip, r2, #20
 80008a4:	f1c2 020c 	rsb	r2, r2, #12
 80008a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80008ac:	fa21 f102 	lsr.w	r1, r1, r2
 80008b0:	e00c      	b.n	80008cc <__adddf3+0x184>
 80008b2:	f102 0214 	add.w	r2, r2, #20
 80008b6:	bfd8      	it	le
 80008b8:	f1c2 0c20 	rsble	ip, r2, #32
 80008bc:	fa01 f102 	lsl.w	r1, r1, r2
 80008c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008c4:	bfdc      	itt	le
 80008c6:	ea41 010c 	orrle.w	r1, r1, ip
 80008ca:	4090      	lslle	r0, r2
 80008cc:	1ae4      	subs	r4, r4, r3
 80008ce:	bfa2      	ittt	ge
 80008d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80008d4:	4329      	orrge	r1, r5
 80008d6:	bd30      	popge	{r4, r5, pc}
 80008d8:	ea6f 0404 	mvn.w	r4, r4
 80008dc:	3c1f      	subs	r4, #31
 80008de:	da1c      	bge.n	800091a <__adddf3+0x1d2>
 80008e0:	340c      	adds	r4, #12
 80008e2:	dc0e      	bgt.n	8000902 <__adddf3+0x1ba>
 80008e4:	f104 0414 	add.w	r4, r4, #20
 80008e8:	f1c4 0220 	rsb	r2, r4, #32
 80008ec:	fa20 f004 	lsr.w	r0, r0, r4
 80008f0:	fa01 f302 	lsl.w	r3, r1, r2
 80008f4:	ea40 0003 	orr.w	r0, r0, r3
 80008f8:	fa21 f304 	lsr.w	r3, r1, r4
 80008fc:	ea45 0103 	orr.w	r1, r5, r3
 8000900:	bd30      	pop	{r4, r5, pc}
 8000902:	f1c4 040c 	rsb	r4, r4, #12
 8000906:	f1c4 0220 	rsb	r2, r4, #32
 800090a:	fa20 f002 	lsr.w	r0, r0, r2
 800090e:	fa01 f304 	lsl.w	r3, r1, r4
 8000912:	ea40 0003 	orr.w	r0, r0, r3
 8000916:	4629      	mov	r1, r5
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	fa21 f004 	lsr.w	r0, r1, r4
 800091e:	4629      	mov	r1, r5
 8000920:	bd30      	pop	{r4, r5, pc}
 8000922:	f094 0f00 	teq	r4, #0
 8000926:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800092a:	bf06      	itte	eq
 800092c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000930:	3401      	addeq	r4, #1
 8000932:	3d01      	subne	r5, #1
 8000934:	e74e      	b.n	80007d4 <__adddf3+0x8c>
 8000936:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800093a:	bf18      	it	ne
 800093c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000940:	d029      	beq.n	8000996 <__adddf3+0x24e>
 8000942:	ea94 0f05 	teq	r4, r5
 8000946:	bf08      	it	eq
 8000948:	ea90 0f02 	teqeq	r0, r2
 800094c:	d005      	beq.n	800095a <__adddf3+0x212>
 800094e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000952:	bf04      	itt	eq
 8000954:	4619      	moveq	r1, r3
 8000956:	4610      	moveq	r0, r2
 8000958:	bd30      	pop	{r4, r5, pc}
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf1e      	ittt	ne
 8000960:	2100      	movne	r1, #0
 8000962:	2000      	movne	r0, #0
 8000964:	bd30      	popne	{r4, r5, pc}
 8000966:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800096a:	d105      	bne.n	8000978 <__adddf3+0x230>
 800096c:	0040      	lsls	r0, r0, #1
 800096e:	4149      	adcs	r1, r1
 8000970:	bf28      	it	cs
 8000972:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000976:	bd30      	pop	{r4, r5, pc}
 8000978:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800097c:	bf3c      	itt	cc
 800097e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000982:	bd30      	popcc	{r4, r5, pc}
 8000984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000988:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800098c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	bd30      	pop	{r4, r5, pc}
 8000996:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800099a:	bf1a      	itte	ne
 800099c:	4619      	movne	r1, r3
 800099e:	4610      	movne	r0, r2
 80009a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80009a4:	bf1c      	itt	ne
 80009a6:	460b      	movne	r3, r1
 80009a8:	4602      	movne	r2, r0
 80009aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ae:	bf06      	itte	eq
 80009b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80009b4:	ea91 0f03 	teqeq	r1, r3
 80009b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80009bc:	bd30      	pop	{r4, r5, pc}
 80009be:	bf00      	nop

080009c0 <__aeabi_ui2d>:
 80009c0:	f090 0f00 	teq	r0, #0
 80009c4:	bf04      	itt	eq
 80009c6:	2100      	moveq	r1, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	b530      	push	{r4, r5, lr}
 80009cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009d4:	f04f 0500 	mov.w	r5, #0
 80009d8:	f04f 0100 	mov.w	r1, #0
 80009dc:	e750      	b.n	8000880 <__adddf3+0x138>
 80009de:	bf00      	nop

080009e0 <__aeabi_i2d>:
 80009e0:	f090 0f00 	teq	r0, #0
 80009e4:	bf04      	itt	eq
 80009e6:	2100      	moveq	r1, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	b530      	push	{r4, r5, lr}
 80009ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80009f8:	bf48      	it	mi
 80009fa:	4240      	negmi	r0, r0
 80009fc:	f04f 0100 	mov.w	r1, #0
 8000a00:	e73e      	b.n	8000880 <__adddf3+0x138>
 8000a02:	bf00      	nop

08000a04 <__aeabi_f2d>:
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000a0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000a12:	bf1f      	itttt	ne
 8000a14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000a18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000a20:	4770      	bxne	lr
 8000a22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000a26:	bf08      	it	eq
 8000a28:	4770      	bxeq	lr
 8000a2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000a2e:	bf04      	itt	eq
 8000a30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000a34:	4770      	bxeq	lr
 8000a36:	b530      	push	{r4, r5, lr}
 8000a38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000a3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a44:	e71c      	b.n	8000880 <__adddf3+0x138>
 8000a46:	bf00      	nop

08000a48 <__aeabi_ul2d>:
 8000a48:	ea50 0201 	orrs.w	r2, r0, r1
 8000a4c:	bf08      	it	eq
 8000a4e:	4770      	bxeq	lr
 8000a50:	b530      	push	{r4, r5, lr}
 8000a52:	f04f 0500 	mov.w	r5, #0
 8000a56:	e00a      	b.n	8000a6e <__aeabi_l2d+0x16>

08000a58 <__aeabi_l2d>:
 8000a58:	ea50 0201 	orrs.w	r2, r0, r1
 8000a5c:	bf08      	it	eq
 8000a5e:	4770      	bxeq	lr
 8000a60:	b530      	push	{r4, r5, lr}
 8000a62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000a66:	d502      	bpl.n	8000a6e <__aeabi_l2d+0x16>
 8000a68:	4240      	negs	r0, r0
 8000a6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a7a:	f43f aed8 	beq.w	800082e <__adddf3+0xe6>
 8000a7e:	f04f 0203 	mov.w	r2, #3
 8000a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a86:	bf18      	it	ne
 8000a88:	3203      	addne	r2, #3
 8000a8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a8e:	bf18      	it	ne
 8000a90:	3203      	addne	r2, #3
 8000a92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa2:	fa01 fe03 	lsl.w	lr, r1, r3
 8000aa6:	ea40 000e 	orr.w	r0, r0, lr
 8000aaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000aae:	4414      	add	r4, r2
 8000ab0:	e6bd      	b.n	800082e <__adddf3+0xe6>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dmul>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000abe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ac2:	bf1d      	ittte	ne
 8000ac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac8:	ea94 0f0c 	teqne	r4, ip
 8000acc:	ea95 0f0c 	teqne	r5, ip
 8000ad0:	f000 f8de 	bleq	8000c90 <__aeabi_dmul+0x1dc>
 8000ad4:	442c      	add	r4, r5
 8000ad6:	ea81 0603 	eor.w	r6, r1, r3
 8000ada:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000ade:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000ae2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ae6:	bf18      	it	ne
 8000ae8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af4:	d038      	beq.n	8000b68 <__aeabi_dmul+0xb4>
 8000af6:	fba0 ce02 	umull	ip, lr, r0, r2
 8000afa:	f04f 0500 	mov.w	r5, #0
 8000afe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000b02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000b06:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000b0a:	f04f 0600 	mov.w	r6, #0
 8000b0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000b12:	f09c 0f00 	teq	ip, #0
 8000b16:	bf18      	it	ne
 8000b18:	f04e 0e01 	orrne.w	lr, lr, #1
 8000b1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000b20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b28:	d204      	bcs.n	8000b34 <__aeabi_dmul+0x80>
 8000b2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b2e:	416d      	adcs	r5, r5
 8000b30:	eb46 0606 	adc.w	r6, r6, r6
 8000b34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b4c:	bf88      	it	hi
 8000b4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b52:	d81e      	bhi.n	8000b92 <__aeabi_dmul+0xde>
 8000b54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b5e:	f150 0000 	adcs.w	r0, r0, #0
 8000b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b6c:	ea46 0101 	orr.w	r1, r6, r1
 8000b70:	ea40 0002 	orr.w	r0, r0, r2
 8000b74:	ea81 0103 	eor.w	r1, r1, r3
 8000b78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000b7c:	bfc2      	ittt	gt
 8000b7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b86:	bd70      	popgt	{r4, r5, r6, pc}
 8000b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8c:	f04f 0e00 	mov.w	lr, #0
 8000b90:	3c01      	subs	r4, #1
 8000b92:	f300 80ab 	bgt.w	8000cec <__aeabi_dmul+0x238>
 8000b96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b9a:	bfde      	ittt	le
 8000b9c:	2000      	movle	r0, #0
 8000b9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000ba2:	bd70      	pople	{r4, r5, r6, pc}
 8000ba4:	f1c4 0400 	rsb	r4, r4, #0
 8000ba8:	3c20      	subs	r4, #32
 8000baa:	da35      	bge.n	8000c18 <__aeabi_dmul+0x164>
 8000bac:	340c      	adds	r4, #12
 8000bae:	dc1b      	bgt.n	8000be8 <__aeabi_dmul+0x134>
 8000bb0:	f104 0414 	add.w	r4, r4, #20
 8000bb4:	f1c4 0520 	rsb	r5, r4, #32
 8000bb8:	fa00 f305 	lsl.w	r3, r0, r5
 8000bbc:	fa20 f004 	lsr.w	r0, r0, r4
 8000bc0:	fa01 f205 	lsl.w	r2, r1, r5
 8000bc4:	ea40 0002 	orr.w	r0, r0, r2
 8000bc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bd4:	fa21 f604 	lsr.w	r6, r1, r4
 8000bd8:	eb42 0106 	adc.w	r1, r2, r6
 8000bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	f1c4 040c 	rsb	r4, r4, #12
 8000bec:	f1c4 0520 	rsb	r5, r4, #32
 8000bf0:	fa00 f304 	lsl.w	r3, r0, r4
 8000bf4:	fa20 f005 	lsr.w	r0, r0, r5
 8000bf8:	fa01 f204 	lsl.w	r2, r1, r4
 8000bfc:	ea40 0002 	orr.w	r0, r0, r2
 8000c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c08:	f141 0100 	adc.w	r1, r1, #0
 8000c0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
 8000c18:	f1c4 0520 	rsb	r5, r4, #32
 8000c1c:	fa00 f205 	lsl.w	r2, r0, r5
 8000c20:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c24:	fa20 f304 	lsr.w	r3, r0, r4
 8000c28:	fa01 f205 	lsl.w	r2, r1, r5
 8000c2c:	ea43 0302 	orr.w	r3, r3, r2
 8000c30:	fa21 f004 	lsr.w	r0, r1, r4
 8000c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c38:	fa21 f204 	lsr.w	r2, r1, r4
 8000c3c:	ea20 0002 	bic.w	r0, r0, r2
 8000c40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	f094 0f00 	teq	r4, #0
 8000c54:	d10f      	bne.n	8000c76 <__aeabi_dmul+0x1c2>
 8000c56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c5a:	0040      	lsls	r0, r0, #1
 8000c5c:	eb41 0101 	adc.w	r1, r1, r1
 8000c60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c64:	bf08      	it	eq
 8000c66:	3c01      	subeq	r4, #1
 8000c68:	d0f7      	beq.n	8000c5a <__aeabi_dmul+0x1a6>
 8000c6a:	ea41 0106 	orr.w	r1, r1, r6
 8000c6e:	f095 0f00 	teq	r5, #0
 8000c72:	bf18      	it	ne
 8000c74:	4770      	bxne	lr
 8000c76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	eb43 0303 	adc.w	r3, r3, r3
 8000c80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c84:	bf08      	it	eq
 8000c86:	3d01      	subeq	r5, #1
 8000c88:	d0f7      	beq.n	8000c7a <__aeabi_dmul+0x1c6>
 8000c8a:	ea43 0306 	orr.w	r3, r3, r6
 8000c8e:	4770      	bx	lr
 8000c90:	ea94 0f0c 	teq	r4, ip
 8000c94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c98:	bf18      	it	ne
 8000c9a:	ea95 0f0c 	teqne	r5, ip
 8000c9e:	d00c      	beq.n	8000cba <__aeabi_dmul+0x206>
 8000ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ca4:	bf18      	it	ne
 8000ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000caa:	d1d1      	bne.n	8000c50 <__aeabi_dmul+0x19c>
 8000cac:	ea81 0103 	eor.w	r1, r1, r3
 8000cb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cbe:	bf06      	itte	eq
 8000cc0:	4610      	moveq	r0, r2
 8000cc2:	4619      	moveq	r1, r3
 8000cc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cc8:	d019      	beq.n	8000cfe <__aeabi_dmul+0x24a>
 8000cca:	ea94 0f0c 	teq	r4, ip
 8000cce:	d102      	bne.n	8000cd6 <__aeabi_dmul+0x222>
 8000cd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cd4:	d113      	bne.n	8000cfe <__aeabi_dmul+0x24a>
 8000cd6:	ea95 0f0c 	teq	r5, ip
 8000cda:	d105      	bne.n	8000ce8 <__aeabi_dmul+0x234>
 8000cdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ce0:	bf1c      	itt	ne
 8000ce2:	4610      	movne	r0, r2
 8000ce4:	4619      	movne	r1, r3
 8000ce6:	d10a      	bne.n	8000cfe <__aeabi_dmul+0x24a>
 8000ce8:	ea81 0103 	eor.w	r1, r1, r3
 8000cec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	bd70      	pop	{r4, r5, r6, pc}
 8000cfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000d06:	bd70      	pop	{r4, r5, r6, pc}

08000d08 <__aeabi_ddiv>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000d12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000d16:	bf1d      	ittte	ne
 8000d18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000d1c:	ea94 0f0c 	teqne	r4, ip
 8000d20:	ea95 0f0c 	teqne	r5, ip
 8000d24:	f000 f8a7 	bleq	8000e76 <__aeabi_ddiv+0x16e>
 8000d28:	eba4 0405 	sub.w	r4, r4, r5
 8000d2c:	ea81 0e03 	eor.w	lr, r1, r3
 8000d30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d38:	f000 8088 	beq.w	8000e4c <__aeabi_ddiv+0x144>
 8000d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000d44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000d48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000d4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000d50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000d54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000d58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000d5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000d60:	429d      	cmp	r5, r3
 8000d62:	bf08      	it	eq
 8000d64:	4296      	cmpeq	r6, r2
 8000d66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000d6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000d6e:	d202      	bcs.n	8000d76 <__aeabi_ddiv+0x6e>
 8000d70:	085b      	lsrs	r3, r3, #1
 8000d72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	eb65 0503 	sbc.w	r5, r5, r3
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000d8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d92:	bf22      	ittt	cs
 8000d94:	1ab6      	subcs	r6, r6, r2
 8000d96:	4675      	movcs	r5, lr
 8000d98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d9c:	085b      	lsrs	r3, r3, #1
 8000d9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000da2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000da6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000daa:	bf22      	ittt	cs
 8000dac:	1ab6      	subcs	r6, r6, r2
 8000dae:	4675      	movcs	r5, lr
 8000db0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dba:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dc2:	bf22      	ittt	cs
 8000dc4:	1ab6      	subcs	r6, r6, r2
 8000dc6:	4675      	movcs	r5, lr
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dda:	bf22      	ittt	cs
 8000ddc:	1ab6      	subcs	r6, r6, r2
 8000dde:	4675      	movcs	r5, lr
 8000de0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000de4:	ea55 0e06 	orrs.w	lr, r5, r6
 8000de8:	d018      	beq.n	8000e1c <__aeabi_ddiv+0x114>
 8000dea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000dee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000df2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000df6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000dfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000dfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000e02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000e06:	d1c0      	bne.n	8000d8a <__aeabi_ddiv+0x82>
 8000e08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e0c:	d10b      	bne.n	8000e26 <__aeabi_ddiv+0x11e>
 8000e0e:	ea41 0100 	orr.w	r1, r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000e1a:	e7b6      	b.n	8000d8a <__aeabi_ddiv+0x82>
 8000e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e20:	bf04      	itt	eq
 8000e22:	4301      	orreq	r1, r0
 8000e24:	2000      	moveq	r0, #0
 8000e26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000e2a:	bf88      	it	hi
 8000e2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000e30:	f63f aeaf 	bhi.w	8000b92 <__aeabi_dmul+0xde>
 8000e34:	ebb5 0c03 	subs.w	ip, r5, r3
 8000e38:	bf04      	itt	eq
 8000e3a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000e3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e42:	f150 0000 	adcs.w	r0, r0, #0
 8000e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000e50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000e54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000e58:	bfc2      	ittt	gt
 8000e5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000e5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000e62:	bd70      	popgt	{r4, r5, r6, pc}
 8000e64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e68:	f04f 0e00 	mov.w	lr, #0
 8000e6c:	3c01      	subs	r4, #1
 8000e6e:	e690      	b.n	8000b92 <__aeabi_dmul+0xde>
 8000e70:	ea45 0e06 	orr.w	lr, r5, r6
 8000e74:	e68d      	b.n	8000b92 <__aeabi_dmul+0xde>
 8000e76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e7a:	ea94 0f0c 	teq	r4, ip
 8000e7e:	bf08      	it	eq
 8000e80:	ea95 0f0c 	teqeq	r5, ip
 8000e84:	f43f af3b 	beq.w	8000cfe <__aeabi_dmul+0x24a>
 8000e88:	ea94 0f0c 	teq	r4, ip
 8000e8c:	d10a      	bne.n	8000ea4 <__aeabi_ddiv+0x19c>
 8000e8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e92:	f47f af34 	bne.w	8000cfe <__aeabi_dmul+0x24a>
 8000e96:	ea95 0f0c 	teq	r5, ip
 8000e9a:	f47f af25 	bne.w	8000ce8 <__aeabi_dmul+0x234>
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	e72c      	b.n	8000cfe <__aeabi_dmul+0x24a>
 8000ea4:	ea95 0f0c 	teq	r5, ip
 8000ea8:	d106      	bne.n	8000eb8 <__aeabi_ddiv+0x1b0>
 8000eaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000eae:	f43f aefd 	beq.w	8000cac <__aeabi_dmul+0x1f8>
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	e722      	b.n	8000cfe <__aeabi_dmul+0x24a>
 8000eb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ebc:	bf18      	it	ne
 8000ebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ec2:	f47f aec5 	bne.w	8000c50 <__aeabi_dmul+0x19c>
 8000ec6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000eca:	f47f af0d 	bne.w	8000ce8 <__aeabi_dmul+0x234>
 8000ece:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ed2:	f47f aeeb 	bne.w	8000cac <__aeabi_dmul+0x1f8>
 8000ed6:	e712      	b.n	8000cfe <__aeabi_dmul+0x24a>

08000ed8 <__gedf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpdf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__ledf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpdf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpdf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000f02:	d01b      	beq.n	8000f3c <__cmpdf2+0x54>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000f0a:	bf0c      	ite	eq
 8000f0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000f10:	ea91 0f03 	teqne	r1, r3
 8000f14:	bf02      	ittt	eq
 8000f16:	ea90 0f02 	teqeq	r0, r2
 8000f1a:	2000      	moveq	r0, #0
 8000f1c:	4770      	bxeq	lr
 8000f1e:	f110 0f00 	cmn.w	r0, #0
 8000f22:	ea91 0f03 	teq	r1, r3
 8000f26:	bf58      	it	pl
 8000f28:	4299      	cmppl	r1, r3
 8000f2a:	bf08      	it	eq
 8000f2c:	4290      	cmpeq	r0, r2
 8000f2e:	bf2c      	ite	cs
 8000f30:	17d8      	asrcs	r0, r3, #31
 8000f32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000f36:	f040 0001 	orr.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f44:	d102      	bne.n	8000f4c <__cmpdf2+0x64>
 8000f46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f4a:	d107      	bne.n	8000f5c <__cmpdf2+0x74>
 8000f4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f54:	d1d6      	bne.n	8000f04 <__cmpdf2+0x1c>
 8000f56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f5a:	d0d3      	beq.n	8000f04 <__cmpdf2+0x1c>
 8000f5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__aeabi_cdrcmple>:
 8000f64:	4684      	mov	ip, r0
 8000f66:	4610      	mov	r0, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	468c      	mov	ip, r1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4663      	mov	r3, ip
 8000f70:	e000      	b.n	8000f74 <__aeabi_cdcmpeq>
 8000f72:	bf00      	nop

08000f74 <__aeabi_cdcmpeq>:
 8000f74:	b501      	push	{r0, lr}
 8000f76:	f7ff ffb7 	bl	8000ee8 <__cmpdf2>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	bf48      	it	mi
 8000f7e:	f110 0f00 	cmnmi.w	r0, #0
 8000f82:	bd01      	pop	{r0, pc}

08000f84 <__aeabi_dcmpeq>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff fff4 	bl	8000f74 <__aeabi_cdcmpeq>
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2001      	moveq	r0, #1
 8000f90:	2000      	movne	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_dcmplt>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffea 	bl	8000f74 <__aeabi_cdcmpeq>
 8000fa0:	bf34      	ite	cc
 8000fa2:	2001      	movcc	r0, #1
 8000fa4:	2000      	movcs	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_dcmple>:
 8000fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb0:	f7ff ffe0 	bl	8000f74 <__aeabi_cdcmpeq>
 8000fb4:	bf94      	ite	ls
 8000fb6:	2001      	movls	r0, #1
 8000fb8:	2000      	movhi	r0, #0
 8000fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_dcmpge>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff ffce 	bl	8000f64 <__aeabi_cdrcmple>
 8000fc8:	bf94      	ite	ls
 8000fca:	2001      	movls	r0, #1
 8000fcc:	2000      	movhi	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_dcmpgt>:
 8000fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd8:	f7ff ffc4 	bl	8000f64 <__aeabi_cdrcmple>
 8000fdc:	bf34      	ite	cc
 8000fde:	2001      	movcc	r0, #1
 8000fe0:	2000      	movcs	r0, #0
 8000fe2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_dcmpun>:
 8000fe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ff0:	d102      	bne.n	8000ff8 <__aeabi_dcmpun+0x10>
 8000ff2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ff6:	d10a      	bne.n	800100e <__aeabi_dcmpun+0x26>
 8000ff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001000:	d102      	bne.n	8001008 <__aeabi_dcmpun+0x20>
 8001002:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001006:	d102      	bne.n	800100e <__aeabi_dcmpun+0x26>
 8001008:	f04f 0000 	mov.w	r0, #0
 800100c:	4770      	bx	lr
 800100e:	f04f 0001 	mov.w	r0, #1
 8001012:	4770      	bx	lr

08001014 <__aeabi_d2iz>:
 8001014:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800101c:	d215      	bcs.n	800104a <__aeabi_d2iz+0x36>
 800101e:	d511      	bpl.n	8001044 <__aeabi_d2iz+0x30>
 8001020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001028:	d912      	bls.n	8001050 <__aeabi_d2iz+0x3c>
 800102a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800102e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001036:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800103a:	fa23 f002 	lsr.w	r0, r3, r2
 800103e:	bf18      	it	ne
 8001040:	4240      	negne	r0, r0
 8001042:	4770      	bx	lr
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	4770      	bx	lr
 800104a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800104e:	d105      	bne.n	800105c <__aeabi_d2iz+0x48>
 8001050:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001054:	bf08      	it	eq
 8001056:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2uiz>:
 8001064:	004a      	lsls	r2, r1, #1
 8001066:	d211      	bcs.n	800108c <__aeabi_d2uiz+0x28>
 8001068:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800106c:	d211      	bcs.n	8001092 <__aeabi_d2uiz+0x2e>
 800106e:	d50d      	bpl.n	800108c <__aeabi_d2uiz+0x28>
 8001070:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001074:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001078:	d40e      	bmi.n	8001098 <__aeabi_d2uiz+0x34>
 800107a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800107e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001082:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001086:	fa23 f002 	lsr.w	r0, r3, r2
 800108a:	4770      	bx	lr
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	4770      	bx	lr
 8001092:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001096:	d102      	bne.n	800109e <__aeabi_d2uiz+0x3a>
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr

080010a4 <__aeabi_d2f>:
 80010a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80010a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80010ac:	bf24      	itt	cs
 80010ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80010b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_d2f+0x30>
 80010b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80010c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80010c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80010c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80010cc:	bf08      	it	eq
 80010ce:	f020 0001 	biceq.w	r0, r0, #1
 80010d2:	4770      	bx	lr
 80010d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80010d8:	d121      	bne.n	800111e <__aeabi_d2f+0x7a>
 80010da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80010de:	bfbc      	itt	lt
 80010e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80010e4:	4770      	bxlt	lr
 80010e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80010ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80010ee:	f1c2 0218 	rsb	r2, r2, #24
 80010f2:	f1c2 0c20 	rsb	ip, r2, #32
 80010f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80010fa:	fa20 f002 	lsr.w	r0, r0, r2
 80010fe:	bf18      	it	ne
 8001100:	f040 0001 	orrne.w	r0, r0, #1
 8001104:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001108:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800110c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001110:	ea40 000c 	orr.w	r0, r0, ip
 8001114:	fa23 f302 	lsr.w	r3, r3, r2
 8001118:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800111c:	e7cc      	b.n	80010b8 <__aeabi_d2f+0x14>
 800111e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001122:	d107      	bne.n	8001134 <__aeabi_d2f+0x90>
 8001124:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001128:	bf1e      	ittt	ne
 800112a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800112e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001132:	4770      	bxne	lr
 8001134:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8001138:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800113c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <__aeabi_frsub>:
 8001144:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8001148:	e002      	b.n	8001150 <__addsf3>
 800114a:	bf00      	nop

0800114c <__aeabi_fsub>:
 800114c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08001150 <__addsf3>:
 8001150:	0042      	lsls	r2, r0, #1
 8001152:	bf1f      	itttt	ne
 8001154:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8001158:	ea92 0f03 	teqne	r2, r3
 800115c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8001160:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001164:	d06a      	beq.n	800123c <__addsf3+0xec>
 8001166:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800116a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800116e:	bfc1      	itttt	gt
 8001170:	18d2      	addgt	r2, r2, r3
 8001172:	4041      	eorgt	r1, r0
 8001174:	4048      	eorgt	r0, r1
 8001176:	4041      	eorgt	r1, r0
 8001178:	bfb8      	it	lt
 800117a:	425b      	neglt	r3, r3
 800117c:	2b19      	cmp	r3, #25
 800117e:	bf88      	it	hi
 8001180:	4770      	bxhi	lr
 8001182:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001186:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800118a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800118e:	bf18      	it	ne
 8001190:	4240      	negne	r0, r0
 8001192:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001196:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800119a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800119e:	bf18      	it	ne
 80011a0:	4249      	negne	r1, r1
 80011a2:	ea92 0f03 	teq	r2, r3
 80011a6:	d03f      	beq.n	8001228 <__addsf3+0xd8>
 80011a8:	f1a2 0201 	sub.w	r2, r2, #1
 80011ac:	fa41 fc03 	asr.w	ip, r1, r3
 80011b0:	eb10 000c 	adds.w	r0, r0, ip
 80011b4:	f1c3 0320 	rsb	r3, r3, #32
 80011b8:	fa01 f103 	lsl.w	r1, r1, r3
 80011bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80011c0:	d502      	bpl.n	80011c8 <__addsf3+0x78>
 80011c2:	4249      	negs	r1, r1
 80011c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80011c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80011cc:	d313      	bcc.n	80011f6 <__addsf3+0xa6>
 80011ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011d2:	d306      	bcc.n	80011e2 <__addsf3+0x92>
 80011d4:	0840      	lsrs	r0, r0, #1
 80011d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80011da:	f102 0201 	add.w	r2, r2, #1
 80011de:	2afe      	cmp	r2, #254	; 0xfe
 80011e0:	d251      	bcs.n	8001286 <__addsf3+0x136>
 80011e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80011e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011ea:	bf08      	it	eq
 80011ec:	f020 0001 	biceq.w	r0, r0, #1
 80011f0:	ea40 0003 	orr.w	r0, r0, r3
 80011f4:	4770      	bx	lr
 80011f6:	0049      	lsls	r1, r1, #1
 80011f8:	eb40 0000 	adc.w	r0, r0, r0
 80011fc:	3a01      	subs	r2, #1
 80011fe:	bf28      	it	cs
 8001200:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8001204:	d2ed      	bcs.n	80011e2 <__addsf3+0x92>
 8001206:	fab0 fc80 	clz	ip, r0
 800120a:	f1ac 0c08 	sub.w	ip, ip, #8
 800120e:	ebb2 020c 	subs.w	r2, r2, ip
 8001212:	fa00 f00c 	lsl.w	r0, r0, ip
 8001216:	bfaa      	itet	ge
 8001218:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800121c:	4252      	neglt	r2, r2
 800121e:	4318      	orrge	r0, r3
 8001220:	bfbc      	itt	lt
 8001222:	40d0      	lsrlt	r0, r2
 8001224:	4318      	orrlt	r0, r3
 8001226:	4770      	bx	lr
 8001228:	f092 0f00 	teq	r2, #0
 800122c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8001230:	bf06      	itte	eq
 8001232:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8001236:	3201      	addeq	r2, #1
 8001238:	3b01      	subne	r3, #1
 800123a:	e7b5      	b.n	80011a8 <__addsf3+0x58>
 800123c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001240:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001244:	bf18      	it	ne
 8001246:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800124a:	d021      	beq.n	8001290 <__addsf3+0x140>
 800124c:	ea92 0f03 	teq	r2, r3
 8001250:	d004      	beq.n	800125c <__addsf3+0x10c>
 8001252:	f092 0f00 	teq	r2, #0
 8001256:	bf08      	it	eq
 8001258:	4608      	moveq	r0, r1
 800125a:	4770      	bx	lr
 800125c:	ea90 0f01 	teq	r0, r1
 8001260:	bf1c      	itt	ne
 8001262:	2000      	movne	r0, #0
 8001264:	4770      	bxne	lr
 8001266:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800126a:	d104      	bne.n	8001276 <__addsf3+0x126>
 800126c:	0040      	lsls	r0, r0, #1
 800126e:	bf28      	it	cs
 8001270:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001274:	4770      	bx	lr
 8001276:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800127a:	bf3c      	itt	cc
 800127c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8001280:	4770      	bxcc	lr
 8001282:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001286:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800128a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800128e:	4770      	bx	lr
 8001290:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001294:	bf16      	itet	ne
 8001296:	4608      	movne	r0, r1
 8001298:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800129c:	4601      	movne	r1, r0
 800129e:	0242      	lsls	r2, r0, #9
 80012a0:	bf06      	itte	eq
 80012a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80012a6:	ea90 0f01 	teqeq	r0, r1
 80012aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80012ae:	4770      	bx	lr

080012b0 <__aeabi_ui2f>:
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e004      	b.n	80012c0 <__aeabi_i2f+0x8>
 80012b6:	bf00      	nop

080012b8 <__aeabi_i2f>:
 80012b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80012bc:	bf48      	it	mi
 80012be:	4240      	negmi	r0, r0
 80012c0:	ea5f 0c00 	movs.w	ip, r0
 80012c4:	bf08      	it	eq
 80012c6:	4770      	bxeq	lr
 80012c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80012cc:	4601      	mov	r1, r0
 80012ce:	f04f 0000 	mov.w	r0, #0
 80012d2:	e01c      	b.n	800130e <__aeabi_l2f+0x2a>

080012d4 <__aeabi_ul2f>:
 80012d4:	ea50 0201 	orrs.w	r2, r0, r1
 80012d8:	bf08      	it	eq
 80012da:	4770      	bxeq	lr
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e00a      	b.n	80012f8 <__aeabi_l2f+0x14>
 80012e2:	bf00      	nop

080012e4 <__aeabi_l2f>:
 80012e4:	ea50 0201 	orrs.w	r2, r0, r1
 80012e8:	bf08      	it	eq
 80012ea:	4770      	bxeq	lr
 80012ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80012f0:	d502      	bpl.n	80012f8 <__aeabi_l2f+0x14>
 80012f2:	4240      	negs	r0, r0
 80012f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012f8:	ea5f 0c01 	movs.w	ip, r1
 80012fc:	bf02      	ittt	eq
 80012fe:	4684      	moveq	ip, r0
 8001300:	4601      	moveq	r1, r0
 8001302:	2000      	moveq	r0, #0
 8001304:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001308:	bf08      	it	eq
 800130a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800130e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8001312:	fabc f28c 	clz	r2, ip
 8001316:	3a08      	subs	r2, #8
 8001318:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800131c:	db10      	blt.n	8001340 <__aeabi_l2f+0x5c>
 800131e:	fa01 fc02 	lsl.w	ip, r1, r2
 8001322:	4463      	add	r3, ip
 8001324:	fa00 fc02 	lsl.w	ip, r0, r2
 8001328:	f1c2 0220 	rsb	r2, r2, #32
 800132c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001330:	fa20 f202 	lsr.w	r2, r0, r2
 8001334:	eb43 0002 	adc.w	r0, r3, r2
 8001338:	bf08      	it	eq
 800133a:	f020 0001 	biceq.w	r0, r0, #1
 800133e:	4770      	bx	lr
 8001340:	f102 0220 	add.w	r2, r2, #32
 8001344:	fa01 fc02 	lsl.w	ip, r1, r2
 8001348:	f1c2 0220 	rsb	r2, r2, #32
 800134c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8001350:	fa21 f202 	lsr.w	r2, r1, r2
 8001354:	eb43 0002 	adc.w	r0, r3, r2
 8001358:	bf08      	it	eq
 800135a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800135e:	4770      	bx	lr

08001360 <__aeabi_fmul>:
 8001360:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001364:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001368:	bf1e      	ittt	ne
 800136a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800136e:	ea92 0f0c 	teqne	r2, ip
 8001372:	ea93 0f0c 	teqne	r3, ip
 8001376:	d06f      	beq.n	8001458 <__aeabi_fmul+0xf8>
 8001378:	441a      	add	r2, r3
 800137a:	ea80 0c01 	eor.w	ip, r0, r1
 800137e:	0240      	lsls	r0, r0, #9
 8001380:	bf18      	it	ne
 8001382:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8001386:	d01e      	beq.n	80013c6 <__aeabi_fmul+0x66>
 8001388:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800138c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001390:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001394:	fba0 3101 	umull	r3, r1, r0, r1
 8001398:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800139c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80013a0:	bf3e      	ittt	cc
 80013a2:	0049      	lslcc	r1, r1, #1
 80013a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80013a8:	005b      	lslcc	r3, r3, #1
 80013aa:	ea40 0001 	orr.w	r0, r0, r1
 80013ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80013b2:	2afd      	cmp	r2, #253	; 0xfd
 80013b4:	d81d      	bhi.n	80013f2 <__aeabi_fmul+0x92>
 80013b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80013be:	bf08      	it	eq
 80013c0:	f020 0001 	biceq.w	r0, r0, #1
 80013c4:	4770      	bx	lr
 80013c6:	f090 0f00 	teq	r0, #0
 80013ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80013ce:	bf08      	it	eq
 80013d0:	0249      	lsleq	r1, r1, #9
 80013d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80013d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80013da:	3a7f      	subs	r2, #127	; 0x7f
 80013dc:	bfc2      	ittt	gt
 80013de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80013e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80013e6:	4770      	bxgt	lr
 80013e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	3a01      	subs	r2, #1
 80013f2:	dc5d      	bgt.n	80014b0 <__aeabi_fmul+0x150>
 80013f4:	f112 0f19 	cmn.w	r2, #25
 80013f8:	bfdc      	itt	le
 80013fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80013fe:	4770      	bxle	lr
 8001400:	f1c2 0200 	rsb	r2, r2, #0
 8001404:	0041      	lsls	r1, r0, #1
 8001406:	fa21 f102 	lsr.w	r1, r1, r2
 800140a:	f1c2 0220 	rsb	r2, r2, #32
 800140e:	fa00 fc02 	lsl.w	ip, r0, r2
 8001412:	ea5f 0031 	movs.w	r0, r1, rrx
 8001416:	f140 0000 	adc.w	r0, r0, #0
 800141a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800141e:	bf08      	it	eq
 8001420:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001424:	4770      	bx	lr
 8001426:	f092 0f00 	teq	r2, #0
 800142a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800142e:	bf02      	ittt	eq
 8001430:	0040      	lsleq	r0, r0, #1
 8001432:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001436:	3a01      	subeq	r2, #1
 8001438:	d0f9      	beq.n	800142e <__aeabi_fmul+0xce>
 800143a:	ea40 000c 	orr.w	r0, r0, ip
 800143e:	f093 0f00 	teq	r3, #0
 8001442:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001446:	bf02      	ittt	eq
 8001448:	0049      	lsleq	r1, r1, #1
 800144a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800144e:	3b01      	subeq	r3, #1
 8001450:	d0f9      	beq.n	8001446 <__aeabi_fmul+0xe6>
 8001452:	ea41 010c 	orr.w	r1, r1, ip
 8001456:	e78f      	b.n	8001378 <__aeabi_fmul+0x18>
 8001458:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800145c:	ea92 0f0c 	teq	r2, ip
 8001460:	bf18      	it	ne
 8001462:	ea93 0f0c 	teqne	r3, ip
 8001466:	d00a      	beq.n	800147e <__aeabi_fmul+0x11e>
 8001468:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800146c:	bf18      	it	ne
 800146e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001472:	d1d8      	bne.n	8001426 <__aeabi_fmul+0xc6>
 8001474:	ea80 0001 	eor.w	r0, r0, r1
 8001478:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800147c:	4770      	bx	lr
 800147e:	f090 0f00 	teq	r0, #0
 8001482:	bf17      	itett	ne
 8001484:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001488:	4608      	moveq	r0, r1
 800148a:	f091 0f00 	teqne	r1, #0
 800148e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001492:	d014      	beq.n	80014be <__aeabi_fmul+0x15e>
 8001494:	ea92 0f0c 	teq	r2, ip
 8001498:	d101      	bne.n	800149e <__aeabi_fmul+0x13e>
 800149a:	0242      	lsls	r2, r0, #9
 800149c:	d10f      	bne.n	80014be <__aeabi_fmul+0x15e>
 800149e:	ea93 0f0c 	teq	r3, ip
 80014a2:	d103      	bne.n	80014ac <__aeabi_fmul+0x14c>
 80014a4:	024b      	lsls	r3, r1, #9
 80014a6:	bf18      	it	ne
 80014a8:	4608      	movne	r0, r1
 80014aa:	d108      	bne.n	80014be <__aeabi_fmul+0x15e>
 80014ac:	ea80 0001 	eor.w	r0, r0, r1
 80014b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80014b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80014b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80014bc:	4770      	bx	lr
 80014be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80014c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80014c6:	4770      	bx	lr

080014c8 <__aeabi_fdiv>:
 80014c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80014cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80014d0:	bf1e      	ittt	ne
 80014d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80014d6:	ea92 0f0c 	teqne	r2, ip
 80014da:	ea93 0f0c 	teqne	r3, ip
 80014de:	d069      	beq.n	80015b4 <__aeabi_fdiv+0xec>
 80014e0:	eba2 0203 	sub.w	r2, r2, r3
 80014e4:	ea80 0c01 	eor.w	ip, r0, r1
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80014ee:	d037      	beq.n	8001560 <__aeabi_fdiv+0x98>
 80014f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014f4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80014f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80014fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001500:	428b      	cmp	r3, r1
 8001502:	bf38      	it	cc
 8001504:	005b      	lslcc	r3, r3, #1
 8001506:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800150a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800150e:	428b      	cmp	r3, r1
 8001510:	bf24      	itt	cs
 8001512:	1a5b      	subcs	r3, r3, r1
 8001514:	ea40 000c 	orrcs.w	r0, r0, ip
 8001518:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800151c:	bf24      	itt	cs
 800151e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001522:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001526:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800152a:	bf24      	itt	cs
 800152c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001530:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001534:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001538:	bf24      	itt	cs
 800153a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800153e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	bf18      	it	ne
 8001546:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800154a:	d1e0      	bne.n	800150e <__aeabi_fdiv+0x46>
 800154c:	2afd      	cmp	r2, #253	; 0xfd
 800154e:	f63f af50 	bhi.w	80013f2 <__aeabi_fmul+0x92>
 8001552:	428b      	cmp	r3, r1
 8001554:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001558:	bf08      	it	eq
 800155a:	f020 0001 	biceq.w	r0, r0, #1
 800155e:	4770      	bx	lr
 8001560:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001564:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001568:	327f      	adds	r2, #127	; 0x7f
 800156a:	bfc2      	ittt	gt
 800156c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001570:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001574:	4770      	bxgt	lr
 8001576:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	3a01      	subs	r2, #1
 8001580:	e737      	b.n	80013f2 <__aeabi_fmul+0x92>
 8001582:	f092 0f00 	teq	r2, #0
 8001586:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800158a:	bf02      	ittt	eq
 800158c:	0040      	lsleq	r0, r0, #1
 800158e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001592:	3a01      	subeq	r2, #1
 8001594:	d0f9      	beq.n	800158a <__aeabi_fdiv+0xc2>
 8001596:	ea40 000c 	orr.w	r0, r0, ip
 800159a:	f093 0f00 	teq	r3, #0
 800159e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80015a2:	bf02      	ittt	eq
 80015a4:	0049      	lsleq	r1, r1, #1
 80015a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80015aa:	3b01      	subeq	r3, #1
 80015ac:	d0f9      	beq.n	80015a2 <__aeabi_fdiv+0xda>
 80015ae:	ea41 010c 	orr.w	r1, r1, ip
 80015b2:	e795      	b.n	80014e0 <__aeabi_fdiv+0x18>
 80015b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80015b8:	ea92 0f0c 	teq	r2, ip
 80015bc:	d108      	bne.n	80015d0 <__aeabi_fdiv+0x108>
 80015be:	0242      	lsls	r2, r0, #9
 80015c0:	f47f af7d 	bne.w	80014be <__aeabi_fmul+0x15e>
 80015c4:	ea93 0f0c 	teq	r3, ip
 80015c8:	f47f af70 	bne.w	80014ac <__aeabi_fmul+0x14c>
 80015cc:	4608      	mov	r0, r1
 80015ce:	e776      	b.n	80014be <__aeabi_fmul+0x15e>
 80015d0:	ea93 0f0c 	teq	r3, ip
 80015d4:	d104      	bne.n	80015e0 <__aeabi_fdiv+0x118>
 80015d6:	024b      	lsls	r3, r1, #9
 80015d8:	f43f af4c 	beq.w	8001474 <__aeabi_fmul+0x114>
 80015dc:	4608      	mov	r0, r1
 80015de:	e76e      	b.n	80014be <__aeabi_fmul+0x15e>
 80015e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80015e4:	bf18      	it	ne
 80015e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80015ea:	d1ca      	bne.n	8001582 <__aeabi_fdiv+0xba>
 80015ec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80015f0:	f47f af5c 	bne.w	80014ac <__aeabi_fmul+0x14c>
 80015f4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80015f8:	f47f af3c 	bne.w	8001474 <__aeabi_fmul+0x114>
 80015fc:	e75f      	b.n	80014be <__aeabi_fmul+0x15e>
 80015fe:	bf00      	nop

08001600 <__gesf2>:
 8001600:	f04f 3cff 	mov.w	ip, #4294967295
 8001604:	e006      	b.n	8001614 <__cmpsf2+0x4>
 8001606:	bf00      	nop

08001608 <__lesf2>:
 8001608:	f04f 0c01 	mov.w	ip, #1
 800160c:	e002      	b.n	8001614 <__cmpsf2+0x4>
 800160e:	bf00      	nop

08001610 <__cmpsf2>:
 8001610:	f04f 0c01 	mov.w	ip, #1
 8001614:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800161c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001620:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001624:	bf18      	it	ne
 8001626:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800162a:	d011      	beq.n	8001650 <__cmpsf2+0x40>
 800162c:	b001      	add	sp, #4
 800162e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001632:	bf18      	it	ne
 8001634:	ea90 0f01 	teqne	r0, r1
 8001638:	bf58      	it	pl
 800163a:	ebb2 0003 	subspl.w	r0, r2, r3
 800163e:	bf88      	it	hi
 8001640:	17c8      	asrhi	r0, r1, #31
 8001642:	bf38      	it	cc
 8001644:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001648:	bf18      	it	ne
 800164a:	f040 0001 	orrne.w	r0, r0, #1
 800164e:	4770      	bx	lr
 8001650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001654:	d102      	bne.n	800165c <__cmpsf2+0x4c>
 8001656:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800165a:	d105      	bne.n	8001668 <__cmpsf2+0x58>
 800165c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001660:	d1e4      	bne.n	800162c <__cmpsf2+0x1c>
 8001662:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001666:	d0e1      	beq.n	800162c <__cmpsf2+0x1c>
 8001668:	f85d 0b04 	ldr.w	r0, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <__aeabi_cfrcmple>:
 8001670:	4684      	mov	ip, r0
 8001672:	4608      	mov	r0, r1
 8001674:	4661      	mov	r1, ip
 8001676:	e7ff      	b.n	8001678 <__aeabi_cfcmpeq>

08001678 <__aeabi_cfcmpeq>:
 8001678:	b50f      	push	{r0, r1, r2, r3, lr}
 800167a:	f7ff ffc9 	bl	8001610 <__cmpsf2>
 800167e:	2800      	cmp	r0, #0
 8001680:	bf48      	it	mi
 8001682:	f110 0f00 	cmnmi.w	r0, #0
 8001686:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001688 <__aeabi_fcmpeq>:
 8001688:	f84d ed08 	str.w	lr, [sp, #-8]!
 800168c:	f7ff fff4 	bl	8001678 <__aeabi_cfcmpeq>
 8001690:	bf0c      	ite	eq
 8001692:	2001      	moveq	r0, #1
 8001694:	2000      	movne	r0, #0
 8001696:	f85d fb08 	ldr.w	pc, [sp], #8
 800169a:	bf00      	nop

0800169c <__aeabi_fcmplt>:
 800169c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80016a0:	f7ff ffea 	bl	8001678 <__aeabi_cfcmpeq>
 80016a4:	bf34      	ite	cc
 80016a6:	2001      	movcc	r0, #1
 80016a8:	2000      	movcs	r0, #0
 80016aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80016ae:	bf00      	nop

080016b0 <__aeabi_fcmple>:
 80016b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80016b4:	f7ff ffe0 	bl	8001678 <__aeabi_cfcmpeq>
 80016b8:	bf94      	ite	ls
 80016ba:	2001      	movls	r0, #1
 80016bc:	2000      	movhi	r0, #0
 80016be:	f85d fb08 	ldr.w	pc, [sp], #8
 80016c2:	bf00      	nop

080016c4 <__aeabi_fcmpge>:
 80016c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80016c8:	f7ff ffd2 	bl	8001670 <__aeabi_cfrcmple>
 80016cc:	bf94      	ite	ls
 80016ce:	2001      	movls	r0, #1
 80016d0:	2000      	movhi	r0, #0
 80016d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80016d6:	bf00      	nop

080016d8 <__aeabi_fcmpgt>:
 80016d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80016dc:	f7ff ffc8 	bl	8001670 <__aeabi_cfrcmple>
 80016e0:	bf34      	ite	cc
 80016e2:	2001      	movcc	r0, #1
 80016e4:	2000      	movcs	r0, #0
 80016e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80016ea:	bf00      	nop

080016ec <__aeabi_fcmpun>:
 80016ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80016f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80016f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80016f8:	d102      	bne.n	8001700 <__aeabi_fcmpun+0x14>
 80016fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80016fe:	d108      	bne.n	8001712 <__aeabi_fcmpun+0x26>
 8001700:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001704:	d102      	bne.n	800170c <__aeabi_fcmpun+0x20>
 8001706:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800170a:	d102      	bne.n	8001712 <__aeabi_fcmpun+0x26>
 800170c:	f04f 0000 	mov.w	r0, #0
 8001710:	4770      	bx	lr
 8001712:	f04f 0001 	mov.w	r0, #1
 8001716:	4770      	bx	lr

08001718 <__aeabi_f2uiz>:
 8001718:	0042      	lsls	r2, r0, #1
 800171a:	d20e      	bcs.n	800173a <__aeabi_f2uiz+0x22>
 800171c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001720:	d30b      	bcc.n	800173a <__aeabi_f2uiz+0x22>
 8001722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800172a:	d409      	bmi.n	8001740 <__aeabi_f2uiz+0x28>
 800172c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001734:	fa23 f002 	lsr.w	r0, r3, r2
 8001738:	4770      	bx	lr
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	4770      	bx	lr
 8001740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001744:	d101      	bne.n	800174a <__aeabi_f2uiz+0x32>
 8001746:	0242      	lsls	r2, r0, #9
 8001748:	d102      	bne.n	8001750 <__aeabi_f2uiz+0x38>
 800174a:	f04f 30ff 	mov.w	r0, #4294967295
 800174e:	4770      	bx	lr
 8001750:	f04f 0000 	mov.w	r0, #0
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800175c:	f3bf 8f4f 	dsb	sy
}
 8001760:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <__NVIC_SystemReset+0x24>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800176a:	4904      	ldr	r1, [pc, #16]	; (800177c <__NVIC_SystemReset+0x24>)
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_SystemReset+0x28>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001772:	f3bf 8f4f 	dsb	sy
}
 8001776:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <__NVIC_SystemReset+0x20>
 800177c:	e000ed00 	.word	0xe000ed00
 8001780:	05fa0004 	.word	0x05fa0004

08001784 <MPU6050_Init>:
osMutexId myMutex01Handle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void MPU6050_Init (void)//(MPU6050_t *imu1)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b092      	sub	sp, #72	; 0x48
 8001788:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
	char str[50];
	uint8_t stat;

	HAL_Delay(50);
 800178a:	2032      	movs	r0, #50	; 0x32
 800178c:	f001 fa0e 	bl	8002bac <HAL_Delay>
	// check device ID WHO_AM_I

	stat=HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2301      	movs	r3, #1
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	2275      	movs	r2, #117	; 0x75
 80017a4:	21d0      	movs	r1, #208	; 0xd0
 80017a6:	4836      	ldr	r0, [pc, #216]	; (8001880 <MPU6050_Init+0xfc>)
 80017a8:	f001 ffc4 	bl	8003734 <HAL_I2C_Mem_Read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat != HAL_OK)
 80017b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MPU6050_Init+0x3a>
	{
		NVIC_SystemReset();
 80017ba:	f7ff ffcd 	bl	8001758 <__NVIC_SystemReset>
	}


	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 80017be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80017c2:	2b68      	cmp	r3, #104	; 0x68
 80017c4:	d144      	bne.n	8001850 <MPU6050_Init+0xcc>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80017cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	226b      	movs	r2, #107	; 0x6b
 80017e0:	21d0      	movs	r1, #208	; 0xd0
 80017e2:	4827      	ldr	r0, [pc, #156]	; (8001880 <MPU6050_Init+0xfc>)
 80017e4:	f001 feac 	bl	8003540 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80017e8:	2307      	movs	r3, #7
 80017ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2301      	movs	r3, #1
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	2219      	movs	r2, #25
 8001802:	21d0      	movs	r1, #208	; 0xd0
 8001804:	481e      	ldr	r0, [pc, #120]	; (8001880 <MPU6050_Init+0xfc>)
 8001806:	f001 fe9b 	bl	8003540 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> �??????????????? 2g
		Data = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	221c      	movs	r2, #28
 8001824:	21d0      	movs	r1, #208	; 0xd0
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <MPU6050_Init+0xfc>)
 8001828:	f001 fe8a 	bl	8003540 <HAL_I2C_Mem_Write>

		sprintf(str, "MPU6050 initialized.\r\n");
 800182c:	463b      	mov	r3, r7
 800182e:	4915      	ldr	r1, [pc, #84]	; (8001884 <MPU6050_Init+0x100>)
 8001830:	4618      	mov	r0, r3
 8001832:	f006 ff43 	bl	80086bc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 8001836:	463b      	mov	r3, r7
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe ff76 	bl	800072a <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	4639      	mov	r1, r7
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <MPU6050_Init+0x104>)
 800184a:	f003 fe19 	bl	8005480 <HAL_UART_Transmit>
		sprintf(str, "The sensor is not MPU6050\r\n");
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
		HAL_Delay(10);
	}

}
 800184e:	e013      	b.n	8001878 <MPU6050_Init+0xf4>
		sprintf(str, "The sensor is not MPU6050\r\n");
 8001850:	463b      	mov	r3, r7
 8001852:	490e      	ldr	r1, [pc, #56]	; (800188c <MPU6050_Init+0x108>)
 8001854:	4618      	mov	r0, r3
 8001856:	f006 ff31 	bl	80086bc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 800185a:	463b      	mov	r3, r7
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ff64 	bl	800072a <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	4639      	mov	r1, r7
 8001868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <MPU6050_Init+0x104>)
 800186e:	f003 fe07 	bl	8005480 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001872:	200a      	movs	r0, #10
 8001874:	f001 f99a 	bl	8002bac <HAL_Delay>
}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000ec4 	.word	0x20000ec4
 8001884:	0800ac38 	.word	0x0800ac38
 8001888:	2000136c 	.word	0x2000136c
 800188c:	0800ac50 	.word	0x0800ac50

08001890 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (MPU6050_t *imu1)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af04      	add	r7, sp, #16
 8001896:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	uint8_t stat;

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	stat=HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2306      	movs	r3, #6
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	223b      	movs	r2, #59	; 0x3b
 80018ac:	21d0      	movs	r1, #208	; 0xd0
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <MPU6050_Read_Accel+0x70>)
 80018b0:	f001 ff40 	bl	8003734 <HAL_I2C_Mem_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]

	if (stat != HAL_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MPU6050_Read_Accel+0x32>
	{
		NVIC_SystemReset();
 80018be:	f7ff ff4b 	bl	8001758 <__NVIC_SystemReset>
	}

	imu1->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80018c2:	7a3b      	ldrb	r3, [r7, #8]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	7a7b      	ldrb	r3, [r7, #9]
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	801a      	strh	r2, [r3, #0]
	imu1->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	805a      	strh	r2, [r3, #2]
	imu1->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80018e6:	7b3b      	ldrb	r3, [r7, #12]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	809a      	strh	r2, [r3, #4]
	     for more details check ACCEL_CONFIG Register              ****/

//	imu1->Ax = imu1->Accel_X_RAW/16384.0;
//	imu1->Ay = imu1->Accel_Y_RAW/16384.0;
//	imu1->Az = imu1->Accel_Z_RAW/16384.0;
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000ec4 	.word	0x20000ec4

08001904 <PowerMag>:

void PowerMag()
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b091      	sub	sp, #68	; 0x44
 8001908:	af00      	add	r7, sp, #0
	int16_t lX,lY;
	uint16_t i;
	char str[50];
	float mag;
	// the magnitude
	for (i=0; i <NPT/2+1; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800190e:	e030      	b.n	8001972 <PowerMag+0x6e>
	{
		lX= (output[i]<<16)>>16; //real part (LSB)
 8001910:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <PowerMag+0x88>)
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	87bb      	strh	r3, [r7, #60]	; 0x3c
		lY= (output[i]>> 16);	//imaginary part
 800191a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <PowerMag+0x88>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	877b      	strh	r3, [r7, #58]	; 0x3a
		mag = sqrtf(lX*lX+ lY*lY);//magnitude
 8001926:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800192a:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800192e:	fb03 f202 	mul.w	r2, r3, r2
 8001932:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001936:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fcb9 	bl	80012b8 <__aeabi_i2f>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f009 f841 	bl	800a9d0 <sqrtf>
 800194e:	6378      	str	r0, [r7, #52]	; 0x34
		Mag[i]= mag*2;//for alternating component: mag*2
 8001950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001952:	4619      	mov	r1, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fbfb 	bl	8001150 <__addsf3>
 800195a:	4603      	mov	r3, r0
 800195c:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff feda 	bl	8001718 <__aeabi_f2uiz>
 8001964:	4603      	mov	r3, r0
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <PowerMag+0x8c>)
 8001968:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (i=0; i <NPT/2+1; i++)
 800196c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800196e:	3301      	adds	r3, #1
 8001970:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001972:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001974:	2b80      	cmp	r3, #128	; 0x80
 8001976:	d9cb      	bls.n	8001910 <PowerMag+0xc>

	}
	//for zero frequency component: mag=mag*2/2
	Mag[0] = Mag[0]>>1;// /2
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <PowerMag+0x8c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <PowerMag+0x8c>)
 8001980:	6013      	str	r3, [r2, #0]


}
 8001982:	bf00      	nop
 8001984:	3744      	adds	r7, #68	; 0x44
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000204 	.word	0x20000204
 8001990:	20000604 	.word	0x20000604

08001994 <initCircularBuffer>:

void initCircularBuffer(CircularBuffer *cb)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    cb->tail = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    cb->count = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <addToCircularBuffer>:

void addToCircularBuffer(CircularBuffer *cb, uint32_t data)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
    cb->buffer[cb->head] = data;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cb->head = (cb->head + 1) % BUFFER_SIZE; // increase head
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80019dc:	3301      	adds	r3, #1
 80019de:	425a      	negs	r2, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	bf58      	it	pl
 80019e6:	4253      	negpl	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    if (cb->count < BUFFER_SIZE) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	dc07      	bgt.n	8001a08 <addToCircularBuffer+0x4a>
        cb->count++; // buffer not full, add count
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    } else {
        cb->tail = (cb->tail + 1) % BUFFER_SIZE; // buffer is full, cover the oldest element
    }
}
 8001a06:	e00b      	b.n	8001a20 <addToCircularBuffer+0x62>
        cb->tail = (cb->tail + 1) % BUFFER_SIZE; // buffer is full, cover the oldest element
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a0e:	3301      	adds	r3, #1
 8001a10:	425a      	negs	r2, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	bf58      	it	pl
 8001a18:	4253      	negpl	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <readFromCircularBuffer>:

int readFromCircularBuffer(CircularBuffer *cb)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
    int data = cb->buffer[cb->tail];
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	60fb      	str	r3, [r7, #12]
    cb->tail = (cb->tail + 1) % BUFFER_SIZE; // increase tail
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a46:	3301      	adds	r3, #1
 8001a48:	425a      	negs	r2, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	bf58      	it	pl
 8001a50:	4253      	negpl	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    if (cb->count > 0) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dd06      	ble.n	8001a70 <readFromCircularBuffer+0x46>
        cb->count--; // decrease count
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    }
    return data;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <copyCircularBufferToArray>:
    return cb->count;
}


void copyCircularBufferToArray(CircularBuffer *cb, int* array, int size)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
    int originalCount = cb->count; // original number of elements
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a8e:	613b      	str	r3, [r7, #16]
    int i;
    for (i = 0; i < size; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00b      	b.n	8001aae <copyCircularBufferToArray+0x32>
        array[i] = readFromCircularBuffer(cb);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	18d4      	adds	r4, r2, r3
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ffc3 	bl	8001a2a <readFromCircularBuffer>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	6023      	str	r3, [r4, #0]
    for (i = 0; i < size; i++) {
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbef      	blt.n	8001a96 <copyCircularBufferToArray+0x1a>
    }
    cb->count = originalCount; // recover original number of elements
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}

08001ac6 <findMaxIndex>:
        printf("Buffer[%d]: %d\n", i, cb->buffer[index]);
    }
}

int findMaxIndex(int arr[], int size)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
    int maxIndex = 0; // store the index of the max. element
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

    for (int i = 1; i < size; i++) {
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	e010      	b.n	8001afc <findMaxIndex+0x36>
        if (arr[i] > arr[maxIndex]) {
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	440b      	add	r3, r1
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dd01      	ble.n	8001af6 <findMaxIndex+0x30>
            maxIndex = i; // update the index of the max. element
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbea      	blt.n	8001ada <findMaxIndex+0x14>
        }
    }

    return maxIndex;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b090      	sub	sp, #64	; 0x40
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	char str[50];
	sprintf(str, "Task stack overflow detected.%d\r\n");
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	490b      	ldr	r1, [pc, #44]	; (8001b4c <vApplicationStackOverflowHook+0x3c>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f006 fdcb 	bl	80086bc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fdfd 	bl	800072a <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f107 010c 	add.w	r1, r7, #12
 8001b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <vApplicationStackOverflowHook+0x40>)
 8001b3e:	f003 fc9f 	bl	8005480 <HAL_UART_Transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3740      	adds	r7, #64	; 0x40
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	0800ac7c 	.word	0x0800ac7c
 8001b50:	2000136c 	.word	0x2000136c

08001b54 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08e      	sub	sp, #56	; 0x38
 8001b58:	af00      	add	r7, sp, #0
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	char str[50];
	sprintf(str, "MallocFailed\r\n");
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	4909      	ldr	r1, [pc, #36]	; (8001b84 <vApplicationMallocFailedHook+0x30>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f006 fdac 	bl	80086bc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fddf 	bl	800072a <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	1d39      	adds	r1, r7, #4
 8001b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <vApplicationMallocFailedHook+0x34>)
 8001b78:	f003 fc82 	bl	8005480 <HAL_UART_Transmit>
}
 8001b7c:	bf00      	nop
 8001b7e:	3738      	adds	r7, #56	; 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800aca0 	.word	0x0800aca0
 8001b88:	2000136c 	.word	0x2000136c

08001b8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <vApplicationGetIdleTaskMemory+0x28>)
 8001b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000c1c 	.word	0x20000c1c
 8001bb8:	20000c70 	.word	0x20000c70

08001bbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b090      	sub	sp, #64	; 0x40
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8001bca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fe40 	bl	8005854 <osMutexCreate>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <MX_FREERTOS_Init+0x70>)
 8001bd8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FFT_and_Send */
  osThreadDef(FFT_and_Send, FFT_and_Send_Task, osPriorityNormal, 0, 2000);
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_FREERTOS_Init+0x74>)
 8001bdc:	f107 041c 	add.w	r4, r7, #28
 8001be0:	461d      	mov	r5, r3
 8001be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_and_SendHandle = osThreadCreate(osThread(FFT_and_Send), NULL);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fde1 	bl	80057bc <osThreadCreate>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <MX_FREERTOS_Init+0x78>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sample */
  osThreadDef(Sample, Sample_Task, osPriorityNormal, 0, 128);
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_FREERTOS_Init+0x7c>)
 8001c02:	463c      	mov	r4, r7
 8001c04:	461d      	mov	r5, r3
 8001c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SampleHandle = osThreadCreate(osThread(Sample), NULL);
 8001c12:	463b      	mov	r3, r7
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fdd0 	bl	80057bc <osThreadCreate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <MX_FREERTOS_Init+0x80>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c22:	bf00      	nop
 8001c24:	3740      	adds	r7, #64	; 0x40
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000c18 	.word	0x20000c18
 8001c30:	0800acb0 	.word	0x0800acb0
 8001c34:	20000c10 	.word	0x20000c10
 8001c38:	0800accc 	.word	0x0800accc
 8001c3c:	20000c14 	.word	0x20000c14

08001c40 <FFT_and_Send_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FFT_and_Send_Task */
void FFT_and_Send_Task(void const * argument)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b096      	sub	sp, #88	; 0x58
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	  int len;

	  int size;//size of Mag[]
	  int maxIndex;//the index of the max. element in Mag[]

	  int index=1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	653b      	str	r3, [r7, #80]	; 0x50

	  SSD1306_Init();
 8001c4c:	f000 fa9a 	bl	8002184 <SSD1306_Init>
	  SSD1306_GotoXY (0,0);
 8001c50:	2100      	movs	r1, #0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 fbfe 	bl	8002454 <SSD1306_GotoXY>
	  SSD1306_Puts ("Frequency:", &Font_11x18, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4959      	ldr	r1, [pc, #356]	; (8001dc0 <FFT_and_Send_Task+0x180>)
 8001c5c:	4859      	ldr	r0, [pc, #356]	; (8001dc4 <FFT_and_Send_Task+0x184>)
 8001c5e:	f000 fc8f 	bl	8002580 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001c62:	f000 fb53 	bl	800230c <SSD1306_UpdateScreen>

	  TickType_t pxPreviousWakeTime;
	  pxPreviousWakeTime = xTaskGetTickCount();
 8001c66:	f004 fe6d 	bl	8006944 <xTaskGetTickCount>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {


	  if(buffer.count<NPT)//data not enough in the circular buffer
 8001c6e:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <FFT_and_Send_Task+0x188>)
 8001c70:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c74:	2bff      	cmp	r3, #255	; 0xff
 8001c76:	f340 809c 	ble.w	8001db2 <FFT_and_Send_Task+0x172>

	  }
	  else//data enough
	  {

			uint32_t* input = (uint32_t*)calloc(NPT , sizeof(uint32_t));
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c80:	f005 ff64 	bl	8007b4c <calloc>
 8001c84:	4603      	mov	r3, r0
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  //		        printf("Memory allocation failed.\n");
  //		        return 1;
  //		    }


		  xSemaphoreTake(myMutex01Handle,portMAX_DELAY);//take the mutex
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <FFT_and_Send_Task+0x18c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	4618      	mov	r0, r3
 8001c92:	f004 f92f 	bl	8005ef4 <xQueueSemaphoreTake>
		  copyCircularBufferToArray(&buffer, input, BUFFER_SIZE);
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c9c:	484a      	ldr	r0, [pc, #296]	; (8001dc8 <FFT_and_Send_Task+0x188>)
 8001c9e:	f7ff feed 	bl	8001a7c <copyCircularBufferToArray>
		  xSemaphoreGive(myMutex01Handle);//release the mutex
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <FFT_and_Send_Task+0x18c>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	f004 f824 	bl	8005cf8 <xQueueGenericSend>


		  cr4_fft_256_stm32(output, input, NPT);//FFT
 8001cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001cb6:	4846      	ldr	r0, [pc, #280]	; (8001dd0 <FFT_and_Send_Task+0x190>)
 8001cb8:	f7fe fa4a 	bl	8000150 <cr4_fft_256_stm32>
		  free(input);
 8001cbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cbe:	f005 ff7f 	bl	8007bc0 <free>

		  PowerMag();//calculate the magnitude of FFT result
 8001cc2:	f7ff fe1f 	bl	8001904 <PowerMag>

		  size = sizeof(Mag) / sizeof(Mag[0]);
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48

		  //the index of the max. element in Mag[]
		  //the frequency with the max. magnitude
		  maxIndex = findMaxIndex(Mag, size);
 8001cca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ccc:	4841      	ldr	r0, [pc, #260]	; (8001dd4 <FFT_and_Send_Task+0x194>)
 8001cce:	f7ff fefa 	bl	8001ac6 <findMaxIndex>
 8001cd2:	6478      	str	r0, [r7, #68]	; 0x44

		  sprintf(str, "%.2f Hz     ", (float)(maxIndex*Freq_Increment));
 8001cd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cd6:	f7fe fe83 	bl	80009e0 <__aeabi_i2d>
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <FFT_and_Send_Task+0x198>)
 8001ce0:	f7fe fee8 	bl	8000ab4 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7ff f9da 	bl	80010a4 <__aeabi_d2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fe86 	bl	8000a04 <__aeabi_f2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f107 0010 	add.w	r0, r7, #16
 8001d00:	4936      	ldr	r1, [pc, #216]	; (8001ddc <FFT_and_Send_Task+0x19c>)
 8001d02:	f006 fcdb 	bl	80086bc <siprintf>

		  SSD1306_GotoXY (0,30);
 8001d06:	211e      	movs	r1, #30
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 fba3 	bl	8002454 <SSD1306_GotoXY>
		  SSD1306_Puts (str, &Font_11x18, 1);
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	2201      	movs	r2, #1
 8001d14:	492a      	ldr	r1, [pc, #168]	; (8001dc0 <FFT_and_Send_Task+0x180>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fc32 	bl	8002580 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001d1c:	f000 faf6 	bl	800230c <SSD1306_UpdateScreen>

		  //UART send
		  sprintf(str, "Start\r\n");
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	492e      	ldr	r1, [pc, #184]	; (8001de0 <FFT_and_Send_Task+0x1a0>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f006 fcc8 	bl	80086bc <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fcfa 	bl	800072a <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f107 0110 	add.w	r1, r7, #16
 8001d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d42:	4828      	ldr	r0, [pc, #160]	; (8001de4 <FFT_and_Send_Task+0x1a4>)
 8001d44:	f003 fb9c 	bl	8005480 <HAL_UART_Transmit>

		  for(int i=0;i<NPT/2+1;i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001d4c:	e01a      	b.n	8001d84 <FFT_and_Send_Task+0x144>
		  {
			  sprintf(str, "%u\r\n", Mag[i]);
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <FFT_and_Send_Task+0x194>)
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4923      	ldr	r1, [pc, #140]	; (8001de8 <FFT_and_Send_Task+0x1a8>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f006 fcad 	bl	80086bc <siprintf>
			  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fcdf 	bl	800072a <strlen>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f107 0110 	add.w	r1, r7, #16
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	481a      	ldr	r0, [pc, #104]	; (8001de4 <FFT_and_Send_Task+0x1a4>)
 8001d7a:	f003 fb81 	bl	8005480 <HAL_UART_Transmit>
		  for(int i=0;i<NPT/2+1;i++)
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	3301      	adds	r3, #1
 8001d82:	657b      	str	r3, [r7, #84]	; 0x54
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	2b80      	cmp	r3, #128	; 0x80
 8001d88:	dde1      	ble.n	8001d4e <FFT_and_Send_Task+0x10e>
		  }


		  sprintf(str, "End\r\n");
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4917      	ldr	r1, [pc, #92]	; (8001dec <FFT_and_Send_Task+0x1ac>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f006 fc93 	bl	80086bc <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0XFFFF);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fcc5 	bl	800072a <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f107 0110 	add.w	r1, r7, #16
 8001da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <FFT_and_Send_Task+0x1a4>)
 8001dae:	f003 fb67 	bl	8005480 <HAL_UART_Transmit>
//		  if(index<4)index++;
//		  else index=1;

	  }

	  vTaskDelayUntil(&pxPreviousWakeTime, 250);//time interval 250ms
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	21fa      	movs	r1, #250	; 0xfa
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 fc3b 	bl	8006634 <vTaskDelayUntil>
	  if(buffer.count<NPT)//data not enough in the circular buffer
 8001dbe:	e756      	b.n	8001c6e <FFT_and_Send_Task+0x2e>
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	0800ace8 	.word	0x0800ace8
 8001dc8:	20000804 	.word	0x20000804
 8001dcc:	20000c18 	.word	0x20000c18
 8001dd0:	20000204 	.word	0x20000204
 8001dd4:	20000604 	.word	0x20000604
 8001dd8:	3fff4000 	.word	0x3fff4000
 8001ddc:	0800acf4 	.word	0x0800acf4
 8001de0:	0800ad04 	.word	0x0800ad04
 8001de4:	2000136c 	.word	0x2000136c
 8001de8:	0800ad0c 	.word	0x0800ad0c
 8001dec:	0800ad14 	.word	0x0800ad14

08001df0 <Sample_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sample_Task */
void Sample_Task(void const * argument)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sample_Task */
	uint32_t total_acc_16384;//16384 means 1 g

	initCircularBuffer(&buffer);
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <Sample_Task+0xac>)
 8001dfa:	f7ff fdcb 	bl	8001994 <initCircularBuffer>

	MPU6050_t imu1=
 8001dfe:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <Sample_Task+0xb0>)
 8001e00:	f107 040c 	add.w	r4, r7, #12
 8001e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				  .Accel_Z_RAW=0,
				  .Init=MPU6050_Init,
				  .Read_Accel=MPU6050_Read_Accel
		  };

	  imu1.Init(); // must initialized after I2C2
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	4798      	blx	r3


	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 8001e0e:	f004 fd99 	bl	8006944 <xTaskGetTickCount>
 8001e12:	4603      	mov	r3, r0
 8001e14:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  imu1.Read_Accel(&imu1);
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f107 020c 	add.w	r2, r7, #12
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4798      	blx	r3

	  total_acc_16384=sqrt(imu1.Accel_X_RAW*imu1.Accel_X_RAW+\
 8001e20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e24:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e28:	fb03 f202 	mul.w	r2, r3, r2
			  imu1.Accel_Y_RAW*imu1.Accel_Y_RAW+\
 8001e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e30:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
	  total_acc_16384=sqrt(imu1.Accel_X_RAW*imu1.Accel_X_RAW+\
 8001e38:	441a      	add	r2, r3
			  imu1.Accel_Z_RAW*imu1.Accel_Z_RAW);
 8001e3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e3e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
			  imu1.Accel_Y_RAW*imu1.Accel_Y_RAW+\
 8001e46:	4413      	add	r3, r2
	  total_acc_16384=sqrt(imu1.Accel_X_RAW*imu1.Accel_X_RAW+\
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fdc9 	bl	80009e0 <__aeabi_i2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f008 fd97 	bl	800a988 <sqrt>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7ff f8ff 	bl	8001064 <__aeabi_d2uiz>
 8001e66:	4603      	mov	r3, r0
 8001e68:	61fb      	str	r3, [r7, #28]

	  xSemaphoreTake(myMutex01Handle,portMAX_DELAY);//take the mutex
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <Sample_Task+0xb4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f83e 	bl	8005ef4 <xQueueSemaphoreTake>
	  addToCircularBuffer(&buffer, total_acc_16384);
 8001e78:	69f9      	ldr	r1, [r7, #28]
 8001e7a:	4808      	ldr	r0, [pc, #32]	; (8001e9c <Sample_Task+0xac>)
 8001e7c:	f7ff fd9f 	bl	80019be <addToCircularBuffer>
	  xSemaphoreGive(myMutex01Handle);//release the mutex
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <Sample_Task+0xb4>)
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	2300      	movs	r3, #0
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f003 ff35 	bl	8005cf8 <xQueueGenericSend>

	  vTaskDelayUntil(&pxPreviousWakeTime, 2);//time interval 2ms
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2102      	movs	r1, #2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fbcd 	bl	8006634 <vTaskDelayUntil>
	  imu1.Read_Accel(&imu1);
 8001e9a:	e7bc      	b.n	8001e16 <Sample_Task+0x26>
 8001e9c:	20000804 	.word	0x20000804
 8001ea0:	0800ad1c 	.word	0x0800ad1c
 8001ea4:	20000c18 	.word	0x20000c18

08001ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ecc:	f043 0320 	orr.w	r3, r3, #32
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6193      	str	r3, [r2, #24]
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6193      	str	r3, [r2, #24]
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <MX_GPIO_Init+0x70>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]

}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000

08001f1c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f22:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <MX_I2C1_Init+0x54>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MX_I2C1_Init+0x58>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_I2C1_Init+0x50>)
 8001f5a:	f001 f8af 	bl	80030bc <HAL_I2C_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f000 f909 	bl	800217a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000e70 	.word	0x20000e70
 8001f70:	40005400 	.word	0x40005400
 8001f74:	00061a80 	.word	0x00061a80

08001f78 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <MX_I2C2_Init+0x54>)
 8001f80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001f84:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <MX_I2C2_Init+0x58>)
 8001f86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_I2C2_Init+0x50>)
 8001fb6:	f001 f881 	bl	80030bc <HAL_I2C_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fc0:	f000 f8db 	bl	800217a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000ec4 	.word	0x20000ec4
 8001fcc:	40005800 	.word	0x40005800
 8001fd0:	000186a0 	.word	0x000186a0

08001fd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0318 	add.w	r3, r7, #24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2b      	ldr	r2, [pc, #172]	; (800209c <HAL_I2C_MspInit+0xc8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d124      	bne.n	800203e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4619      	mov	r1, r3
 800201e:	4821      	ldr	r0, [pc, #132]	; (80020a4 <HAL_I2C_MspInit+0xd0>)
 8002020:	f000 fec8 	bl	8002db4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 800202a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202e:	61d3      	str	r3, [r2, #28]
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800203c:	e029      	b.n	8002092 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_I2C_MspInit+0xd4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d124      	bne.n	8002092 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002060:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002066:	2312      	movs	r3, #18
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	f107 0318 	add.w	r3, r7, #24
 8002072:	4619      	mov	r1, r3
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <HAL_I2C_MspInit+0xd0>)
 8002076:	f000 fe9d 	bl	8002db4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8002080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_I2C_MspInit+0xcc>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40005400 	.word	0x40005400
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40005800 	.word	0x40005800

080020ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b0:	f000 fd4a 	bl	8002b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b4:	f000 f80d 	bl	80020d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b8:	f7ff fef6 	bl	8001ea8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80020bc:	f7ff ff5c 	bl	8001f78 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80020c0:	f000 fca6 	bl	8002a10 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80020c4:	f7ff ff2a 	bl	8001f1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80020c8:	f7ff fd78 	bl	8001bbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020cc:	f003 fb6f 	bl	80057ae <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <main+0x24>

080020d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b090      	sub	sp, #64	; 0x40
 80020d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	2228      	movs	r2, #40	; 0x28
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f005 fd83 	bl	8007bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002102:	2301      	movs	r3, #1
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002106:	2302      	movs	r3, #2
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800210a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002110:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fad6 	bl	80046cc <HAL_RCC_OscConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002126:	f000 f828 	bl	800217a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212a:	230f      	movs	r3, #15
 800212c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212e:	2302      	movs	r3, #2
 8002130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2102      	movs	r1, #2
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fd43 	bl	8004bd0 <HAL_RCC_ClockConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002150:	f000 f813 	bl	800217a <Error_Handler>
  }
}
 8002154:	bf00      	nop
 8002156:	3740      	adds	r7, #64	; 0x40
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800216e:	f000 fd01 	bl	8002b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800217e:	b672      	cpsid	i
}
 8002180:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002182:	e7fe      	b.n	8002182 <Error_Handler+0x8>

08002184 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800218a:	f000 fa1f 	bl	80025cc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800218e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002192:	2201      	movs	r2, #1
 8002194:	2178      	movs	r1, #120	; 0x78
 8002196:	485b      	ldr	r0, [pc, #364]	; (8002304 <SSD1306_Init+0x180>)
 8002198:	f001 fd34 	bl	8003c04 <HAL_I2C_IsDeviceReady>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e0a9      	b.n	80022fa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80021a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021ac:	e002      	b.n	80021b4 <SSD1306_Init+0x30>
		p--;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f9      	bne.n	80021ae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80021ba:	22ae      	movs	r2, #174	; 0xae
 80021bc:	2100      	movs	r1, #0
 80021be:	2078      	movs	r0, #120	; 0x78
 80021c0:	f000 fa7e 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80021c4:	2220      	movs	r2, #32
 80021c6:	2100      	movs	r1, #0
 80021c8:	2078      	movs	r0, #120	; 0x78
 80021ca:	f000 fa79 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80021ce:	2210      	movs	r2, #16
 80021d0:	2100      	movs	r1, #0
 80021d2:	2078      	movs	r0, #120	; 0x78
 80021d4:	f000 fa74 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021d8:	22b0      	movs	r2, #176	; 0xb0
 80021da:	2100      	movs	r1, #0
 80021dc:	2078      	movs	r0, #120	; 0x78
 80021de:	f000 fa6f 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80021e2:	22c8      	movs	r2, #200	; 0xc8
 80021e4:	2100      	movs	r1, #0
 80021e6:	2078      	movs	r0, #120	; 0x78
 80021e8:	f000 fa6a 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	2078      	movs	r0, #120	; 0x78
 80021f2:	f000 fa65 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80021f6:	2210      	movs	r2, #16
 80021f8:	2100      	movs	r1, #0
 80021fa:	2078      	movs	r0, #120	; 0x78
 80021fc:	f000 fa60 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002200:	2240      	movs	r2, #64	; 0x40
 8002202:	2100      	movs	r1, #0
 8002204:	2078      	movs	r0, #120	; 0x78
 8002206:	f000 fa5b 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800220a:	2281      	movs	r2, #129	; 0x81
 800220c:	2100      	movs	r1, #0
 800220e:	2078      	movs	r0, #120	; 0x78
 8002210:	f000 fa56 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	2100      	movs	r1, #0
 8002218:	2078      	movs	r0, #120	; 0x78
 800221a:	f000 fa51 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800221e:	22a1      	movs	r2, #161	; 0xa1
 8002220:	2100      	movs	r1, #0
 8002222:	2078      	movs	r0, #120	; 0x78
 8002224:	f000 fa4c 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002228:	22a6      	movs	r2, #166	; 0xa6
 800222a:	2100      	movs	r1, #0
 800222c:	2078      	movs	r0, #120	; 0x78
 800222e:	f000 fa47 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002232:	22a8      	movs	r2, #168	; 0xa8
 8002234:	2100      	movs	r1, #0
 8002236:	2078      	movs	r0, #120	; 0x78
 8002238:	f000 fa42 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800223c:	223f      	movs	r2, #63	; 0x3f
 800223e:	2100      	movs	r1, #0
 8002240:	2078      	movs	r0, #120	; 0x78
 8002242:	f000 fa3d 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002246:	22a4      	movs	r2, #164	; 0xa4
 8002248:	2100      	movs	r1, #0
 800224a:	2078      	movs	r0, #120	; 0x78
 800224c:	f000 fa38 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002250:	22d3      	movs	r2, #211	; 0xd3
 8002252:	2100      	movs	r1, #0
 8002254:	2078      	movs	r0, #120	; 0x78
 8002256:	f000 fa33 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2078      	movs	r0, #120	; 0x78
 8002260:	f000 fa2e 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002264:	22d5      	movs	r2, #213	; 0xd5
 8002266:	2100      	movs	r1, #0
 8002268:	2078      	movs	r0, #120	; 0x78
 800226a:	f000 fa29 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800226e:	22f0      	movs	r2, #240	; 0xf0
 8002270:	2100      	movs	r1, #0
 8002272:	2078      	movs	r0, #120	; 0x78
 8002274:	f000 fa24 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002278:	22d9      	movs	r2, #217	; 0xd9
 800227a:	2100      	movs	r1, #0
 800227c:	2078      	movs	r0, #120	; 0x78
 800227e:	f000 fa1f 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002282:	2222      	movs	r2, #34	; 0x22
 8002284:	2100      	movs	r1, #0
 8002286:	2078      	movs	r0, #120	; 0x78
 8002288:	f000 fa1a 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800228c:	22da      	movs	r2, #218	; 0xda
 800228e:	2100      	movs	r1, #0
 8002290:	2078      	movs	r0, #120	; 0x78
 8002292:	f000 fa15 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002296:	2212      	movs	r2, #18
 8002298:	2100      	movs	r1, #0
 800229a:	2078      	movs	r0, #120	; 0x78
 800229c:	f000 fa10 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80022a0:	22db      	movs	r2, #219	; 0xdb
 80022a2:	2100      	movs	r1, #0
 80022a4:	2078      	movs	r0, #120	; 0x78
 80022a6:	f000 fa0b 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80022aa:	2220      	movs	r2, #32
 80022ac:	2100      	movs	r1, #0
 80022ae:	2078      	movs	r0, #120	; 0x78
 80022b0:	f000 fa06 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80022b4:	228d      	movs	r2, #141	; 0x8d
 80022b6:	2100      	movs	r1, #0
 80022b8:	2078      	movs	r0, #120	; 0x78
 80022ba:	f000 fa01 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80022be:	2214      	movs	r2, #20
 80022c0:	2100      	movs	r1, #0
 80022c2:	2078      	movs	r0, #120	; 0x78
 80022c4:	f000 f9fc 	bl	80026c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80022c8:	22af      	movs	r2, #175	; 0xaf
 80022ca:	2100      	movs	r1, #0
 80022cc:	2078      	movs	r0, #120	; 0x78
 80022ce:	f000 f9f7 	bl	80026c0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80022d2:	222e      	movs	r2, #46	; 0x2e
 80022d4:	2100      	movs	r1, #0
 80022d6:	2078      	movs	r0, #120	; 0x78
 80022d8:	f000 f9f2 	bl	80026c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f843 	bl	8002368 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80022e2:	f000 f813 	bl	800230c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <SSD1306_Init+0x184>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SSD1306_Init+0x184>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SSD1306_Init+0x184>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000e70 	.word	0x20000e70
 8002308:	20001318 	.word	0x20001318

0800230c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002312:	2300      	movs	r3, #0
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	e01d      	b.n	8002354 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	3b50      	subs	r3, #80	; 0x50
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	2100      	movs	r1, #0
 8002322:	2078      	movs	r0, #120	; 0x78
 8002324:	f000 f9cc 	bl	80026c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2078      	movs	r0, #120	; 0x78
 800232e:	f000 f9c7 	bl	80026c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002332:	2210      	movs	r2, #16
 8002334:	2100      	movs	r1, #0
 8002336:	2078      	movs	r0, #120	; 0x78
 8002338:	f000 f9c2 	bl	80026c0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	01db      	lsls	r3, r3, #7
 8002340:	4a08      	ldr	r2, [pc, #32]	; (8002364 <SSD1306_UpdateScreen+0x58>)
 8002342:	441a      	add	r2, r3
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	2140      	movs	r1, #64	; 0x40
 8002348:	2078      	movs	r0, #120	; 0x78
 800234a:	f000 f953 	bl	80025f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	3301      	adds	r3, #1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b07      	cmp	r3, #7
 8002358:	d9de      	bls.n	8002318 <SSD1306_UpdateScreen+0xc>
	}
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000f18 	.word	0x20000f18

08002368 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <SSD1306_Fill+0x14>
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <SSD1306_Fill+0x16>
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002382:	4619      	mov	r1, r3
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <SSD1306_Fill+0x2c>)
 8002386:	f005 fc31 	bl	8007bec <memset>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000f18 	.word	0x20000f18

08002398 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
 80023a2:	460b      	mov	r3, r1
 80023a4:	80bb      	strh	r3, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	70fb      	strb	r3, [r7, #3]
	if (
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b7f      	cmp	r3, #127	; 0x7f
 80023ae:	d848      	bhi.n	8002442 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	2b3f      	cmp	r3, #63	; 0x3f
 80023b4:	d845      	bhi.n	8002442 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <SSD1306_DrawPixel+0xb4>)
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11a      	bne.n	8002408 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	88bb      	ldrh	r3, [r7, #4]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	b298      	uxth	r0, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	4413      	add	r3, r2
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <SSD1306_DrawPixel+0xb8>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	b25a      	sxtb	r2, r3
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b259      	sxtb	r1, r3
 80023f8:	88fa      	ldrh	r2, [r7, #6]
 80023fa:	4603      	mov	r3, r0
 80023fc:	01db      	lsls	r3, r3, #7
 80023fe:	4413      	add	r3, r2
 8002400:	b2c9      	uxtb	r1, r1
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <SSD1306_DrawPixel+0xb8>)
 8002404:	54d1      	strb	r1, [r2, r3]
 8002406:	e01d      	b.n	8002444 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	88bb      	ldrh	r3, [r7, #4]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	b298      	uxth	r0, r3
 8002410:	4603      	mov	r3, r0
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	4413      	add	r3, r2
 8002416:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <SSD1306_DrawPixel+0xb8>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	b25a      	sxtb	r2, r3
 800241c:	88bb      	ldrh	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	b25b      	sxtb	r3, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	b25b      	sxtb	r3, r3
 800242e:	4013      	ands	r3, r2
 8002430:	b259      	sxtb	r1, r3
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	4603      	mov	r3, r0
 8002436:	01db      	lsls	r3, r3, #7
 8002438:	4413      	add	r3, r2
 800243a:	b2c9      	uxtb	r1, r1
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <SSD1306_DrawPixel+0xb8>)
 800243e:	54d1      	strb	r1, [r2, r3]
 8002440:	e000      	b.n	8002444 <SSD1306_DrawPixel+0xac>
		return;
 8002442:	bf00      	nop
	}
}
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20001318 	.word	0x20001318
 8002450:	20000f18 	.word	0x20000f18

08002454 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	460a      	mov	r2, r1
 800245e:	80fb      	strh	r3, [r7, #6]
 8002460:	4613      	mov	r3, r2
 8002462:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002464:	4a05      	ldr	r2, [pc, #20]	; (800247c <SSD1306_GotoXY+0x28>)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <SSD1306_GotoXY+0x28>)
 800246c:	88bb      	ldrh	r3, [r7, #4]
 800246e:	8053      	strh	r3, [r2, #2]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20001318 	.word	0x20001318

08002480 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002490:	4b3a      	ldr	r3, [pc, #232]	; (800257c <SSD1306_Putc+0xfc>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4413      	add	r3, r2
	if (
 800249c:	2b7f      	cmp	r3, #127	; 0x7f
 800249e:	dc07      	bgt.n	80024b0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <SSD1306_Putc+0xfc>)
 80024a2:	885b      	ldrh	r3, [r3, #2]
 80024a4:	461a      	mov	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024ac:	2b3f      	cmp	r3, #63	; 0x3f
 80024ae:	dd01      	ble.n	80024b4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e05e      	b.n	8002572 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	e04b      	b.n	8002552 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	3b20      	subs	r3, #32
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	7849      	ldrb	r1, [r1, #1]
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	440b      	add	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e030      	b.n	8002540 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <SSD1306_Putc+0xfc>)
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	b298      	uxth	r0, r3
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <SSD1306_Putc+0xfc>)
 80024fc:	885a      	ldrh	r2, [r3, #2]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4413      	add	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	79ba      	ldrb	r2, [r7, #6]
 8002508:	4619      	mov	r1, r3
 800250a:	f7ff ff45 	bl	8002398 <SSD1306_DrawPixel>
 800250e:	e014      	b.n	800253a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <SSD1306_Putc+0xfc>)
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4413      	add	r3, r2
 800251a:	b298      	uxth	r0, r3
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <SSD1306_Putc+0xfc>)
 800251e:	885a      	ldrh	r2, [r3, #2]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	b29b      	uxth	r3, r3
 8002524:	4413      	add	r3, r2
 8002526:	b299      	uxth	r1, r3
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff ff2f 	bl	8002398 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	3301      	adds	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4293      	cmp	r3, r2
 800254a:	d3c8      	bcc.n	80024de <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	461a      	mov	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4293      	cmp	r3, r2
 800255c:	d3ad      	bcc.n	80024ba <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <SSD1306_Putc+0xfc>)
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <SSD1306_Putc+0xfc>)
 800256e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002570:	79fb      	ldrb	r3, [r7, #7]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20001318 	.word	0x20001318

08002580 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800258e:	e012      	b.n	80025b6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff71 	bl	8002480 <SSD1306_Putc>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d002      	beq.n	80025b0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	e008      	b.n	80025c2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e8      	bne.n	8002590 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	781b      	ldrb	r3, [r3, #0]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <ssd1306_I2C_Init+0x24>)
 80025d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025d6:	e002      	b.n	80025de <ssd1306_I2C_Init+0x12>
		p--;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f9      	bne.n	80025d8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	0003d090 	.word	0x0003d090

080025f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b0c7      	sub	sp, #284	; 0x11c
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	4604      	mov	r4, r0
 80025fc:	4608      	mov	r0, r1
 80025fe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002602:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002606:	600a      	str	r2, [r1, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800260e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002612:	4622      	mov	r2, r4
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800261a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800261e:	4602      	mov	r2, r0
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002626:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800262a:	460a      	mov	r2, r1
 800262c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800262e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002636:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800263a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002648:	e015      	b.n	8002676 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800264a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800264e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002652:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	441a      	add	r2, r3
 800265a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800265e:	3301      	adds	r3, #1
 8002660:	7811      	ldrb	r1, [r2, #0]
 8002662:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002666:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800266a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800266c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002670:	3301      	adds	r3, #1
 8002672:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002676:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800267a:	b29b      	uxth	r3, r3
 800267c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002680:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d8df      	bhi.n	800264a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800268a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800268e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b299      	uxth	r1, r3
 8002696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800269a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f107 020c 	add.w	r2, r7, #12
 80026a8:	200a      	movs	r0, #10
 80026aa:	9000      	str	r0, [sp, #0]
 80026ac:	4803      	ldr	r0, [pc, #12]	; (80026bc <ssd1306_I2C_WriteMulti+0xc8>)
 80026ae:	f000 fe49 	bl	8003344 <HAL_I2C_Master_Transmit>
}
 80026b2:	bf00      	nop
 80026b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	20000e70 	.word	0x20000e70

080026c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	460b      	mov	r3, r1
 80026cc:	71bb      	strb	r3, [r7, #6]
 80026ce:	4613      	mov	r3, r2
 80026d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80026d6:	797b      	ldrb	r3, [r7, #5]
 80026d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	b299      	uxth	r1, r3
 80026de:	f107 020c 	add.w	r2, r7, #12
 80026e2:	230a      	movs	r3, #10
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2302      	movs	r3, #2
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <ssd1306_I2C_Write+0x38>)
 80026ea:	f000 fe2b 	bl	8003344 <HAL_I2C_Master_Transmit>
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000e70 	.word	0x20000e70

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_MspInit+0x4c>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_MspInit+0x4c>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6193      	str	r3, [r2, #24]
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_MspInit+0x4c>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_MspInit+0x4c>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_MspInit+0x4c>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_MspInit+0x4c>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	210f      	movs	r1, #15
 8002736:	f06f 0001 	mvn.w	r0, #1
 800273a:	f000 fb10 	bl	8002d5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_InitTick+0xe8>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <HAL_InitTick+0xe8>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_InitTick+0xe8>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800277a:	f107 0210 	add.w	r2, r7, #16
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fb93 	bl	8004eb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002794:	f002 fb64 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8002798:	6378      	str	r0, [r7, #52]	; 0x34
 800279a:	e004      	b.n	80027a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800279c:	f002 fb60 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 80027a0:	4603      	mov	r3, r0
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <HAL_InitTick+0xec>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0c9b      	lsrs	r3, r3, #18
 80027b0:	3b01      	subs	r3, #1
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_InitTick+0xf0>)
 80027b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_InitTick+0xf0>)
 80027be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027c2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_InitTick+0xf0>)
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_InitTick+0xf0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_InitTick+0xf0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_InitTick+0xf0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80027dc:	4817      	ldr	r0, [pc, #92]	; (800283c <HAL_InitTick+0xf0>)
 80027de:	f002 fbb5 	bl	8004f4c <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80027e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11b      	bne.n	8002828 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80027f0:	4812      	ldr	r0, [pc, #72]	; (800283c <HAL_InitTick+0xf0>)
 80027f2:	f002 fc03 	bl	8004ffc <HAL_TIM_Base_Start_IT>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80027fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002804:	201c      	movs	r0, #28
 8002806:	f000 fac6 	bl	8002d96 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d808      	bhi.n	8002822 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	201c      	movs	r0, #28
 8002816:	f000 faa2 	bl	8002d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_InitTick+0xf4>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e002      	b.n	8002828 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800282c:	4618      	mov	r0, r3
 800282e:	3738      	adds	r7, #56	; 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	431bde83 	.word	0x431bde83
 800283c:	20001320 	.word	0x20001320
 8002840:	2000000c 	.word	0x2000000c

08002844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <NMI_Handler+0x4>

0800284a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <HardFault_Handler+0x4>

08002850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <MemManage_Handler+0x4>

08002856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285a:	e7fe      	b.n	800285a <BusFault_Handler+0x4>

0800285c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <UsageFault_Handler+0x4>

08002862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <TIM2_IRQHandler+0x10>)
 8002876:	f002 fc13 	bl	80050a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20001320 	.word	0x20001320

08002884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return 1;
 8002888:	2301      	movs	r3, #1
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <_kill>:

int _kill(int pid, int sig)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800289c:	f005 f95e 	bl	8007b5c <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2216      	movs	r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
  return -1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_exit>:

void _exit (int status)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ba:	f04f 31ff 	mov.w	r1, #4294967295
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffe7 	bl	8002892 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c4:	e7fe      	b.n	80028c4 <_exit+0x12>

080028c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00a      	b.n	80028ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d8:	f3af 8000 	nop.w
 80028dc:	4601      	mov	r1, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	60ba      	str	r2, [r7, #8]
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	dbf0      	blt.n	80028d8 <_read+0x12>
  }

  return len;
 80028f6:	687b      	ldr	r3, [r7, #4]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	e009      	b.n	8002926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbf1      	blt.n	8002912 <_write+0x12>
  }
  return len;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_close>:

int _close(int file)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295e:	605a      	str	r2, [r3, #4]
  return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <_isatty>:

int _isatty(int file)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <_sbrk+0x5c>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <_sbrk+0x60>)
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <_sbrk+0x64>)
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <_sbrk+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c8:	f005 f8c8 	bl	8007b5c <__errno>
 80029cc:	4603      	mov	r3, r0
 80029ce:	220c      	movs	r2, #12
 80029d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e009      	b.n	80029ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <_sbrk+0x64>)
 80029e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20005000 	.word	0x20005000
 80029f8:	00000400 	.word	0x00000400
 80029fc:	20001368 	.word	0x20001368
 8002a00:	20003c28 	.word	0x20003c28

08002a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <MX_USART1_UART_Init+0x50>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_USART1_UART_Init+0x4c>)
 8002a48:	f002 fcca 	bl	80053e0 <HAL_UART_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a52:	f7ff fb92 	bl	800217a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000136c 	.word	0x2000136c
 8002a60:	40013800 	.word	0x40013800

08002a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_UART_MspInit+0x8c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d131      	bne.n	8002ae8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_UART_MspInit+0x90>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_UART_MspInit+0x90>)
 8002a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_UART_MspInit+0x90>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_UART_MspInit+0x90>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_UART_MspInit+0x90>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6193      	str	r3, [r2, #24]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_UART_MspInit+0x90>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <HAL_UART_MspInit+0x94>)
 8002aca:	f000 f973 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_UART_MspInit+0x94>)
 8002ae4:	f000 f966 	bl	8002db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010800 	.word	0x40010800

08002afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002afc:	f7ff ff82 	bl	8002a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b00:	480b      	ldr	r0, [pc, #44]	; (8002b30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b02:	490c      	ldr	r1, [pc, #48]	; (8002b34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b18:	4c09      	ldr	r4, [pc, #36]	; (8002b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b26:	f005 f81f 	bl	8007b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b2a:	f7ff fabf 	bl	80020ac <main>
  bx lr
 8002b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b34:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002b38:	0800be9c 	.word	0x0800be9c
  ldr r2, =_sbss
 8002b3c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002b40:	20003c24 	.word	0x20003c24

08002b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b44:	e7fe      	b.n	8002b44 <ADC1_2_IRQHandler>
	...

08002b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_Init+0x28>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_Init+0x28>)
 8002b52:	f043 0310 	orr.w	r3, r3, #16
 8002b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b58:	2003      	movs	r0, #3
 8002b5a:	f000 f8f5 	bl	8002d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b5e:	200f      	movs	r0, #15
 8002b60:	f7ff fdf4 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b64:	f7ff fdca 	bl	80026fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40022000 	.word	0x40022000

08002b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_IncTick+0x1c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_IncTick+0x20>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_IncTick+0x20>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	20000010 	.word	0x20000010
 8002b94:	200013b4 	.word	0x200013b4

08002b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <HAL_GetTick+0x10>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	200013b4 	.word	0x200013b4

08002bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff fff0 	bl	8002b98 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d005      	beq.n	8002bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_Delay+0x44>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd2:	bf00      	nop
 8002bd4:	f7ff ffe0 	bl	8002b98 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d8f7      	bhi.n	8002bd4 <HAL_Delay+0x28>
  {
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000010 	.word	0x20000010

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4906      	ldr	r1, [pc, #24]	; (8002c8c <__NVIC_EnableIRQ+0x34>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff4f 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d70:	f7ff ff64 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ffb2 	bl	8002ce4 <NVIC_EncodePriority>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff81 	bl	8002c90 <__NVIC_SetPriority>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff57 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b08b      	sub	sp, #44	; 0x2c
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc6:	e169      	b.n	800309c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 8158 	bne.w	8003096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a9a      	ldr	r2, [pc, #616]	; (8003054 <HAL_GPIO_Init+0x2a0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05e      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002df0:	4a98      	ldr	r2, [pc, #608]	; (8003054 <HAL_GPIO_Init+0x2a0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d875      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002df6:	4a98      	ldr	r2, [pc, #608]	; (8003058 <HAL_GPIO_Init+0x2a4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d058      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002dfc:	4a96      	ldr	r2, [pc, #600]	; (8003058 <HAL_GPIO_Init+0x2a4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d86f      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e02:	4a96      	ldr	r2, [pc, #600]	; (800305c <HAL_GPIO_Init+0x2a8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d052      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002e08:	4a94      	ldr	r2, [pc, #592]	; (800305c <HAL_GPIO_Init+0x2a8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d869      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e0e:	4a94      	ldr	r2, [pc, #592]	; (8003060 <HAL_GPIO_Init+0x2ac>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04c      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002e14:	4a92      	ldr	r2, [pc, #584]	; (8003060 <HAL_GPIO_Init+0x2ac>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d863      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e1a:	4a92      	ldr	r2, [pc, #584]	; (8003064 <HAL_GPIO_Init+0x2b0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d046      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
 8002e20:	4a90      	ldr	r2, [pc, #576]	; (8003064 <HAL_GPIO_Init+0x2b0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d85d      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e26:	2b12      	cmp	r3, #18
 8002e28:	d82a      	bhi.n	8002e80 <HAL_GPIO_Init+0xcc>
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d859      	bhi.n	8002ee2 <HAL_GPIO_Init+0x12e>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_GPIO_Init+0x80>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002eaf 	.word	0x08002eaf
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	08002e9b 	.word	0x08002e9b
 8002e40:	08002edd 	.word	0x08002edd
 8002e44:	08002ee3 	.word	0x08002ee3
 8002e48:	08002ee3 	.word	0x08002ee3
 8002e4c:	08002ee3 	.word	0x08002ee3
 8002e50:	08002ee3 	.word	0x08002ee3
 8002e54:	08002ee3 	.word	0x08002ee3
 8002e58:	08002ee3 	.word	0x08002ee3
 8002e5c:	08002ee3 	.word	0x08002ee3
 8002e60:	08002ee3 	.word	0x08002ee3
 8002e64:	08002ee3 	.word	0x08002ee3
 8002e68:	08002ee3 	.word	0x08002ee3
 8002e6c:	08002ee3 	.word	0x08002ee3
 8002e70:	08002ee3 	.word	0x08002ee3
 8002e74:	08002ee3 	.word	0x08002ee3
 8002e78:	08002e91 	.word	0x08002e91
 8002e7c:	08002ea5 	.word	0x08002ea5
 8002e80:	4a79      	ldr	r2, [pc, #484]	; (8003068 <HAL_GPIO_Init+0x2b4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e86:	e02c      	b.n	8002ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	623b      	str	r3, [r7, #32]
          break;
 8002e8e:	e029      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	3304      	adds	r3, #4
 8002e96:	623b      	str	r3, [r7, #32]
          break;
 8002e98:	e024      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	623b      	str	r3, [r7, #32]
          break;
 8002ea2:	e01f      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	623b      	str	r3, [r7, #32]
          break;
 8002eac:	e01a      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e013      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	611a      	str	r2, [r3, #16]
          break;
 8002ece:	e009      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	615a      	str	r2, [r3, #20]
          break;
 8002eda:	e003      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x130>
          break;
 8002ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2bff      	cmp	r3, #255	; 0xff
 8002ee8:	d801      	bhi.n	8002eee <HAL_GPIO_Init+0x13a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	e001      	b.n	8002ef2 <HAL_GPIO_Init+0x13e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d802      	bhi.n	8002f00 <HAL_GPIO_Init+0x14c>
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_Init+0x152>
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	3b08      	subs	r3, #8
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	431a      	orrs	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80b1 	beq.w	8003096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f34:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_GPIO_Init+0x2b8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a4c      	ldr	r2, [pc, #304]	; (800306c <HAL_GPIO_Init+0x2b8>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_GPIO_Init+0x2b8>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f4c:	4a48      	ldr	r2, [pc, #288]	; (8003070 <HAL_GPIO_Init+0x2bc>)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <HAL_GPIO_Init+0x2c0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_GPIO_Init+0x1ec>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3f      	ldr	r2, [pc, #252]	; (8003078 <HAL_GPIO_Init+0x2c4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00d      	beq.n	8002f9c <HAL_GPIO_Init+0x1e8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3e      	ldr	r2, [pc, #248]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3d      	ldr	r2, [pc, #244]	; (8003080 <HAL_GPIO_Init+0x2cc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_GPIO_Init+0x1e0>
 8002f90:	2303      	movs	r3, #3
 8002f92:	e006      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f94:	2304      	movs	r3, #4
 8002f96:	e004      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e002      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fb2:	492f      	ldr	r1, [pc, #188]	; (8003070 <HAL_GPIO_Init+0x2bc>)
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	492c      	ldr	r1, [pc, #176]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	4928      	ldr	r1, [pc, #160]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	4922      	ldr	r1, [pc, #136]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	43db      	mvns	r3, r3
 800300a:	491e      	ldr	r1, [pc, #120]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 800300c:	4013      	ands	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4918      	ldr	r1, [pc, #96]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	43db      	mvns	r3, r3
 8003032:	4914      	ldr	r1, [pc, #80]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8003034:	4013      	ands	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d021      	beq.n	8003088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	490e      	ldr	r1, [pc, #56]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e021      	b.n	8003096 <HAL_GPIO_Init+0x2e2>
 8003052:	bf00      	nop
 8003054:	10320000 	.word	0x10320000
 8003058:	10310000 	.word	0x10310000
 800305c:	10220000 	.word	0x10220000
 8003060:	10210000 	.word	0x10210000
 8003064:	10120000 	.word	0x10120000
 8003068:	10110000 	.word	0x10110000
 800306c:	40021000 	.word	0x40021000
 8003070:	40010000 	.word	0x40010000
 8003074:	40010800 	.word	0x40010800
 8003078:	40010c00 	.word	0x40010c00
 800307c:	40011000 	.word	0x40011000
 8003080:	40011400 	.word	0x40011400
 8003084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	43db      	mvns	r3, r3
 8003090:	4909      	ldr	r1, [pc, #36]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003092:	4013      	ands	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3301      	adds	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f47f ae8e 	bne.w	8002dc8 <HAL_GPIO_Init+0x14>
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	372c      	adds	r7, #44	; 0x2c
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40010400 	.word	0x40010400

080030bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e12b      	b.n	8003326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe ff76 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800310e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003120:	f001 fe9e 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a81      	ldr	r2, [pc, #516]	; (8003330 <HAL_I2C_Init+0x274>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d807      	bhi.n	8003140 <HAL_I2C_Init+0x84>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a80      	ldr	r2, [pc, #512]	; (8003334 <HAL_I2C_Init+0x278>)
 8003134:	4293      	cmp	r3, r2
 8003136:	bf94      	ite	ls
 8003138:	2301      	movls	r3, #1
 800313a:	2300      	movhi	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e006      	b.n	800314e <HAL_I2C_Init+0x92>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a7d      	ldr	r2, [pc, #500]	; (8003338 <HAL_I2C_Init+0x27c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0e7      	b.n	8003326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a78      	ldr	r2, [pc, #480]	; (800333c <HAL_I2C_Init+0x280>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	0c9b      	lsrs	r3, r3, #18
 8003160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a6a      	ldr	r2, [pc, #424]	; (8003330 <HAL_I2C_Init+0x274>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d802      	bhi.n	8003190 <HAL_I2C_Init+0xd4>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	e009      	b.n	80031a4 <HAL_I2C_Init+0xe8>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a69      	ldr	r2, [pc, #420]	; (8003340 <HAL_I2C_Init+0x284>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	3301      	adds	r3, #1
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	495c      	ldr	r1, [pc, #368]	; (8003330 <HAL_I2C_Init+0x274>)
 80031c0:	428b      	cmp	r3, r1
 80031c2:	d819      	bhi.n	80031f8 <HAL_I2C_Init+0x13c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e59      	subs	r1, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d2:	1c59      	adds	r1, r3, #1
 80031d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031d8:	400b      	ands	r3, r1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_I2C_Init+0x138>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e59      	subs	r1, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	e051      	b.n	8003298 <HAL_I2C_Init+0x1dc>
 80031f4:	2304      	movs	r3, #4
 80031f6:	e04f      	b.n	8003298 <HAL_I2C_Init+0x1dc>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d111      	bne.n	8003224 <HAL_I2C_Init+0x168>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e012      	b.n	800324a <HAL_I2C_Init+0x18e>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Init+0x196>
 800324e:	2301      	movs	r3, #1
 8003250:	e022      	b.n	8003298 <HAL_I2C_Init+0x1dc>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10e      	bne.n	8003278 <HAL_I2C_Init+0x1bc>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1e58      	subs	r0, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	440b      	add	r3, r1
 8003268:	fbb0 f3f3 	udiv	r3, r0, r3
 800326c:	3301      	adds	r3, #1
 800326e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003276:	e00f      	b.n	8003298 <HAL_I2C_Init+0x1dc>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e58      	subs	r0, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	6809      	ldr	r1, [r1, #0]
 800329c:	4313      	orrs	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6911      	ldr	r1, [r2, #16]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	430b      	orrs	r3, r1
 80032da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	000186a0 	.word	0x000186a0
 8003334:	001e847f 	.word	0x001e847f
 8003338:	003d08ff 	.word	0x003d08ff
 800333c:	431bde83 	.word	0x431bde83
 8003340:	10624dd3 	.word	0x10624dd3

08003344 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	461a      	mov	r2, r3
 8003350:	460b      	mov	r3, r1
 8003352:	817b      	strh	r3, [r7, #10]
 8003354:	4613      	mov	r3, r2
 8003356:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003358:	f7ff fc1e 	bl	8002b98 <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	f040 80e0 	bne.w	800352c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2319      	movs	r3, #25
 8003372:	2201      	movs	r2, #1
 8003374:	4970      	ldr	r1, [pc, #448]	; (8003538 <HAL_I2C_Master_Transmit+0x1f4>)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 ff72 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	e0d3      	b.n	800352e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_I2C_Master_Transmit+0x50>
 8003390:	2302      	movs	r3, #2
 8003392:	e0cc      	b.n	800352e <HAL_I2C_Master_Transmit+0x1ea>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d007      	beq.n	80033ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2221      	movs	r2, #33	; 0x21
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2210      	movs	r2, #16
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	893a      	ldrh	r2, [r7, #8]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a50      	ldr	r2, [pc, #320]	; (800353c <HAL_I2C_Master_Transmit+0x1f8>)
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033fc:	8979      	ldrh	r1, [r7, #10]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fd2c 	bl	8003e60 <I2C_MasterRequestWrite>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e08d      	b.n	800352e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003428:	e066      	b.n	80034f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	6a39      	ldr	r1, [r7, #32]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f001 f830 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b04      	cmp	r3, #4
 8003440:	d107      	bne.n	8003452 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06b      	b.n	800352e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11b      	bne.n	80034cc <HAL_I2C_Master_Transmit+0x188>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d017      	beq.n	80034cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	6a39      	ldr	r1, [r7, #32]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f001 f827 	bl	8004524 <I2C_WaitOnBTFFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d107      	bne.n	80034f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e01a      	b.n	800352e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d194      	bne.n	800342a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000

08003540 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	460b      	mov	r3, r1
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355a:	f7ff fb1d 	bl	8002b98 <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b20      	cmp	r3, #32
 800356a:	f040 80d9 	bne.w	8003720 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2319      	movs	r3, #25
 8003574:	2201      	movs	r2, #1
 8003576:	496d      	ldr	r1, [pc, #436]	; (800372c <HAL_I2C_Mem_Write+0x1ec>)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fe71 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	e0cc      	b.n	8003722 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Mem_Write+0x56>
 8003592:	2302      	movs	r3, #2
 8003594:	e0c5      	b.n	8003722 <HAL_I2C_Mem_Write+0x1e2>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d007      	beq.n	80035bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_I2C_Mem_Write+0x1f0>)
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035fe:	88f8      	ldrh	r0, [r7, #6]
 8003600:	893a      	ldrh	r2, [r7, #8]
 8003602:	8979      	ldrh	r1, [r7, #10]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4603      	mov	r3, r0
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fca8 	bl	8003f64 <I2C_RequestMemoryWrite>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d052      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e081      	b.n	8003722 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 ff36 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b04      	cmp	r3, #4
 8003634:	d107      	bne.n	8003646 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e06b      	b.n	8003722 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d11b      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x180>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d017      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1aa      	bne.n	800361e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 ff29 	bl	8004524 <I2C_WaitOnBTFFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d107      	bne.n	80036f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e016      	b.n	8003722 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	00100002 	.word	0x00100002
 8003730:	ffff0000 	.word	0xffff0000

08003734 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	4608      	mov	r0, r1
 800373e:	4611      	mov	r1, r2
 8003740:	461a      	mov	r2, r3
 8003742:	4603      	mov	r3, r0
 8003744:	817b      	strh	r3, [r7, #10]
 8003746:	460b      	mov	r3, r1
 8003748:	813b      	strh	r3, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7ff fa21 	bl	8002b98 <HAL_GetTick>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 8244 	bne.w	8003bee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2319      	movs	r3, #25
 800376c:	2201      	movs	r2, #1
 800376e:	4982      	ldr	r1, [pc, #520]	; (8003978 <HAL_I2C_Mem_Read+0x244>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fd75 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e237      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Read+0x5a>
 800378a:	2302      	movs	r3, #2
 800378c:	e230      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2222      	movs	r2, #34	; 0x22
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a62      	ldr	r2, [pc, #392]	; (800397c <HAL_I2C_Mem_Read+0x248>)
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fc42 	bl	8004090 <I2C_RequestMemoryRead>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1ec      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e1c0      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	2b01      	cmp	r3, #1
 800384c:	d11e      	bne.n	800388c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800385e:	b672      	cpsid	i
}
 8003860:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003886:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003888:	b662      	cpsie	i
}
 800388a:	e035      	b.n	80038f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	2b02      	cmp	r3, #2
 8003892:	d11e      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038a4:	b672      	cpsid	i
}
 80038a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038ce:	b662      	cpsie	i
}
 80038d0:	e012      	b.n	80038f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038f8:	e166      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	2b03      	cmp	r3, #3
 8003900:	f200 811f 	bhi.w	8003b42 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	2b01      	cmp	r3, #1
 800390a:	d123      	bne.n	8003954 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fe4f 	bl	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e167      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003952:	e139      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	2b02      	cmp	r3, #2
 800395a:	d152      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	4906      	ldr	r1, [pc, #24]	; (8003980 <HAL_I2C_Mem_Read+0x24c>)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fc7a 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e13c      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
 8003976:	bf00      	nop
 8003978:	00100002 	.word	0x00100002
 800397c:	ffff0000 	.word	0xffff0000
 8003980:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003984:	b672      	cpsid	i
}
 8003986:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039ca:	b662      	cpsie	i
}
 80039cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a00:	e0e2      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2200      	movs	r2, #0
 8003a0a:	497b      	ldr	r1, [pc, #492]	; (8003bf8 <HAL_I2C_Mem_Read+0x4c4>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fc27 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0e9      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2c:	b672      	cpsid	i
}
 8003a2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a62:	4b66      	ldr	r3, [pc, #408]	; (8003bfc <HAL_I2C_Mem_Read+0x4c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <HAL_I2C_Mem_Read+0x4cc>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0a1a      	lsrs	r2, r3, #8
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00da      	lsls	r2, r3, #3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d118      	bne.n	8003aba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003aaa:	b662      	cpsie	i
}
 8003aac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e09a      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d1d9      	bne.n	8003a7c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b0a:	b662      	cpsie	i
}
 8003b0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b40:	e042      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fd34 	bl	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e04c      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d118      	bne.n	8003bc8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f47f ae94 	bne.w	80038fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	00010004 	.word	0x00010004
 8003bfc:	20000008 	.word	0x20000008
 8003c00:	14f8b589 	.word	0x14f8b589

08003c04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	460b      	mov	r3, r1
 8003c12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7fe ffc0 	bl	8002b98 <HAL_GetTick>
 8003c18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	f040 8111 	bne.w	8003e4e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2319      	movs	r3, #25
 8003c32:	2201      	movs	r2, #1
 8003c34:	4988      	ldr	r1, [pc, #544]	; (8003e58 <HAL_I2C_IsDeviceReady+0x254>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fb12 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e104      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2C_IsDeviceReady+0x50>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0fd      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d007      	beq.n	8003c7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2224      	movs	r2, #36	; 0x24
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a70      	ldr	r2, [pc, #448]	; (8003e5c <HAL_I2C_IsDeviceReady+0x258>)
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fad0 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd4:	d103      	bne.n	8003cde <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0b6      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe ff51 	bl	8002b98 <HAL_GetTick>
 8003cf6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d26:	e025      	b.n	8003d74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d28:	f7fe ff36 	bl	8002b98 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <HAL_I2C_IsDeviceReady+0x13a>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	22a0      	movs	r2, #160	; 0xa0
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2ba0      	cmp	r3, #160	; 0xa0
 8003d7e:	d005      	beq.n	8003d8c <HAL_I2C_IsDeviceReady+0x188>
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <HAL_I2C_IsDeviceReady+0x188>
 8003d86:	7dbb      	ldrb	r3, [r7, #22]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0cd      	beq.n	8003d28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d129      	bne.n	8003df6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2319      	movs	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4921      	ldr	r1, [pc, #132]	; (8003e58 <HAL_I2C_IsDeviceReady+0x254>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa44 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e036      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e02c      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e0e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2319      	movs	r3, #25
 8003e16:	2201      	movs	r2, #1
 8003e18:	490f      	ldr	r1, [pc, #60]	; (8003e58 <HAL_I2C_IsDeviceReady+0x254>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa20 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e012      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f4ff af32 	bcc.w	8003c9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	00100002 	.word	0x00100002
 8003e5c:	ffff0000 	.word	0xffff0000

08003e60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d006      	beq.n	8003e8a <I2C_MasterRequestWrite+0x2a>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d003      	beq.n	8003e8a <I2C_MasterRequestWrite+0x2a>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e88:	d108      	bne.n	8003e9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e00b      	b.n	8003eb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2b12      	cmp	r3, #18
 8003ea2:	d107      	bne.n	8003eb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f9cd 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	d103      	bne.n	8003ee4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e035      	b.n	8003f54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef0:	d108      	bne.n	8003f04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef2:	897b      	ldrh	r3, [r7, #10]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	e01b      	b.n	8003f3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	11db      	asrs	r3, r3, #7
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0306 	and.w	r3, r3, #6
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f063 030f 	orn	r3, r3, #15
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	490e      	ldr	r1, [pc, #56]	; (8003f5c <I2C_MasterRequestWrite+0xfc>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fa16 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e010      	b.n	8003f54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4907      	ldr	r1, [pc, #28]	; (8003f60 <I2C_MasterRequestWrite+0x100>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fa06 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	00010008 	.word	0x00010008
 8003f60:	00010002 	.word	0x00010002

08003f64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	460b      	mov	r3, r1
 8003f78:	813b      	strh	r3, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f960 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb4:	d103      	bne.n	8003fbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e05f      	b.n	8004082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fc2:	897b      	ldrh	r3, [r7, #10]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <I2C_RequestMemoryWrite+0x128>)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f9bb 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e04c      	b.n	8004082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	6a39      	ldr	r1, [r7, #32]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fa46 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b04      	cmp	r3, #4
 8004014:	d107      	bne.n	8004026 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e02b      	b.n	8004082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]
 800403a:	e021      	b.n	8004080 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fa20 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b04      	cmp	r3, #4
 8004060:	d107      	bne.n	8004072 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e005      	b.n	8004082 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	00010002 	.word	0x00010002

08004090 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f8c2 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f0:	d103      	bne.n	80040fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0aa      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800410c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	4952      	ldr	r1, [pc, #328]	; (800425c <I2C_RequestMemoryRead+0x1cc>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f91d 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e097      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f9a8 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b04      	cmp	r3, #4
 8004150:	d107      	bne.n	8004162 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e076      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	e021      	b.n	80041bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	893b      	ldrh	r3, [r7, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f982 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e050      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	6a39      	ldr	r1, [r7, #32]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f967 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e035      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	2200      	movs	r2, #0
 8004200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f82b 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421e:	d103      	bne.n	8004228 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e013      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	4906      	ldr	r1, [pc, #24]	; (800425c <I2C_RequestMemoryRead+0x1cc>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f886 	bl	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	00010002 	.word	0x00010002

08004260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004270:	e048      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d044      	beq.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427a:	f7fe fc8d 	bl	8002b98 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d139      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10d      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	e00c      	b.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	43da      	mvns	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4013      	ands	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d116      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e023      	b.n	800434c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10d      	bne.n	800432a <I2C_WaitOnFlagUntilTimeout+0xca>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	e00c      	b.n	8004344 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	43da      	mvns	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	429a      	cmp	r2, r3
 8004348:	d093      	beq.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004362:	e071      	b.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d123      	bne.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800438c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e067      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d041      	beq.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fe fbe8 	bl	8002b98 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d136      	bne.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10c      	bne.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e00b      	b.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	43da      	mvns	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e021      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10c      	bne.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	43da      	mvns	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e00b      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	43da      	mvns	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af6d 	bne.w	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a0:	e034      	b.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8e3 	bl	800466e <I2C_IsAcknowledgeFailed>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e034      	b.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d028      	beq.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fe fb6d 	bl	8002b98 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11d      	bne.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d016      	beq.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e007      	b.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d1c3      	bne.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004530:	e034      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f89b 	bl	800466e <I2C_IsAcknowledgeFailed>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e034      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d028      	beq.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fe fb25 	bl	8002b98 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11d      	bne.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d016      	beq.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d1c3      	bne.n	8004532 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045c0:	e049      	b.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d119      	bne.n	8004604 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0210 	mvn.w	r2, #16
 80045d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e030      	b.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004604:	f7fe fac8 	bl	8002b98 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	d302      	bcc.n	800461a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11d      	bne.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d016      	beq.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e007      	b.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d1ae      	bne.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004684:	d11b      	bne.n	80046be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0204 	orr.w	r2, r3, #4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e272      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8087 	beq.w	80047fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ec:	4b92      	ldr	r3, [pc, #584]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d00c      	beq.n	8004712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b08      	cmp	r3, #8
 8004702:	d112      	bne.n	800472a <HAL_RCC_OscConfig+0x5e>
 8004704:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d10b      	bne.n	800472a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004712:	4b89      	ldr	r3, [pc, #548]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d06c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x12c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d168      	bne.n	80047f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e24c      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x76>
 8004734:	4b80      	ldr	r3, [pc, #512]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7f      	ldr	r2, [pc, #508]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800473a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e02e      	b.n	80047a0 <HAL_RCC_OscConfig+0xd4>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x98>
 800474a:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7a      	ldr	r2, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b78      	ldr	r3, [pc, #480]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a77      	ldr	r2, [pc, #476]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800475c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e01d      	b.n	80047a0 <HAL_RCC_OscConfig+0xd4>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0xbc>
 800476e:	4b72      	ldr	r3, [pc, #456]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a71      	ldr	r2, [pc, #452]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0xd4>
 8004788:	4b6b      	ldr	r3, [pc, #428]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800478e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b68      	ldr	r3, [pc, #416]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a67      	ldr	r2, [pc, #412]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800479a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe f9f6 	bl	8002b98 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe f9f2 	bl	8002b98 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e200      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b5d      	ldr	r3, [pc, #372]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0xe4>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe f9e2 	bl	8002b98 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe f9de 	bl	8002b98 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1ec      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	4b53      	ldr	r3, [pc, #332]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x10c>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004806:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x18c>
 800481e:	4b46      	ldr	r3, [pc, #280]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d116      	bne.n	8004858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	4b43      	ldr	r3, [pc, #268]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x176>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e1c0      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4939      	ldr	r1, [pc, #228]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004860:	4b36      	ldr	r3, [pc, #216]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fe f997 	bl	8002b98 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486e:	f7fe f993 	bl	8002b98 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e1a1      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4927      	ldr	r1, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe f976 	bl	8002b98 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe f972 	bl	8002b98 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e180      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03a      	beq.n	8004950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e8:	f7fe f956 	bl	8002b98 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe f952 	bl	8002b98 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e160      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800490e:	2001      	movs	r0, #1
 8004910:	f000 fafe 	bl	8004f10 <RCC_Delay>
 8004914:	e01c      	b.n	8004950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fe f93c 	bl	8002b98 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004922:	e00f      	b.n	8004944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004924:	f7fe f938 	bl	8002b98 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d908      	bls.n	8004944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e146      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	42420000 	.word	0x42420000
 8004940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	4b92      	ldr	r3, [pc, #584]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e9      	bne.n	8004924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a6 	beq.w	8004aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004962:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b88      	ldr	r3, [pc, #544]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	4a87      	ldr	r2, [pc, #540]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	61d3      	str	r3, [r2, #28]
 800497a:	4b85      	ldr	r3, [pc, #532]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b82      	ldr	r3, [pc, #520]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b7f      	ldr	r3, [pc, #508]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7e      	ldr	r2, [pc, #504]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fe f8f9 	bl	8002b98 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fe f8f5 	bl	8002b98 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b64      	cmp	r3, #100	; 0x64
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e103      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b75      	ldr	r3, [pc, #468]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x312>
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6213      	str	r3, [r2, #32]
 80049dc:	e02d      	b.n	8004a3a <HAL_RCC_OscConfig+0x36e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x334>
 80049e6:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	4a69      	ldr	r2, [pc, #420]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6213      	str	r3, [r2, #32]
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	4a66      	ldr	r2, [pc, #408]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6213      	str	r3, [r2, #32]
 80049fe:	e01c      	b.n	8004a3a <HAL_RCC_OscConfig+0x36e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCC_OscConfig+0x356>
 8004a08:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4a60      	ldr	r2, [pc, #384]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	6213      	str	r3, [r2, #32]
 8004a14:	4b5e      	ldr	r3, [pc, #376]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	4a5d      	ldr	r2, [pc, #372]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6213      	str	r3, [r2, #32]
 8004a20:	e00b      	b.n	8004a3a <HAL_RCC_OscConfig+0x36e>
 8004a22:	4b5b      	ldr	r3, [pc, #364]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4a5a      	ldr	r2, [pc, #360]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6213      	str	r3, [r2, #32]
 8004a2e:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4a57      	ldr	r2, [pc, #348]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe f8a9 	bl	8002b98 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fe f8a5 	bl	8002b98 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0b1      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ee      	beq.n	8004a4a <HAL_RCC_OscConfig+0x37e>
 8004a6c:	e014      	b.n	8004a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6e:	f7fe f893 	bl	8002b98 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fe f88f 	bl	8002b98 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e09b      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8c:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ee      	bne.n	8004a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8087 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab4:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d061      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d146      	bne.n	8004b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <HAL_RCC_OscConfig+0x4cc>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fe f863 	bl	8002b98 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fe f85f 	bl	8002b98 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e06d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afc:	d108      	bne.n	8004b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4921      	ldr	r1, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a19      	ldr	r1, [r3, #32]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	430b      	orrs	r3, r1
 8004b22:	491b      	ldr	r1, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <HAL_RCC_OscConfig+0x4cc>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fe f833 	bl	8002b98 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fe f82f 	bl	8002b98 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e03d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x46a>
 8004b54:	e035      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCC_OscConfig+0x4cc>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fe f81c 	bl	8002b98 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fe f818 	bl	8002b98 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e026      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x498>
 8004b82:	e01e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e019      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
 8004b98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_OscConfig+0x500>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0d0      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be4:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d910      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b67      	ldr	r3, [pc, #412]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 0207 	bic.w	r2, r3, #7
 8004bfa:	4965      	ldr	r1, [pc, #404]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0b8      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c2c:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a52      	ldr	r2, [pc, #328]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	494d      	ldr	r1, [pc, #308]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d040      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d115      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e073      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e06b      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4936      	ldr	r1, [pc, #216]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fd ff6a 	bl	8002b98 <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc8:	f7fd ff66 	bl	8002b98 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e053      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 020c 	and.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d1eb      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d210      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0207 	bic.w	r2, r3, #7
 8004d06:	4922      	ldr	r1, [pc, #136]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e032      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4916      	ldr	r1, [pc, #88]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490e      	ldr	r1, [pc, #56]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5e:	f000 f821 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490a      	ldr	r1, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	fa22 f303 	lsr.w	r3, r2, r3
 8004d76:	4a09      	ldr	r2, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1cc>)
 8004d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1d0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd fce4 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40022000 	.word	0x40022000
 8004d94:	40021000 	.word	0x40021000
 8004d98:	0800ba90 	.word	0x0800ba90
 8004d9c:	20000008 	.word	0x20000008
 8004da0:	2000000c 	.word	0x2000000c

08004da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x36>
 8004dd2:	e027      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004dd6:	613b      	str	r3, [r7, #16]
      break;
 8004dd8:	e027      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	0c9b      	lsrs	r3, r3, #18
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004de4:	5cd3      	ldrb	r3, [r2, r3]
 8004de6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d010      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0c5b      	lsrs	r3, r3, #17
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dfe:	5cd3      	ldrb	r3, [r2, r3]
 8004e00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e06:	fb03 f202 	mul.w	r2, r3, r2
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e004      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	613b      	str	r3, [r7, #16]
      break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e26:	613b      	str	r3, [r7, #16]
      break;
 8004e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2a:	693b      	ldr	r3, [r7, #16]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	007a1200 	.word	0x007a1200
 8004e40:	0800baa8 	.word	0x0800baa8
 8004e44:	0800bab8 	.word	0x0800bab8
 8004e48:	003d0900 	.word	0x003d0900

08004e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b02      	ldr	r3, [pc, #8]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	20000008 	.word	0x20000008

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e64:	f7ff fff2 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	0800baa0 	.word	0x0800baa0

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e8c:	f7ff ffde 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	0adb      	lsrs	r3, r3, #11
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	0800baa0 	.word	0x0800baa0

08004eb0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <HAL_RCC_GetClockConfig+0x58>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <HAL_RCC_GetClockConfig+0x58>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <HAL_RCC_GetClockConfig+0x58>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <HAL_RCC_GetClockConfig+0x58>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0207 	and.w	r2, r3, #7
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40022000 	.word	0x40022000

08004f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <RCC_Delay+0x34>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <RCC_Delay+0x38>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0a5b      	lsrs	r3, r3, #9
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f2c:	bf00      	nop
  }
  while (Delay --);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	60fa      	str	r2, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f9      	bne.n	8004f2c <RCC_Delay+0x1c>
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	20000008 	.word	0x20000008
 8004f48:	10624dd3 	.word	0x10624dd3

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e041      	b.n	8004fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f839 	bl	8004fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 f9b4 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e03a      	b.n	800508a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a18      	ldr	r2, [pc, #96]	; (8005094 <HAL_TIM_Base_Start_IT+0x98>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x58>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d009      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x58>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <HAL_TIM_Base_Start_IT+0x9c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x58>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a13      	ldr	r2, [pc, #76]	; (800509c <HAL_TIM_Base_Start_IT+0xa0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d111      	bne.n	8005078 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d010      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	e007      	b.n	8005088 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800

080050a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0202 	mvn.w	r2, #2
 80050cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8ed 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f8e0 	bl	80052b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f8ef 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0204 	mvn.w	r2, #4
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8c3 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8b6 	bl	80052b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f8c5 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b08      	cmp	r3, #8
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0208 	mvn.w	r2, #8
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2204      	movs	r2, #4
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f899 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f88c 	bl	80052b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f89b 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0210 	mvn.w	r2, #16
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2208      	movs	r2, #8
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f86f 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f862 	bl	80052b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f871 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0201 	mvn.w	r2, #1
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc ff9c 	bl	800215c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8bf 	bl	80053ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f835 	bl	80052e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b20      	cmp	r3, #32
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0220 	mvn.w	r2, #32
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f88a 	bl	80053bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <TIM_Base_SetConfig+0xb8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0x30>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0x30>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <TIM_Base_SetConfig+0xbc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x30>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <TIM_Base_SetConfig+0xc0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <TIM_Base_SetConfig+0xb8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0x62>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0x62>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <TIM_Base_SetConfig+0xbc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0x62>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <TIM_Base_SetConfig+0xc0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <TIM_Base_SetConfig+0xb8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d103      	bne.n	80053a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	615a      	str	r2, [r3, #20]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800

080053bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr

080053ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e042      	b.n	8005478 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd fb2c 	bl	8002a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f91d 	bl	8005664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b20      	cmp	r3, #32
 800549e:	d16d      	bne.n	800557c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_Transmit+0x2c>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e066      	b.n	800557e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2221      	movs	r2, #33	; 0x21
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054be:	f7fd fb6b 	bl	8002b98 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d108      	bne.n	80054ec <HAL_UART_Transmit+0x6c>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	e003      	b.n	80054f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054f4:	e02a      	b.n	800554c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f840 	bl	8005586 <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e036      	b.n	800557e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	3302      	adds	r3, #2
 800552a:	61bb      	str	r3, [r7, #24]
 800552c:	e007      	b.n	800553e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1cf      	bne.n	80054f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2140      	movs	r1, #64	; 0x40
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f810 	bl	8005586 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b090      	sub	sp, #64	; 0x40
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005596:	e050      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d04c      	beq.n	800563a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055a6:	f7fd faf7 	bl	8002b98 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d241      	bcs.n	800563a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055d6:	637a      	str	r2, [r7, #52]	; 0x34
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e5      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	613b      	str	r3, [r7, #16]
   return(result);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3314      	adds	r3, #20
 8005608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560a:	623a      	str	r2, [r7, #32]
 800560c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69f9      	ldr	r1, [r7, #28]
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	61bb      	str	r3, [r7, #24]
   return(result);
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e00f      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	429a      	cmp	r2, r3
 8005656:	d09f      	beq.n	8005598 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3740      	adds	r7, #64	; 0x40
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800569e:	f023 030c 	bic.w	r3, r3, #12
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a2c      	ldr	r2, [pc, #176]	; (8005778 <UART_SetConfig+0x114>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d103      	bne.n	80056d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7ff fbdc 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	e002      	b.n	80056da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7ff fbc4 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 80056d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009a      	lsls	r2, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	4a22      	ldr	r2, [pc, #136]	; (800577c <UART_SetConfig+0x118>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	0119      	lsls	r1, r3, #4
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009a      	lsls	r2, r3, #2
 8005704:	441a      	add	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005710:	4b1a      	ldr	r3, [pc, #104]	; (800577c <UART_SetConfig+0x118>)
 8005712:	fba3 0302 	umull	r0, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2064      	movs	r0, #100	; 0x64
 800571a:	fb00 f303 	mul.w	r3, r0, r3
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	3332      	adds	r3, #50	; 0x32
 8005724:	4a15      	ldr	r2, [pc, #84]	; (800577c <UART_SetConfig+0x118>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005730:	4419      	add	r1, r3
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009a      	lsls	r2, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	fbb2 f2f3 	udiv	r2, r2, r3
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <UART_SetConfig+0x118>)
 800574a:	fba3 0302 	umull	r0, r3, r3, r2
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2064      	movs	r0, #100	; 0x64
 8005752:	fb00 f303 	mul.w	r3, r0, r3
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	3332      	adds	r3, #50	; 0x32
 800575c:	4a07      	ldr	r2, [pc, #28]	; (800577c <UART_SetConfig+0x118>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	440a      	add	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40013800 	.word	0x40013800
 800577c:	51eb851f 	.word	0x51eb851f

08005780 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800578e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005792:	2b84      	cmp	r3, #132	; 0x84
 8005794:	d005      	beq.n	80057a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005796:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	3303      	adds	r3, #3
 80057a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057a2:	68fb      	ldr	r3, [r7, #12]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057b2:	f000 ffbd 	bl	8006730 <vTaskStartScheduler>
  
  return osOK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}

080057bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <osThreadCreate+0x54>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01c      	beq.n	8005810 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685c      	ldr	r4, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681d      	ldr	r5, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691e      	ldr	r6, [r3, #16]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ffc9 	bl	8005780 <makeFreeRtosPriority>
 80057ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057f8:	9202      	str	r2, [sp, #8]
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	9100      	str	r1, [sp, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4632      	mov	r2, r6
 8005802:	4629      	mov	r1, r5
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fd82 	bl	800630e <xTaskCreateStatic>
 800580a:	4603      	mov	r3, r0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e01c      	b.n	800584a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685c      	ldr	r4, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800581c:	b29e      	uxth	r6, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ffab 	bl	8005780 <makeFreeRtosPriority>
 800582a:	4602      	mov	r2, r0
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	9200      	str	r2, [sp, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	4632      	mov	r2, r6
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fdc3 	bl	80063c6 <xTaskCreate>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d001      	beq.n	800584a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005854 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	2001      	movs	r0, #1
 800586c:	f000 fa28 	bl	8005cc0 <xQueueCreateMutexStatic>
 8005870:	4603      	mov	r3, r0
 8005872:	e003      	b.n	800587c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005874:	2001      	movs	r0, #1
 8005876:	f000 fa0b 	bl	8005c90 <xQueueCreateMutex>
 800587a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f103 0208 	add.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f103 0208 	add.w	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0208 	add.w	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	601a      	str	r2, [r3, #0]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d103      	bne.n	8005940 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e00c      	b.n	800595a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3308      	adds	r3, #8
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e002      	b.n	800594e <vListInsert+0x2e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	429a      	cmp	r2, r3
 8005958:	d2f6      	bcs.n	8005948 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6892      	ldr	r2, [r2, #8]
 80059a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6852      	ldr	r2, [r2, #4]
 80059b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d103      	bne.n	80059c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1e5a      	subs	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
	...

080059e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a0e:	f001 fdfd 	bl	800760c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	68f9      	ldr	r1, [r7, #12]
 8005a42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	441a      	add	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d114      	bne.n	8005a8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01a      	beq.n	8005aa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3310      	adds	r3, #16
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f8d7 	bl	8006c24 <xTaskRemoveFromEventList>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d012      	beq.n	8005aa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <xQueueGenericReset+0xcc>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	e009      	b.n	8005aa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3310      	adds	r3, #16
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fef6 	bl	8005884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3324      	adds	r3, #36	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fef1 	bl	8005884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aa2:	f001 fde3 	bl	800766c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005aa6:	2301      	movs	r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08e      	sub	sp, #56	; 0x38
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <xQueueGenericCreateStatic+0x52>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <xQueueGenericCreateStatic+0x56>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueGenericCreateStatic+0x58>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <xQueueGenericCreateStatic+0x7e>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericCreateStatic+0x82>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericCreateStatic+0x84>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	61fb      	str	r3, [r7, #28]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b52:	2348      	movs	r3, #72	; 0x48
 8005b54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b48      	cmp	r3, #72	; 0x48
 8005b5a:	d00a      	beq.n	8005b72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	61bb      	str	r3, [r7, #24]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f843 	bl	8005c1e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3730      	adds	r7, #48	; 0x30
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08a      	sub	sp, #40	; 0x28
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	4613      	mov	r3, r2
 8005bae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <xQueueGenericCreate+0x2a>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	613b      	str	r3, [r7, #16]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e004      	b.n	8005be2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3348      	adds	r3, #72	; 0x48
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fdd2 	bl	8007790 <pvPortMalloc>
 8005bec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3348      	adds	r3, #72	; 0x48
 8005bf8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c02:	79fa      	ldrb	r2, [r7, #7]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f805 	bl	8005c1e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c14:	69bb      	ldr	r3, [r7, #24]
	}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e002      	b.n	8005c40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	69b8      	ldr	r0, [r7, #24]
 8005c50:	f7ff fec8 	bl	80059e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2100      	movs	r1, #0
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f838 	bl	8005cf8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	6978      	ldr	r0, [r7, #20]
 8005caa:	f7ff ff7a 	bl	8005ba2 <xQueueGenericCreate>
 8005cae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff ffd3 	bl	8005c5c <prvInitialiseMutex>

		return pxNewQueue;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	6939      	ldr	r1, [r7, #16]
 8005cde:	6978      	ldr	r0, [r7, #20]
 8005ce0:	f7ff fee8 	bl	8005ab4 <xQueueGenericCreateStatic>
 8005ce4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff ffb8 	bl	8005c5c <prvInitialiseMutex>

		return pxNewQueue;
 8005cec:	68fb      	ldr	r3, [r7, #12]
	}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	; 0x38
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d06:	2300      	movs	r3, #0
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericSend+0x32>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <xQueueGenericSend+0x40>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <xQueueGenericSend+0x44>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <xQueueGenericSend+0x46>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <xQueueGenericSend+0x60>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d103      	bne.n	8005d66 <xQueueGenericSend+0x6e>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <xQueueGenericSend+0x72>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueGenericSend+0x74>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueGenericSend+0x8e>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	623b      	str	r3, [r7, #32]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d86:	f001 f90d 	bl	8006fa4 <xTaskGetSchedulerState>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <xQueueGenericSend+0x9e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <xQueueGenericSend+0xa2>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <xQueueGenericSend+0xa4>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61fb      	str	r3, [r7, #28]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005db6:	f001 fc29 	bl	800760c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <xQueueGenericSend+0xd4>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d129      	bne.n	8005e20 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd2:	f000 f9b2 	bl	800613a <prvCopyDataToQueue>
 8005dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d010      	beq.n	8005e02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	3324      	adds	r3, #36	; 0x24
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 ff1d 	bl	8006c24 <xTaskRemoveFromEventList>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005df0:	4b3f      	ldr	r3, [pc, #252]	; (8005ef0 <xQueueGenericSend+0x1f8>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	e00a      	b.n	8005e18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e08:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <xQueueGenericSend+0x1f8>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e18:	f001 fc28 	bl	800766c <vPortExitCritical>
				return pdPASS;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e063      	b.n	8005ee8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e26:	f001 fc21 	bl	800766c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e05c      	b.n	8005ee8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e34:	f107 0314 	add.w	r3, r7, #20
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 ff55 	bl	8006ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e42:	f001 fc13 	bl	800766c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e46:	f000 fcd3 	bl	80067f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e4a:	f001 fbdf 	bl	800760c <vPortEnterCritical>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e54:	b25b      	sxtb	r3, r3
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d103      	bne.n	8005e64 <xQueueGenericSend+0x16c>
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d103      	bne.n	8005e7a <xQueueGenericSend+0x182>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e7a:	f001 fbf7 	bl	800766c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e7e:	1d3a      	adds	r2, r7, #4
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 ff44 	bl	8006d14 <xTaskCheckForTimeOut>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d124      	bne.n	8005edc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e94:	f000 fa23 	bl	80062de <prvIsQueueFull>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fe98 	bl	8006bdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eae:	f000 f9ae 	bl	800620e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005eb2:	f000 fcab 	bl	800680c <xTaskResumeAll>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f af7c 	bne.w	8005db6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <xQueueGenericSend+0x1f8>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	e772      	b.n	8005db6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed2:	f000 f99c 	bl	800620e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ed6:	f000 fc99 	bl	800680c <xTaskResumeAll>
 8005eda:	e76c      	b.n	8005db6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ede:	f000 f996 	bl	800620e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ee2:	f000 fc93 	bl	800680c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ee6:	2300      	movs	r3, #0
		}
	}
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3738      	adds	r7, #56	; 0x38
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f06:	2300      	movs	r3, #0
 8005f08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	623b      	str	r3, [r7, #32]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	61fb      	str	r3, [r7, #28]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f44:	f001 f82e 	bl	8006fa4 <xTaskGetSchedulerState>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <xQueueSemaphoreTake+0x60>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <xQueueSemaphoreTake+0x64>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <xQueueSemaphoreTake+0x66>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	61bb      	str	r3, [r7, #24]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f74:	f001 fb4a 	bl	800760c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d024      	beq.n	8005fce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	1e5a      	subs	r2, r3, #1
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005f94:	f001 f9d0 	bl	8007338 <pvTaskIncrementMutexHeldCount>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00f      	beq.n	8005fc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	3310      	adds	r3, #16
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fe3a 	bl	8006c24 <xTaskRemoveFromEventList>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fb6:	4b54      	ldr	r3, [pc, #336]	; (8006108 <xQueueSemaphoreTake+0x214>)
 8005fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fc6:	f001 fb51 	bl	800766c <vPortExitCritical>
				return pdPASS;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e097      	b.n	80060fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d111      	bne.n	8005ff8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	617b      	str	r3, [r7, #20]
}
 8005fec:	bf00      	nop
 8005fee:	e7fe      	b.n	8005fee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ff0:	f001 fb3c 	bl	800766c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e082      	b.n	80060fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ffe:	f107 030c 	add.w	r3, r7, #12
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fe70 	bl	8006ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800600c:	f001 fb2e 	bl	800766c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006010:	f000 fbee 	bl	80067f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006014:	f001 fafa 	bl	800760c <vPortEnterCritical>
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800601e:	b25b      	sxtb	r3, r3
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d103      	bne.n	800602e <xQueueSemaphoreTake+0x13a>
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006034:	b25b      	sxtb	r3, r3
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d103      	bne.n	8006044 <xQueueSemaphoreTake+0x150>
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006044:	f001 fb12 	bl	800766c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006048:	463a      	mov	r2, r7
 800604a:	f107 030c 	add.w	r3, r7, #12
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fe5f 	bl	8006d14 <xTaskCheckForTimeOut>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d132      	bne.n	80060c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800605c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800605e:	f000 f928 	bl	80062b2 <prvIsQueueEmpty>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d026      	beq.n	80060b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006070:	f001 facc 	bl	800760c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 ffb1 	bl	8006fe0 <xTaskPriorityInherit>
 800607e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006080:	f001 faf4 	bl	800766c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	3324      	adds	r3, #36	; 0x24
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fda5 	bl	8006bdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006094:	f000 f8bb 	bl	800620e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006098:	f000 fbb8 	bl	800680c <xTaskResumeAll>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f47f af68 	bne.w	8005f74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80060a4:	4b18      	ldr	r3, [pc, #96]	; (8006108 <xQueueSemaphoreTake+0x214>)
 80060a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	e75e      	b.n	8005f74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80060b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060b8:	f000 f8a9 	bl	800620e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060bc:	f000 fba6 	bl	800680c <xTaskResumeAll>
 80060c0:	e758      	b.n	8005f74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80060c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c4:	f000 f8a3 	bl	800620e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060c8:	f000 fba0 	bl	800680c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060ce:	f000 f8f0 	bl	80062b2 <prvIsQueueEmpty>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f43f af4d 	beq.w	8005f74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80060e0:	f001 fa94 	bl	800760c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060e6:	f000 f811 	bl	800610c <prvGetDisinheritPriorityAfterTimeout>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 f880 	bl	80071f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80060f8:	f001 fab8 	bl	800766c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3738      	adds	r7, #56	; 0x38
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d006      	beq.n	800612a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1c3 0307 	rsb	r3, r3, #7
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e001      	b.n	800612e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800612e:	68fb      	ldr	r3, [r7, #12]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10d      	bne.n	8006174 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d14d      	bne.n	80061fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 ffc1 	bl	80070ec <xTaskPriorityDisinherit>
 800616a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	e043      	b.n	80061fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d119      	bne.n	80061ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6898      	ldr	r0, [r3, #8]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	461a      	mov	r2, r3
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	f001 fd23 	bl	8007bd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d32b      	bcc.n	80061fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	e026      	b.n	80061fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	68d8      	ldr	r0, [r3, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	461a      	mov	r2, r3
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	f001 fd09 	bl	8007bd0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	425b      	negs	r3, r3
 80061c8:	441a      	add	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d207      	bcs.n	80061ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	425b      	negs	r3, r3
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d105      	bne.n	80061fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006204:	697b      	ldr	r3, [r7, #20]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006216:	f001 f9f9 	bl	800760c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006220:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006222:	e011      	b.n	8006248 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d012      	beq.n	8006252 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fcf7 	bl	8006c24 <xTaskRemoveFromEventList>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800623c:	f000 fdcc 	bl	8006dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	3b01      	subs	r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dce9      	bgt.n	8006224 <prvUnlockQueue+0x16>
 8006250:	e000      	b.n	8006254 <prvUnlockQueue+0x46>
					break;
 8006252:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800625c:	f001 fa06 	bl	800766c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006260:	f001 f9d4 	bl	800760c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800626a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800626c:	e011      	b.n	8006292 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d012      	beq.n	800629c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3310      	adds	r3, #16
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fcd2 	bl	8006c24 <xTaskRemoveFromEventList>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006286:	f000 fda7 	bl	8006dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	3b01      	subs	r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	dce9      	bgt.n	800626e <prvUnlockQueue+0x60>
 800629a:	e000      	b.n	800629e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800629c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062a6:	f001 f9e1 	bl	800766c <vPortExitCritical>
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062ba:	f001 f9a7 	bl	800760c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062c6:	2301      	movs	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e001      	b.n	80062d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062d0:	f001 f9cc 	bl	800766c <vPortExitCritical>

	return xReturn;
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062e6:	f001 f991 	bl	800760c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d102      	bne.n	80062fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e001      	b.n	8006300 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006300:	f001 f9b4 	bl	800766c <vPortExitCritical>

	return xReturn;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800630e:	b580      	push	{r7, lr}
 8006310:	b08e      	sub	sp, #56	; 0x38
 8006312:	af04      	add	r7, sp, #16
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	623b      	str	r3, [r7, #32]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskCreateStatic+0x46>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	61fb      	str	r3, [r7, #28]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006354:	2354      	movs	r3, #84	; 0x54
 8006356:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b54      	cmp	r3, #84	; 0x54
 800635c:	d00a      	beq.n	8006374 <xTaskCreateStatic+0x66>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	61bb      	str	r3, [r7, #24]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01e      	beq.n	80063b8 <xTaskCreateStatic+0xaa>
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01b      	beq.n	80063b8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006388:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	2202      	movs	r2, #2
 800638e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006392:	2300      	movs	r3, #0
 8006394:	9303      	str	r3, [sp, #12]
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	9302      	str	r3, [sp, #8]
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 f850 	bl	8006450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063b2:	f000 f8d5 	bl	8006560 <prvAddNewTaskToReadyList>
 80063b6:	e001      	b.n	80063bc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063bc:	697b      	ldr	r3, [r7, #20]
	}
 80063be:	4618      	mov	r0, r3
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b08c      	sub	sp, #48	; 0x30
 80063ca:	af04      	add	r7, sp, #16
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 f9d8 	bl	8007790 <pvPortMalloc>
 80063e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00e      	beq.n	8006406 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80063e8:	2054      	movs	r0, #84	; 0x54
 80063ea:	f001 f9d1 	bl	8007790 <pvPortMalloc>
 80063ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
 80063fc:	e005      	b.n	800640a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f001 fa90 	bl	8007924 <vPortFree>
 8006404:	e001      	b.n	800640a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	2300      	movs	r3, #0
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	9302      	str	r3, [sp, #8]
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f80e 	bl	8006450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006434:	69f8      	ldr	r0, [r7, #28]
 8006436:	f000 f893 	bl	8006560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800643a:	2301      	movs	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e002      	b.n	8006446 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006446:	69bb      	ldr	r3, [r7, #24]
	}
 8006448:	4618      	mov	r0, r3
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	461a      	mov	r2, r3
 8006468:	21a5      	movs	r1, #165	; 0xa5
 800646a:	f001 fbbf 	bl	8007bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006478:	3b01      	subs	r3, #1
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	617b      	str	r3, [r7, #20]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e012      	b.n	80064d4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	7819      	ldrb	r1, [r3, #0]
 80064b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	3334      	adds	r3, #52	; 0x34
 80064be:	460a      	mov	r2, r1
 80064c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d006      	beq.n	80064dc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d9e9      	bls.n	80064ae <prvInitialiseNewTask+0x5e>
 80064da:	e000      	b.n	80064de <prvInitialiseNewTask+0x8e>
		{
			break;
 80064dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	2b06      	cmp	r3, #6
 80064ea:	d901      	bls.n	80064f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064ec:	2306      	movs	r3, #6
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	2200      	movs	r2, #0
 8006500:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	3304      	adds	r3, #4
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff f9db 	bl	80058c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	3318      	adds	r3, #24
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff f9d6 	bl	80058c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	f1c3 0207 	rsb	r2, r3, #7
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	2200      	movs	r2, #0
 8006530:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	69b8      	ldr	r0, [r7, #24]
 8006540:	f000 ff74 	bl	800742c <pxPortInitialiseStack>
 8006544:	4602      	mov	r2, r0
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006556:	bf00      	nop
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006568:	f001 f850 	bl	800760c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800656c:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <prvAddNewTaskToReadyList+0xb8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	4a29      	ldr	r2, [pc, #164]	; (8006618 <prvAddNewTaskToReadyList+0xb8>)
 8006574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006576:	4b29      	ldr	r3, [pc, #164]	; (800661c <prvAddNewTaskToReadyList+0xbc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800657e:	4a27      	ldr	r2, [pc, #156]	; (800661c <prvAddNewTaskToReadyList+0xbc>)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <prvAddNewTaskToReadyList+0xb8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d110      	bne.n	80065ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800658c:	f000 fc48 	bl	8006e20 <prvInitialiseTaskLists>
 8006590:	e00d      	b.n	80065ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <prvAddNewTaskToReadyList+0xc0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800659a:	4b20      	ldr	r3, [pc, #128]	; (800661c <prvAddNewTaskToReadyList+0xbc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d802      	bhi.n	80065ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065a8:	4a1c      	ldr	r2, [pc, #112]	; (800661c <prvAddNewTaskToReadyList+0xbc>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065ae:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <prvAddNewTaskToReadyList+0xc4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <prvAddNewTaskToReadyList+0xc4>)
 80065b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	4a18      	ldr	r2, [pc, #96]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <prvAddNewTaskToReadyList+0xcc>)
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7ff f97a 	bl	80058da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065e6:	f001 f841 	bl	800766c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <prvAddNewTaskToReadyList+0xc0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00e      	beq.n	8006610 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvAddNewTaskToReadyList+0xbc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d207      	bcs.n	8006610 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvAddNewTaskToReadyList+0xd0>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	200014b8 	.word	0x200014b8
 800661c:	200013b8 	.word	0x200013b8
 8006620:	200014c4 	.word	0x200014c4
 8006624:	200014d4 	.word	0x200014d4
 8006628:	200014c0 	.word	0x200014c0
 800662c:	200013bc 	.word	0x200013bc
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	; 0x28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	617b      	str	r3, [r7, #20]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <vTaskDelayUntil+0x46>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	613b      	str	r3, [r7, #16]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800667a:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <vTaskDelayUntil+0xf0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <vTaskDelayUntil+0x64>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006698:	f000 f8aa 	bl	80067f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800669c:	4b22      	ldr	r3, [pc, #136]	; (8006728 <vTaskDelayUntil+0xf4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4413      	add	r3, r2
 80066aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d20b      	bcs.n	80066ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d211      	bcs.n	80066e4 <vTaskDelayUntil+0xb0>
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d90d      	bls.n	80066e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	e00a      	b.n	80066e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d303      	bcc.n	80066e0 <vTaskDelayUntil+0xac>
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d901      	bls.n	80066e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fe31 	bl	8007360 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80066fe:	f000 f885 	bl	800680c <xTaskResumeAll>
 8006702:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <vTaskDelayUntil+0xf8>)
 800670c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800671a:	bf00      	nop
 800671c:	3728      	adds	r7, #40	; 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200014e0 	.word	0x200014e0
 8006728:	200014bc 	.word	0x200014bc
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800673e:	463a      	mov	r2, r7
 8006740:	1d39      	adds	r1, r7, #4
 8006742:	f107 0308 	add.w	r3, r7, #8
 8006746:	4618      	mov	r0, r3
 8006748:	f7fb fa20 	bl	8001b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	9202      	str	r2, [sp, #8]
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2300      	movs	r3, #0
 800675c:	460a      	mov	r2, r1
 800675e:	491e      	ldr	r1, [pc, #120]	; (80067d8 <vTaskStartScheduler+0xa8>)
 8006760:	481e      	ldr	r0, [pc, #120]	; (80067dc <vTaskStartScheduler+0xac>)
 8006762:	f7ff fdd4 	bl	800630e <xTaskCreateStatic>
 8006766:	4603      	mov	r3, r0
 8006768:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <vTaskStartScheduler+0xb0>)
 800676a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800676c:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <vTaskStartScheduler+0xb0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006774:	2301      	movs	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e001      	b.n	800677e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d116      	bne.n	80067b2 <vTaskStartScheduler+0x82>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	613b      	str	r3, [r7, #16]
}
 8006796:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <vTaskStartScheduler+0xb4>)
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <vTaskStartScheduler+0xb8>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <vTaskStartScheduler+0xbc>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ac:	f000 febc 	bl	8007528 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067b0:	e00e      	b.n	80067d0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d10a      	bne.n	80067d0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60fb      	str	r3, [r7, #12]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vTaskStartScheduler+0x9e>
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	0800ad2c 	.word	0x0800ad2c
 80067dc:	08006df1 	.word	0x08006df1
 80067e0:	200014dc 	.word	0x200014dc
 80067e4:	200014d8 	.word	0x200014d8
 80067e8:	200014c4 	.word	0x200014c4
 80067ec:	200014bc 	.word	0x200014bc

080067f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <vTaskSuspendAll+0x18>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	4a03      	ldr	r2, [pc, #12]	; (8006808 <vTaskSuspendAll+0x18>)
 80067fc:	6013      	str	r3, [r2, #0]
}
 80067fe:	bf00      	nop
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	200014e0 	.word	0x200014e0

0800680c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800681a:	4b41      	ldr	r3, [pc, #260]	; (8006920 <xTaskResumeAll+0x114>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xTaskResumeAll+0x2c>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	603b      	str	r3, [r7, #0]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006838:	f000 fee8 	bl	800760c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800683c:	4b38      	ldr	r3, [pc, #224]	; (8006920 <xTaskResumeAll+0x114>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3b01      	subs	r3, #1
 8006842:	4a37      	ldr	r2, [pc, #220]	; (8006920 <xTaskResumeAll+0x114>)
 8006844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006846:	4b36      	ldr	r3, [pc, #216]	; (8006920 <xTaskResumeAll+0x114>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d161      	bne.n	8006912 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800684e:	4b35      	ldr	r3, [pc, #212]	; (8006924 <xTaskResumeAll+0x118>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d05d      	beq.n	8006912 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006856:	e02e      	b.n	80068b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006858:	4b33      	ldr	r3, [pc, #204]	; (8006928 <xTaskResumeAll+0x11c>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3318      	adds	r3, #24
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff f893 	bl	8005990 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff f88e 	bl	8005990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	2201      	movs	r2, #1
 800687a:	409a      	lsls	r2, r3
 800687c:	4b2b      	ldr	r3, [pc, #172]	; (800692c <xTaskResumeAll+0x120>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	4a2a      	ldr	r2, [pc, #168]	; (800692c <xTaskResumeAll+0x120>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4a27      	ldr	r2, [pc, #156]	; (8006930 <xTaskResumeAll+0x124>)
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7ff f81c 	bl	80058da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <xTaskResumeAll+0x128>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d302      	bcc.n	80068b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <xTaskResumeAll+0x12c>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068b6:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <xTaskResumeAll+0x11c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1cc      	bne.n	8006858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068c4:	f000 fb4a 	bl	8006f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068c8:	4b1c      	ldr	r3, [pc, #112]	; (800693c <xTaskResumeAll+0x130>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d010      	beq.n	80068f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068d4:	f000 f844 	bl	8006960 <xTaskIncrementTick>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80068de:	4b16      	ldr	r3, [pc, #88]	; (8006938 <xTaskResumeAll+0x12c>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f1      	bne.n	80068d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80068f0:	4b12      	ldr	r3, [pc, #72]	; (800693c <xTaskResumeAll+0x130>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <xTaskResumeAll+0x12c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068fe:	2301      	movs	r3, #1
 8006900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006902:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <xTaskResumeAll+0x134>)
 8006904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006912:	f000 feab 	bl	800766c <vPortExitCritical>

	return xAlreadyYielded;
 8006916:	68bb      	ldr	r3, [r7, #8]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	200014e0 	.word	0x200014e0
 8006924:	200014b8 	.word	0x200014b8
 8006928:	20001478 	.word	0x20001478
 800692c:	200014c0 	.word	0x200014c0
 8006930:	200013bc 	.word	0x200013bc
 8006934:	200013b8 	.word	0x200013b8
 8006938:	200014cc 	.word	0x200014cc
 800693c:	200014c8 	.word	0x200014c8
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800694a:	4b04      	ldr	r3, [pc, #16]	; (800695c <xTaskGetTickCount+0x18>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006950:	687b      	ldr	r3, [r7, #4]
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr
 800695c:	200014bc 	.word	0x200014bc

08006960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696a:	4b51      	ldr	r3, [pc, #324]	; (8006ab0 <xTaskIncrementTick+0x150>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 808d 	bne.w	8006a8e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006974:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <xTaskIncrementTick+0x154>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800697c:	4a4d      	ldr	r2, [pc, #308]	; (8006ab4 <xTaskIncrementTick+0x154>)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d120      	bne.n	80069ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006988:	4b4b      	ldr	r3, [pc, #300]	; (8006ab8 <xTaskIncrementTick+0x158>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	603b      	str	r3, [r7, #0]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xTaskIncrementTick+0x46>
 80069a8:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <xTaskIncrementTick+0x158>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	4b43      	ldr	r3, [pc, #268]	; (8006abc <xTaskIncrementTick+0x15c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a41      	ldr	r2, [pc, #260]	; (8006ab8 <xTaskIncrementTick+0x158>)
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	4a41      	ldr	r2, [pc, #260]	; (8006abc <xTaskIncrementTick+0x15c>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	4b40      	ldr	r3, [pc, #256]	; (8006ac0 <xTaskIncrementTick+0x160>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	4a3f      	ldr	r2, [pc, #252]	; (8006ac0 <xTaskIncrementTick+0x160>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	f000 fac9 	bl	8006f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ca:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <xTaskIncrementTick+0x164>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d34d      	bcc.n	8006a70 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d4:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <xTaskIncrementTick+0x158>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <xTaskIncrementTick+0x82>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xTaskIncrementTick+0x84>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e8:	4b36      	ldr	r3, [pc, #216]	; (8006ac4 <xTaskIncrementTick+0x164>)
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295
 80069ee:	601a      	str	r2, [r3, #0]
					break;
 80069f0:	e03e      	b.n	8006a70 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069f2:	4b31      	ldr	r3, [pc, #196]	; (8006ab8 <xTaskIncrementTick+0x158>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d203      	bcs.n	8006a12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a0a:	4a2e      	ldr	r2, [pc, #184]	; (8006ac4 <xTaskIncrementTick+0x164>)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6013      	str	r3, [r2, #0]
						break;
 8006a10:	e02e      	b.n	8006a70 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe ffba 	bl	8005990 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3318      	adds	r3, #24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fe ffb1 	bl	8005990 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	2201      	movs	r2, #1
 8006a34:	409a      	lsls	r2, r3
 8006a36:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <xTaskIncrementTick+0x168>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	4a22      	ldr	r2, [pc, #136]	; (8006ac8 <xTaskIncrementTick+0x168>)
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <xTaskIncrementTick+0x16c>)
 8006a4e:	441a      	add	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7fe ff3f 	bl	80058da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a60:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <xTaskIncrementTick+0x170>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d3b4      	bcc.n	80069d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a6e:	e7b1      	b.n	80069d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <xTaskIncrementTick+0x170>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a76:	4915      	ldr	r1, [pc, #84]	; (8006acc <xTaskIncrementTick+0x16c>)
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d907      	bls.n	8006a98 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e004      	b.n	8006a98 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <xTaskIncrementTick+0x174>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a0f      	ldr	r2, [pc, #60]	; (8006ad4 <xTaskIncrementTick+0x174>)
 8006a96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <xTaskIncrementTick+0x178>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006aa4:	697b      	ldr	r3, [r7, #20]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200014e0 	.word	0x200014e0
 8006ab4:	200014bc 	.word	0x200014bc
 8006ab8:	20001470 	.word	0x20001470
 8006abc:	20001474 	.word	0x20001474
 8006ac0:	200014d0 	.word	0x200014d0
 8006ac4:	200014d8 	.word	0x200014d8
 8006ac8:	200014c0 	.word	0x200014c0
 8006acc:	200013bc 	.word	0x200013bc
 8006ad0:	200013b8 	.word	0x200013b8
 8006ad4:	200014c8 	.word	0x200014c8
 8006ad8:	200014cc 	.word	0x200014cc

08006adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ae2:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <vTaskSwitchContext+0xec>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006aea:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <vTaskSwitchContext+0xf0>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006af0:	e066      	b.n	8006bc0 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8006af2:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <vTaskSwitchContext+0xf0>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006af8:	4b35      	ldr	r3, [pc, #212]	; (8006bd0 <vTaskSwitchContext+0xf4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d111      	bne.n	8006b34 <vTaskSwitchContext+0x58>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3304      	adds	r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10b      	bne.n	8006b34 <vTaskSwitchContext+0x58>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d105      	bne.n	8006b34 <vTaskSwitchContext+0x58>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d008      	beq.n	8006b46 <vTaskSwitchContext+0x6a>
 8006b34:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <vTaskSwitchContext+0xf4>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <vTaskSwitchContext+0xf4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3334      	adds	r3, #52	; 0x34
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f7fa ffe5 	bl	8001b10 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b46:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <vTaskSwitchContext+0xf8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	fab3 f383 	clz	r3, r3
 8006b52:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	f1c3 031f 	rsb	r3, r3, #31
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	491e      	ldr	r1, [pc, #120]	; (8006bd8 <vTaskSwitchContext+0xfc>)
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <vTaskSwitchContext+0xaa>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	607b      	str	r3, [r7, #4]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <vTaskSwitchContext+0xa8>
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4a11      	ldr	r2, [pc, #68]	; (8006bd8 <vTaskSwitchContext+0xfc>)
 8006b92:	4413      	add	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d104      	bne.n	8006bb6 <vTaskSwitchContext+0xda>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <vTaskSwitchContext+0xf4>)
 8006bbe:	6013      	str	r3, [r2, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	200014e0 	.word	0x200014e0
 8006bcc:	200014cc 	.word	0x200014cc
 8006bd0:	200013b8 	.word	0x200013b8
 8006bd4:	200014c0 	.word	0x200014c0
 8006bd8:	200013bc 	.word	0x200013bc

08006bdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	60fb      	str	r3, [r7, #12]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <vTaskPlaceOnEventList+0x44>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3318      	adds	r3, #24
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fe fe88 	bl	8005920 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c10:	2101      	movs	r1, #1
 8006c12:	6838      	ldr	r0, [r7, #0]
 8006c14:	f000 fba4 	bl	8007360 <prvAddCurrentTaskToDelayedList>
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	200013b8 	.word	0x200013b8

08006c24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60fb      	str	r3, [r7, #12]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	3318      	adds	r3, #24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fe9b 	bl	8005990 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <xTaskRemoveFromEventList+0xac>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11c      	bne.n	8006c9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fe92 	bl	8005990 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <xTaskRemoveFromEventList+0xb0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <xTaskRemoveFromEventList+0xb0>)
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <xTaskRemoveFromEventList+0xb4>)
 8006c8c:	441a      	add	r2, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7fe fe20 	bl	80058da <vListInsertEnd>
 8006c9a:	e005      	b.n	8006ca8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	3318      	adds	r3, #24
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	480e      	ldr	r0, [pc, #56]	; (8006cdc <xTaskRemoveFromEventList+0xb8>)
 8006ca4:	f7fe fe19 	bl	80058da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <xTaskRemoveFromEventList+0xbc>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d905      	bls.n	8006cc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <xTaskRemoveFromEventList+0xc0>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e001      	b.n	8006cc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006cc6:	697b      	ldr	r3, [r7, #20]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	200014e0 	.word	0x200014e0
 8006cd4:	200014c0 	.word	0x200014c0
 8006cd8:	200013bc 	.word	0x200013bc
 8006cdc:	20001478 	.word	0x20001478
 8006ce0:	200013b8 	.word	0x200013b8
 8006ce4:	200014cc 	.word	0x200014cc

08006ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf0:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <vTaskInternalSetTimeOutState+0x24>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <vTaskInternalSetTimeOutState+0x28>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	605a      	str	r2, [r3, #4]
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	200014d0 	.word	0x200014d0
 8006d10:	200014bc 	.word	0x200014bc

08006d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	613b      	str	r3, [r7, #16]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d56:	f000 fc59 	bl	800760c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <xTaskCheckForTimeOut+0xbc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d102      	bne.n	8006d7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e023      	b.n	8006dc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b15      	ldr	r3, [pc, #84]	; (8006dd4 <xTaskCheckForTimeOut+0xc0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d007      	beq.n	8006d96 <xTaskCheckForTimeOut+0x82>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	e015      	b.n	8006dc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d20b      	bcs.n	8006db8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ff9b 	bl	8006ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e004      	b.n	8006dc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dc2:	f000 fc53 	bl	800766c <vPortExitCritical>

	return xReturn;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3720      	adds	r7, #32
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200014bc 	.word	0x200014bc
 8006dd4:	200014d0 	.word	0x200014d0

08006dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ddc:	4b03      	ldr	r3, [pc, #12]	; (8006dec <vTaskMissedYield+0x14>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
}
 8006de2:	bf00      	nop
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	200014cc 	.word	0x200014cc

08006df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006df8:	f000 f852 	bl	8006ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <prvIdleTask+0x28>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d9f9      	bls.n	8006df8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <prvIdleTask+0x2c>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e14:	e7f0      	b.n	8006df8 <prvIdleTask+0x8>
 8006e16:	bf00      	nop
 8006e18:	200013bc 	.word	0x200013bc
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e26:	2300      	movs	r3, #0
 8006e28:	607b      	str	r3, [r7, #4]
 8006e2a:	e00c      	b.n	8006e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <prvInitialiseTaskLists+0x60>)
 8006e38:	4413      	add	r3, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fd22 	bl	8005884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3301      	adds	r3, #1
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b06      	cmp	r3, #6
 8006e4a:	d9ef      	bls.n	8006e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e4c:	480d      	ldr	r0, [pc, #52]	; (8006e84 <prvInitialiseTaskLists+0x64>)
 8006e4e:	f7fe fd19 	bl	8005884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e52:	480d      	ldr	r0, [pc, #52]	; (8006e88 <prvInitialiseTaskLists+0x68>)
 8006e54:	f7fe fd16 	bl	8005884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e58:	480c      	ldr	r0, [pc, #48]	; (8006e8c <prvInitialiseTaskLists+0x6c>)
 8006e5a:	f7fe fd13 	bl	8005884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e5e:	480c      	ldr	r0, [pc, #48]	; (8006e90 <prvInitialiseTaskLists+0x70>)
 8006e60:	f7fe fd10 	bl	8005884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e64:	480b      	ldr	r0, [pc, #44]	; (8006e94 <prvInitialiseTaskLists+0x74>)
 8006e66:	f7fe fd0d 	bl	8005884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <prvInitialiseTaskLists+0x78>)
 8006e6c:	4a05      	ldr	r2, [pc, #20]	; (8006e84 <prvInitialiseTaskLists+0x64>)
 8006e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <prvInitialiseTaskLists+0x7c>)
 8006e72:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <prvInitialiseTaskLists+0x68>)
 8006e74:	601a      	str	r2, [r3, #0]
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200013bc 	.word	0x200013bc
 8006e84:	20001448 	.word	0x20001448
 8006e88:	2000145c 	.word	0x2000145c
 8006e8c:	20001478 	.word	0x20001478
 8006e90:	2000148c 	.word	0x2000148c
 8006e94:	200014a4 	.word	0x200014a4
 8006e98:	20001470 	.word	0x20001470
 8006e9c:	20001474 	.word	0x20001474

08006ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea6:	e019      	b.n	8006edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ea8:	f000 fbb0 	bl	800760c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <prvCheckTasksWaitingTermination+0x50>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fd69 	bl	8005990 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <prvCheckTasksWaitingTermination+0x54>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	4a0b      	ldr	r2, [pc, #44]	; (8006ef4 <prvCheckTasksWaitingTermination+0x54>)
 8006ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <prvCheckTasksWaitingTermination+0x58>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <prvCheckTasksWaitingTermination+0x58>)
 8006ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ed2:	f000 fbcb 	bl	800766c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f810 	bl	8006efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <prvCheckTasksWaitingTermination+0x58>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e1      	bne.n	8006ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	2000148c 	.word	0x2000148c
 8006ef4:	200014b8 	.word	0x200014b8
 8006ef8:	200014a0 	.word	0x200014a0

08006efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d108      	bne.n	8006f20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fd06 	bl	8007924 <vPortFree>
				vPortFree( pxTCB );
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fd03 	bl	8007924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f1e:	e018      	b.n	8006f52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d103      	bne.n	8006f32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fcfa 	bl	8007924 <vPortFree>
	}
 8006f30:	e00f      	b.n	8006f52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d00a      	beq.n	8006f52 <prvDeleteTCB+0x56>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <prvDeleteTCB+0x54>
	}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <prvResetNextTaskUnblockTime+0x40>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <prvResetNextTaskUnblockTime+0x14>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <prvResetNextTaskUnblockTime+0x16>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <prvResetNextTaskUnblockTime+0x44>)
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f7e:	e008      	b.n	8006f92 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <prvResetNextTaskUnblockTime+0x40>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <prvResetNextTaskUnblockTime+0x44>)
 8006f90:	6013      	str	r3, [r2, #0]
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	20001470 	.word	0x20001470
 8006fa0:	200014d8 	.word	0x200014d8

08006fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <xTaskGetSchedulerState+0x34>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	e008      	b.n	8006fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb8:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <xTaskGetSchedulerState+0x38>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	607b      	str	r3, [r7, #4]
 8006fc4:	e001      	b.n	8006fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fca:	687b      	ldr	r3, [r7, #4]
	}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	200014c4 	.word	0x200014c4
 8006fdc:	200014e0 	.word	0x200014e0

08006fe0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d06e      	beq.n	80070d4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <xTaskPriorityInherit+0x100>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	429a      	cmp	r2, r3
 8007002:	d25e      	bcs.n	80070c2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	db06      	blt.n	800701a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <xTaskPriorityInherit+0x100>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	f1c3 0207 	rsb	r2, r3, #7
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6959      	ldr	r1, [r3, #20]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a2e      	ldr	r2, [pc, #184]	; (80070e4 <xTaskPriorityInherit+0x104>)
 800702c:	4413      	add	r3, r2
 800702e:	4299      	cmp	r1, r3
 8007030:	d101      	bne.n	8007036 <xTaskPriorityInherit+0x56>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xTaskPriorityInherit+0x58>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d03a      	beq.n	80070b2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3304      	adds	r3, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fca5 	bl	8005990 <uxListRemove>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d115      	bne.n	8007078 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	4924      	ldr	r1, [pc, #144]	; (80070e4 <xTaskPriorityInherit+0x104>)
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <xTaskPriorityInherit+0x98>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	2201      	movs	r2, #1
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43da      	mvns	r2, r3
 800706e:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <xTaskPriorityInherit+0x108>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4013      	ands	r3, r2
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <xTaskPriorityInherit+0x108>)
 8007076:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <xTaskPriorityInherit+0x100>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	2201      	movs	r2, #1
 8007088:	409a      	lsls	r2, r3
 800708a:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <xTaskPriorityInherit+0x108>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4313      	orrs	r3, r2
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <xTaskPriorityInherit+0x108>)
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4a10      	ldr	r2, [pc, #64]	; (80070e4 <xTaskPriorityInherit+0x104>)
 80070a2:	441a      	add	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f7fe fc15 	bl	80058da <vListInsertEnd>
 80070b0:	e004      	b.n	80070bc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070b2:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <xTaskPriorityInherit+0x100>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e008      	b.n	80070d4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <xTaskPriorityInherit+0x100>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d201      	bcs.n	80070d4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d4:	68fb      	ldr	r3, [r7, #12]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200013b8 	.word	0x200013b8
 80070e4:	200013bc 	.word	0x200013bc
 80070e8:	200014c0 	.word	0x200014c0

080070ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d06e      	beq.n	80071e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007102:	4b3a      	ldr	r3, [pc, #232]	; (80071ec <xTaskPriorityDisinherit+0x100>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	429a      	cmp	r2, r3
 800710a:	d00a      	beq.n	8007122 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60fb      	str	r3, [r7, #12]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	60bb      	str	r3, [r7, #8]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007144:	1e5a      	subs	r2, r3, #1
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	429a      	cmp	r2, r3
 8007154:	d044      	beq.n	80071e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715a:	2b00      	cmp	r3, #0
 800715c:	d140      	bne.n	80071e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	3304      	adds	r3, #4
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fc14 	bl	8005990 <uxListRemove>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d115      	bne.n	800719a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	491f      	ldr	r1, [pc, #124]	; (80071f0 <xTaskPriorityDisinherit+0x104>)
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xTaskPriorityDisinherit+0xae>
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	2201      	movs	r2, #1
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	43da      	mvns	r2, r3
 8007190:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <xTaskPriorityDisinherit+0x108>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4013      	ands	r3, r2
 8007196:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <xTaskPriorityDisinherit+0x108>)
 8007198:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	f1c3 0207 	rsb	r2, r3, #7
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	2201      	movs	r2, #1
 80071b4:	409a      	lsls	r2, r3
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <xTaskPriorityDisinherit+0x108>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <xTaskPriorityDisinherit+0x108>)
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <xTaskPriorityDisinherit+0x104>)
 80071ce:	441a      	add	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f7fe fb7f 	bl	80058da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071e0:	697b      	ldr	r3, [r7, #20]
	}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200013b8 	.word	0x200013b8
 80071f0:	200013bc 	.word	0x200013bc
 80071f4:	200014c0 	.word	0x200014c0

080071f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007206:	2301      	movs	r3, #1
 8007208:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8088 	beq.w	8007322 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	60fb      	str	r3, [r7, #12]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d902      	bls.n	8007240 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e002      	b.n	8007246 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	429a      	cmp	r2, r3
 800724e:	d068      	beq.n	8007322 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	429a      	cmp	r2, r3
 8007258:	d163      	bne.n	8007322 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800725a:	4b34      	ldr	r3, [pc, #208]	; (800732c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d10a      	bne.n	800727a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	60bb      	str	r3, [r7, #8]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	db04      	blt.n	8007298 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f1c3 0207 	rsb	r2, r3, #7
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	6959      	ldr	r1, [r3, #20]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a22      	ldr	r2, [pc, #136]	; (8007330 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072a8:	4413      	add	r3, r2
 80072aa:	4299      	cmp	r1, r3
 80072ac:	d101      	bne.n	80072b2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d034      	beq.n	8007322 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe fb67 	bl	8005990 <uxListRemove>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d115      	bne.n	80072f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4918      	ldr	r1, [pc, #96]	; (8007330 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	2201      	movs	r2, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	43da      	mvns	r2, r3
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4013      	ands	r3, r2
 80072f0:	4a10      	ldr	r2, [pc, #64]	; (8007334 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80072f2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	2201      	movs	r2, #1
 80072fa:	409a      	lsls	r2, r3
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4313      	orrs	r3, r2
 8007302:	4a0c      	ldr	r2, [pc, #48]	; (8007334 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4a07      	ldr	r2, [pc, #28]	; (8007330 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007314:	441a      	add	r2, r3
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	3304      	adds	r3, #4
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f7fe fadc 	bl	80058da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007322:	bf00      	nop
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200013b8 	.word	0x200013b8
 8007330:	200013bc 	.word	0x200013bc
 8007334:	200014c0 	.word	0x200014c0

08007338 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800733c:	4b07      	ldr	r3, [pc, #28]	; (800735c <pvTaskIncrementMutexHeldCount+0x24>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <pvTaskIncrementMutexHeldCount+0x24>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800734a:	3201      	adds	r2, #1
 800734c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800734e:	4b03      	ldr	r3, [pc, #12]	; (800735c <pvTaskIncrementMutexHeldCount+0x24>)
 8007350:	681b      	ldr	r3, [r3, #0]
	}
 8007352:	4618      	mov	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	200013b8 	.word	0x200013b8

08007360 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800736a:	4b29      	ldr	r3, [pc, #164]	; (8007410 <prvAddCurrentTaskToDelayedList+0xb0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3304      	adds	r3, #4
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fb0a 	bl	8005990 <uxListRemove>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	2201      	movs	r2, #1
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43da      	mvns	r2, r3
 8007390:	4b21      	ldr	r3, [pc, #132]	; (8007418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4013      	ands	r3, r2
 8007396:	4a20      	ldr	r2, [pc, #128]	; (8007418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007398:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d10a      	bne.n	80073b8 <prvAddCurrentTaskToDelayedList+0x58>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a8:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	481a      	ldr	r0, [pc, #104]	; (800741c <prvAddCurrentTaskToDelayedList+0xbc>)
 80073b2:	f7fe fa92 	bl	80058da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073b6:	e026      	b.n	8007406 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d209      	bcs.n	80073e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d0:	4b13      	ldr	r3, [pc, #76]	; (8007420 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe fa9f 	bl	8005920 <vListInsert>
}
 80073e2:	e010      	b.n	8007406 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe fa95 	bl	8005920 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d202      	bcs.n	8007406 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007400:	4a09      	ldr	r2, [pc, #36]	; (8007428 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6013      	str	r3, [r2, #0]
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	200014bc 	.word	0x200014bc
 8007414:	200013b8 	.word	0x200013b8
 8007418:	200014c0 	.word	0x200014c0
 800741c:	200014a4 	.word	0x200014a4
 8007420:	20001474 	.word	0x20001474
 8007424:	20001470 	.word	0x20001470
 8007428:	200014d8 	.word	0x200014d8

0800742c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3b04      	subs	r3, #4
 800743c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3b04      	subs	r3, #4
 800744a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f023 0201 	bic.w	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3b04      	subs	r3, #4
 800745a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800745c:	4a08      	ldr	r2, [pc, #32]	; (8007480 <pxPortInitialiseStack+0x54>)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3b14      	subs	r3, #20
 8007466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3b20      	subs	r3, #32
 8007472:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr
 8007480:	08007485 	.word	0x08007485

08007484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800748e:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <prvTaskExitError+0x54>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d00a      	beq.n	80074ae <prvTaskExitError+0x2a>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60fb      	str	r3, [r7, #12]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <prvTaskExitError+0x28>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	60bb      	str	r3, [r7, #8]
}
 80074c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074c2:	bf00      	nop
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0fc      	beq.n	80074c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	20000014 	.word	0x20000014
 80074dc:	00000000 	.word	0x00000000

080074e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <pxCurrentTCBConst2>)
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	6808      	ldr	r0, [r1, #0]
 80074e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074ea:	f380 8809 	msr	PSP, r0
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8811 	msr	BASEPRI, r0
 80074fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80074fe:	4770      	bx	lr

08007500 <pxCurrentTCBConst2>:
 8007500:	200013b8 	.word	0x200013b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007508:	4806      	ldr	r0, [pc, #24]	; (8007524 <prvPortStartFirstTask+0x1c>)
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f380 8808 	msr	MSP, r0
 8007512:	b662      	cpsie	i
 8007514:	b661      	cpsie	f
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	df00      	svc	0
 8007520:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007522:	bf00      	nop
 8007524:	e000ed08 	.word	0xe000ed08

08007528 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800752e:	4b32      	ldr	r3, [pc, #200]	; (80075f8 <xPortStartScheduler+0xd0>)
 8007530:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007550:	b2da      	uxtb	r2, r3
 8007552:	4b2a      	ldr	r3, [pc, #168]	; (80075fc <xPortStartScheduler+0xd4>)
 8007554:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007556:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <xPortStartScheduler+0xd8>)
 8007558:	2207      	movs	r2, #7
 800755a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800755c:	e009      	b.n	8007572 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800755e:	4b28      	ldr	r3, [pc, #160]	; (8007600 <xPortStartScheduler+0xd8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3b01      	subs	r3, #1
 8007564:	4a26      	ldr	r2, [pc, #152]	; (8007600 <xPortStartScheduler+0xd8>)
 8007566:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	b2db      	uxtb	r3, r3
 8007570:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757a:	2b80      	cmp	r3, #128	; 0x80
 800757c:	d0ef      	beq.n	800755e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <xPortStartScheduler+0xd8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f1c3 0307 	rsb	r3, r3, #7
 8007586:	2b04      	cmp	r3, #4
 8007588:	d00a      	beq.n	80075a0 <xPortStartScheduler+0x78>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	60bb      	str	r3, [r7, #8]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <xPortStartScheduler+0xd8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	4a16      	ldr	r2, [pc, #88]	; (8007600 <xPortStartScheduler+0xd8>)
 80075a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075aa:	4b15      	ldr	r3, [pc, #84]	; (8007600 <xPortStartScheduler+0xd8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075b2:	4a13      	ldr	r2, [pc, #76]	; (8007600 <xPortStartScheduler+0xd8>)
 80075b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <xPortStartScheduler+0xdc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a10      	ldr	r2, [pc, #64]	; (8007604 <xPortStartScheduler+0xdc>)
 80075c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <xPortStartScheduler+0xdc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <xPortStartScheduler+0xdc>)
 80075d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075d6:	f000 f8b9 	bl	800774c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075da:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <xPortStartScheduler+0xe0>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075e0:	f7ff ff92 	bl	8007508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075e4:	f7ff fa7a 	bl	8006adc <vTaskSwitchContext>
	prvTaskExitError();
 80075e8:	f7ff ff4c 	bl	8007484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	e000e400 	.word	0xe000e400
 80075fc:	200014e4 	.word	0x200014e4
 8007600:	200014e8 	.word	0x200014e8
 8007604:	e000ed20 	.word	0xe000ed20
 8007608:	20000014 	.word	0x20000014

0800760c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	607b      	str	r3, [r7, #4]
}
 8007624:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <vPortEnterCritical+0x58>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	4a0d      	ldr	r2, [pc, #52]	; (8007664 <vPortEnterCritical+0x58>)
 800762e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007630:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <vPortEnterCritical+0x58>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d10f      	bne.n	8007658 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <vPortEnterCritical+0x5c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <vPortEnterCritical+0x4c>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	603b      	str	r3, [r7, #0]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <vPortEnterCritical+0x4a>
	}
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000014 	.word	0x20000014
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007672:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <vPortExitCritical+0x4c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <vPortExitCritical+0x24>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	607b      	str	r3, [r7, #4]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <vPortExitCritical+0x4c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3b01      	subs	r3, #1
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <vPortExitCritical+0x4c>)
 8007698:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <vPortExitCritical+0x4c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <vPortExitCritical+0x42>
 80076a2:	2300      	movs	r3, #0
 80076a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	20000014 	.word	0x20000014
 80076bc:	00000000 	.word	0x00000000

080076c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076c0:	f3ef 8009 	mrs	r0, PSP
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <pxCurrentTCBConst>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076d0:	6010      	str	r0, [r2, #0]
 80076d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80076d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076da:	f380 8811 	msr	BASEPRI, r0
 80076de:	f7ff f9fd 	bl	8006adc <vTaskSwitchContext>
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f380 8811 	msr	BASEPRI, r0
 80076ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	6808      	ldr	r0, [r1, #0]
 80076f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076f6:	f380 8809 	msr	PSP, r0
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	4770      	bx	lr

08007700 <pxCurrentTCBConst>:
 8007700:	200013b8 	.word	0x200013b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007722:	f7ff f91d 	bl	8006960 <xTaskIncrementTick>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <SysTick_Handler+0x40>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f383 8811 	msr	BASEPRI, r3
}
 800773e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007750:	4b0a      	ldr	r3, [pc, #40]	; (800777c <vPortSetupTimerInterrupt+0x30>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007756:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <vPortSetupTimerInterrupt+0x34>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <vPortSetupTimerInterrupt+0x38>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a09      	ldr	r2, [pc, #36]	; (8007788 <vPortSetupTimerInterrupt+0x3c>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	099b      	lsrs	r3, r3, #6
 8007768:	4a08      	ldr	r2, [pc, #32]	; (800778c <vPortSetupTimerInterrupt+0x40>)
 800776a:	3b01      	subs	r3, #1
 800776c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <vPortSetupTimerInterrupt+0x30>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr
 800777c:	e000e010 	.word	0xe000e010
 8007780:	e000e018 	.word	0xe000e018
 8007784:	20000008 	.word	0x20000008
 8007788:	10624dd3 	.word	0x10624dd3
 800778c:	e000e014 	.word	0xe000e014

08007790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	; 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800779c:	f7ff f828 	bl	80067f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077a0:	4b5b      	ldr	r3, [pc, #364]	; (8007910 <pvPortMalloc+0x180>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077a8:	f000 f916 	bl	80079d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077ac:	4b59      	ldr	r3, [pc, #356]	; (8007914 <pvPortMalloc+0x184>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 808e 	bne.w	80078d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01d      	beq.n	80077fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077c0:	2208      	movs	r2, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d014      	beq.n	80077fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f023 0307 	bic.w	r3, r3, #7
 80077d8:	3308      	adds	r3, #8
 80077da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <pvPortMalloc+0x6c>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	617b      	str	r3, [r7, #20]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d069      	beq.n	80078d6 <pvPortMalloc+0x146>
 8007802:	4b45      	ldr	r3, [pc, #276]	; (8007918 <pvPortMalloc+0x188>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d864      	bhi.n	80078d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800780c:	4b43      	ldr	r3, [pc, #268]	; (800791c <pvPortMalloc+0x18c>)
 800780e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007810:	4b42      	ldr	r3, [pc, #264]	; (800791c <pvPortMalloc+0x18c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007816:	e004      	b.n	8007822 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	429a      	cmp	r2, r3
 800782a:	d903      	bls.n	8007834 <pvPortMalloc+0xa4>
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f1      	bne.n	8007818 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <pvPortMalloc+0x180>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	429a      	cmp	r2, r3
 800783c:	d04b      	beq.n	80078d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2208      	movs	r2, #8
 8007844:	4413      	add	r3, r2
 8007846:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	1ad2      	subs	r2, r2, r3
 8007858:	2308      	movs	r3, #8
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	429a      	cmp	r2, r3
 800785e:	d91f      	bls.n	80078a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <pvPortMalloc+0xf8>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	613b      	str	r3, [r7, #16]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800789a:	69b8      	ldr	r0, [r7, #24]
 800789c:	f000 f8fe 	bl	8007a9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078a0:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <pvPortMalloc+0x188>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <pvPortMalloc+0x188>)
 80078ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078ae:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <pvPortMalloc+0x188>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <pvPortMalloc+0x190>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d203      	bcs.n	80078c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078ba:	4b17      	ldr	r3, [pc, #92]	; (8007918 <pvPortMalloc+0x188>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <pvPortMalloc+0x190>)
 80078c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4b13      	ldr	r3, [pc, #76]	; (8007914 <pvPortMalloc+0x184>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078d6:	f7fe ff99 	bl	800680c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80078e0:	f7fa f938 	bl	8001b54 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <pvPortMalloc+0x174>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60fb      	str	r3, [r7, #12]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <pvPortMalloc+0x172>
	return pvReturn;
 8007904:	69fb      	ldr	r3, [r7, #28]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3728      	adds	r7, #40	; 0x28
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20003c04 	.word	0x20003c04
 8007914:	20003c10 	.word	0x20003c10
 8007918:	20003c08 	.word	0x20003c08
 800791c:	20003bfc 	.word	0x20003bfc
 8007920:	20003c0c 	.word	0x20003c0c

08007924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d048      	beq.n	80079c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007936:	2308      	movs	r3, #8
 8007938:	425b      	negs	r3, r3
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4413      	add	r3, r2
 800793e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	4b21      	ldr	r3, [pc, #132]	; (80079d0 <vPortFree+0xac>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4013      	ands	r3, r2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <vPortFree+0x44>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60fb      	str	r3, [r7, #12]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <vPortFree+0x62>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60bb      	str	r3, [r7, #8]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <vPortFree+0xac>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4013      	ands	r3, r2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d019      	beq.n	80079c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d115      	bne.n	80079c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <vPortFree+0xac>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	43db      	mvns	r3, r3
 80079a6:	401a      	ands	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079ac:	f7fe ff20 	bl	80067f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <vPortFree+0xb0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4413      	add	r3, r2
 80079ba:	4a06      	ldr	r2, [pc, #24]	; (80079d4 <vPortFree+0xb0>)
 80079bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079be:	6938      	ldr	r0, [r7, #16]
 80079c0:	f000 f86c 	bl	8007a9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079c4:	f7fe ff22 	bl	800680c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079c8:	bf00      	nop
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20003c10 	.word	0x20003c10
 80079d4:	20003c08 	.word	0x20003c08

080079d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079de:	f242 7310 	movw	r3, #10000	; 0x2710
 80079e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079e4:	4b27      	ldr	r3, [pc, #156]	; (8007a84 <prvHeapInit+0xac>)
 80079e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00c      	beq.n	8007a0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3307      	adds	r3, #7
 80079f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	4a1f      	ldr	r2, [pc, #124]	; (8007a84 <prvHeapInit+0xac>)
 8007a08:	4413      	add	r3, r2
 8007a0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a10:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <prvHeapInit+0xb0>)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a16:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <prvHeapInit+0xb0>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4413      	add	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a24:	2208      	movs	r2, #8
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0307 	bic.w	r3, r3, #7
 8007a32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a15      	ldr	r2, [pc, #84]	; (8007a8c <prvHeapInit+0xb4>)
 8007a38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a3a:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <prvHeapInit+0xb4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a42:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <prvHeapInit+0xb4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	1ad2      	subs	r2, r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <prvHeapInit+0xb4>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4a0a      	ldr	r2, [pc, #40]	; (8007a90 <prvHeapInit+0xb8>)
 8007a66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <prvHeapInit+0xbc>)
 8007a6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <prvHeapInit+0xc0>)
 8007a72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a76:	601a      	str	r2, [r3, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	200014ec 	.word	0x200014ec
 8007a88:	20003bfc 	.word	0x20003bfc
 8007a8c:	20003c04 	.word	0x20003c04
 8007a90:	20003c0c 	.word	0x20003c0c
 8007a94:	20003c08 	.word	0x20003c08
 8007a98:	20003c10 	.word	0x20003c10

08007a9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aa4:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <prvInsertBlockIntoFreeList+0xa8>)
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e002      	b.n	8007ab0 <prvInsertBlockIntoFreeList+0x14>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d8f7      	bhi.n	8007aaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d108      	bne.n	8007ade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	441a      	add	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	441a      	add	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d118      	bne.n	8007b24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <prvInsertBlockIntoFreeList+0xac>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d00d      	beq.n	8007b1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	441a      	add	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e008      	b.n	8007b2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <prvInsertBlockIntoFreeList+0xac>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e003      	b.n	8007b2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d002      	beq.n	8007b3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bc80      	pop	{r7}
 8007b42:	4770      	bx	lr
 8007b44:	20003bfc 	.word	0x20003bfc
 8007b48:	20003c04 	.word	0x20003c04

08007b4c <calloc>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <calloc+0xc>)
 8007b4e:	460a      	mov	r2, r1
 8007b50:	4601      	mov	r1, r0
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	f000 b852 	b.w	8007bfc <_calloc_r>
 8007b58:	20000018 	.word	0x20000018

08007b5c <__errno>:
 8007b5c:	4b01      	ldr	r3, [pc, #4]	; (8007b64 <__errno+0x8>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000018 	.word	0x20000018

08007b68 <__libc_init_array>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	4d0c      	ldr	r5, [pc, #48]	; (8007ba0 <__libc_init_array+0x38>)
 8007b6e:	4c0d      	ldr	r4, [pc, #52]	; (8007ba4 <__libc_init_array+0x3c>)
 8007b70:	1b64      	subs	r4, r4, r5
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d109      	bne.n	8007b8c <__libc_init_array+0x24>
 8007b78:	f003 f846 	bl	800ac08 <_init>
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	4d0a      	ldr	r5, [pc, #40]	; (8007ba8 <__libc_init_array+0x40>)
 8007b80:	4c0a      	ldr	r4, [pc, #40]	; (8007bac <__libc_init_array+0x44>)
 8007b82:	1b64      	subs	r4, r4, r5
 8007b84:	10a4      	asrs	r4, r4, #2
 8007b86:	42a6      	cmp	r6, r4
 8007b88:	d105      	bne.n	8007b96 <__libc_init_array+0x2e>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b90:	4798      	blx	r3
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7ee      	b.n	8007b74 <__libc_init_array+0xc>
 8007b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b9a:	4798      	blx	r3
 8007b9c:	3601      	adds	r6, #1
 8007b9e:	e7f2      	b.n	8007b86 <__libc_init_array+0x1e>
 8007ba0:	0800be94 	.word	0x0800be94
 8007ba4:	0800be94 	.word	0x0800be94
 8007ba8:	0800be94 	.word	0x0800be94
 8007bac:	0800be98 	.word	0x0800be98

08007bb0 <malloc>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <malloc+0xc>)
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f000 b89d 	b.w	8007cf4 <_malloc_r>
 8007bba:	bf00      	nop
 8007bbc:	20000018 	.word	0x20000018

08007bc0 <free>:
 8007bc0:	4b02      	ldr	r3, [pc, #8]	; (8007bcc <free+0xc>)
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	f000 b82d 	b.w	8007c24 <_free_r>
 8007bca:	bf00      	nop
 8007bcc:	20000018 	.word	0x20000018

08007bd0 <memcpy>:
 8007bd0:	440a      	add	r2, r1
 8007bd2:	4291      	cmp	r1, r2
 8007bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd8:	d100      	bne.n	8007bdc <memcpy+0xc>
 8007bda:	4770      	bx	lr
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007be2:	4291      	cmp	r1, r2
 8007be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be8:	d1f9      	bne.n	8007bde <memcpy+0xe>
 8007bea:	bd10      	pop	{r4, pc}

08007bec <memset>:
 8007bec:	4603      	mov	r3, r0
 8007bee:	4402      	add	r2, r0
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d100      	bne.n	8007bf6 <memset+0xa>
 8007bf4:	4770      	bx	lr
 8007bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfa:	e7f9      	b.n	8007bf0 <memset+0x4>

08007bfc <_calloc_r>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	fba1 5402 	umull	r5, r4, r1, r2
 8007c02:	b934      	cbnz	r4, 8007c12 <_calloc_r+0x16>
 8007c04:	4629      	mov	r1, r5
 8007c06:	f000 f875 	bl	8007cf4 <_malloc_r>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <_calloc_r+0x1e>
 8007c0e:	4630      	mov	r0, r6
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	220c      	movs	r2, #12
 8007c14:	2600      	movs	r6, #0
 8007c16:	6002      	str	r2, [r0, #0]
 8007c18:	e7f9      	b.n	8007c0e <_calloc_r+0x12>
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	f7ff ffe5 	bl	8007bec <memset>
 8007c22:	e7f4      	b.n	8007c0e <_calloc_r+0x12>

08007c24 <_free_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4605      	mov	r5, r0
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d040      	beq.n	8007cae <_free_r+0x8a>
 8007c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c30:	1f0c      	subs	r4, r1, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfb8      	it	lt
 8007c36:	18e4      	addlt	r4, r4, r3
 8007c38:	f001 fce8 	bl	800960c <__malloc_lock>
 8007c3c:	4a1c      	ldr	r2, [pc, #112]	; (8007cb0 <_free_r+0x8c>)
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	b933      	cbnz	r3, 8007c50 <_free_r+0x2c>
 8007c42:	6063      	str	r3, [r4, #4]
 8007c44:	6014      	str	r4, [r2, #0]
 8007c46:	4628      	mov	r0, r5
 8007c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c4c:	f001 bce4 	b.w	8009618 <__malloc_unlock>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d908      	bls.n	8007c66 <_free_r+0x42>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	bf01      	itttt	eq
 8007c5c:	6819      	ldreq	r1, [r3, #0]
 8007c5e:	685b      	ldreq	r3, [r3, #4]
 8007c60:	1809      	addeq	r1, r1, r0
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	e7ed      	b.n	8007c42 <_free_r+0x1e>
 8007c66:	461a      	mov	r2, r3
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	b10b      	cbz	r3, 8007c70 <_free_r+0x4c>
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d9fa      	bls.n	8007c66 <_free_r+0x42>
 8007c70:	6811      	ldr	r1, [r2, #0]
 8007c72:	1850      	adds	r0, r2, r1
 8007c74:	42a0      	cmp	r0, r4
 8007c76:	d10b      	bne.n	8007c90 <_free_r+0x6c>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	1850      	adds	r0, r2, r1
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	d1e0      	bne.n	8007c46 <_free_r+0x22>
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4401      	add	r1, r0
 8007c8a:	6011      	str	r1, [r2, #0]
 8007c8c:	6053      	str	r3, [r2, #4]
 8007c8e:	e7da      	b.n	8007c46 <_free_r+0x22>
 8007c90:	d902      	bls.n	8007c98 <_free_r+0x74>
 8007c92:	230c      	movs	r3, #12
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	e7d6      	b.n	8007c46 <_free_r+0x22>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf01      	itttt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	6063      	str	r3, [r4, #4]
 8007caa:	6054      	str	r4, [r2, #4]
 8007cac:	e7cb      	b.n	8007c46 <_free_r+0x22>
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20003c14 	.word	0x20003c14

08007cb4 <sbrk_aligned>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	4e0e      	ldr	r6, [pc, #56]	; (8007cf0 <sbrk_aligned+0x3c>)
 8007cb8:	460c      	mov	r4, r1
 8007cba:	6831      	ldr	r1, [r6, #0]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	b911      	cbnz	r1, 8007cc6 <sbrk_aligned+0x12>
 8007cc0:	f000 fcec 	bl	800869c <_sbrk_r>
 8007cc4:	6030      	str	r0, [r6, #0]
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 fce7 	bl	800869c <_sbrk_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d00a      	beq.n	8007ce8 <sbrk_aligned+0x34>
 8007cd2:	1cc4      	adds	r4, r0, #3
 8007cd4:	f024 0403 	bic.w	r4, r4, #3
 8007cd8:	42a0      	cmp	r0, r4
 8007cda:	d007      	beq.n	8007cec <sbrk_aligned+0x38>
 8007cdc:	1a21      	subs	r1, r4, r0
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fcdc 	bl	800869c <_sbrk_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d101      	bne.n	8007cec <sbrk_aligned+0x38>
 8007ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	20003c18 	.word	0x20003c18

08007cf4 <_malloc_r>:
 8007cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	1ccd      	adds	r5, r1, #3
 8007cfa:	f025 0503 	bic.w	r5, r5, #3
 8007cfe:	3508      	adds	r5, #8
 8007d00:	2d0c      	cmp	r5, #12
 8007d02:	bf38      	it	cc
 8007d04:	250c      	movcc	r5, #12
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	4607      	mov	r7, r0
 8007d0a:	db01      	blt.n	8007d10 <_malloc_r+0x1c>
 8007d0c:	42a9      	cmp	r1, r5
 8007d0e:	d905      	bls.n	8007d1c <_malloc_r+0x28>
 8007d10:	230c      	movs	r3, #12
 8007d12:	2600      	movs	r6, #0
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	4630      	mov	r0, r6
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	4e2e      	ldr	r6, [pc, #184]	; (8007dd8 <_malloc_r+0xe4>)
 8007d1e:	f001 fc75 	bl	800960c <__malloc_lock>
 8007d22:	6833      	ldr	r3, [r6, #0]
 8007d24:	461c      	mov	r4, r3
 8007d26:	bb34      	cbnz	r4, 8007d76 <_malloc_r+0x82>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff ffc2 	bl	8007cb4 <sbrk_aligned>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	4604      	mov	r4, r0
 8007d34:	d14d      	bne.n	8007dd2 <_malloc_r+0xde>
 8007d36:	6834      	ldr	r4, [r6, #0]
 8007d38:	4626      	mov	r6, r4
 8007d3a:	2e00      	cmp	r6, #0
 8007d3c:	d140      	bne.n	8007dc0 <_malloc_r+0xcc>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	4631      	mov	r1, r6
 8007d42:	4638      	mov	r0, r7
 8007d44:	eb04 0803 	add.w	r8, r4, r3
 8007d48:	f000 fca8 	bl	800869c <_sbrk_r>
 8007d4c:	4580      	cmp	r8, r0
 8007d4e:	d13a      	bne.n	8007dc6 <_malloc_r+0xd2>
 8007d50:	6821      	ldr	r1, [r4, #0]
 8007d52:	3503      	adds	r5, #3
 8007d54:	1a6d      	subs	r5, r5, r1
 8007d56:	f025 0503 	bic.w	r5, r5, #3
 8007d5a:	3508      	adds	r5, #8
 8007d5c:	2d0c      	cmp	r5, #12
 8007d5e:	bf38      	it	cc
 8007d60:	250c      	movcc	r5, #12
 8007d62:	4638      	mov	r0, r7
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7ff ffa5 	bl	8007cb4 <sbrk_aligned>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d02b      	beq.n	8007dc6 <_malloc_r+0xd2>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	442b      	add	r3, r5
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	e00e      	b.n	8007d94 <_malloc_r+0xa0>
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	1b52      	subs	r2, r2, r5
 8007d7a:	d41e      	bmi.n	8007dba <_malloc_r+0xc6>
 8007d7c:	2a0b      	cmp	r2, #11
 8007d7e:	d916      	bls.n	8007dae <_malloc_r+0xba>
 8007d80:	1961      	adds	r1, r4, r5
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	6025      	str	r5, [r4, #0]
 8007d86:	bf18      	it	ne
 8007d88:	6059      	strne	r1, [r3, #4]
 8007d8a:	6863      	ldr	r3, [r4, #4]
 8007d8c:	bf08      	it	eq
 8007d8e:	6031      	streq	r1, [r6, #0]
 8007d90:	5162      	str	r2, [r4, r5]
 8007d92:	604b      	str	r3, [r1, #4]
 8007d94:	4638      	mov	r0, r7
 8007d96:	f104 060b 	add.w	r6, r4, #11
 8007d9a:	f001 fc3d 	bl	8009618 <__malloc_unlock>
 8007d9e:	f026 0607 	bic.w	r6, r6, #7
 8007da2:	1d23      	adds	r3, r4, #4
 8007da4:	1af2      	subs	r2, r6, r3
 8007da6:	d0b6      	beq.n	8007d16 <_malloc_r+0x22>
 8007da8:	1b9b      	subs	r3, r3, r6
 8007daa:	50a3      	str	r3, [r4, r2]
 8007dac:	e7b3      	b.n	8007d16 <_malloc_r+0x22>
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	bf0c      	ite	eq
 8007db4:	6032      	streq	r2, [r6, #0]
 8007db6:	605a      	strne	r2, [r3, #4]
 8007db8:	e7ec      	b.n	8007d94 <_malloc_r+0xa0>
 8007dba:	4623      	mov	r3, r4
 8007dbc:	6864      	ldr	r4, [r4, #4]
 8007dbe:	e7b2      	b.n	8007d26 <_malloc_r+0x32>
 8007dc0:	4634      	mov	r4, r6
 8007dc2:	6876      	ldr	r6, [r6, #4]
 8007dc4:	e7b9      	b.n	8007d3a <_malloc_r+0x46>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	4638      	mov	r0, r7
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	f001 fc24 	bl	8009618 <__malloc_unlock>
 8007dd0:	e7a1      	b.n	8007d16 <_malloc_r+0x22>
 8007dd2:	6025      	str	r5, [r4, #0]
 8007dd4:	e7de      	b.n	8007d94 <_malloc_r+0xa0>
 8007dd6:	bf00      	nop
 8007dd8:	20003c14 	.word	0x20003c14

08007ddc <__cvt>:
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de2:	461f      	mov	r7, r3
 8007de4:	bfbb      	ittet	lt
 8007de6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007dea:	461f      	movlt	r7, r3
 8007dec:	2300      	movge	r3, #0
 8007dee:	232d      	movlt	r3, #45	; 0x2d
 8007df0:	b088      	sub	sp, #32
 8007df2:	4614      	mov	r4, r2
 8007df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007df6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007df8:	7013      	strb	r3, [r2, #0]
 8007dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dfc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007e00:	f023 0820 	bic.w	r8, r3, #32
 8007e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e08:	d005      	beq.n	8007e16 <__cvt+0x3a>
 8007e0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e0e:	d100      	bne.n	8007e12 <__cvt+0x36>
 8007e10:	3501      	adds	r5, #1
 8007e12:	2302      	movs	r3, #2
 8007e14:	e000      	b.n	8007e18 <__cvt+0x3c>
 8007e16:	2303      	movs	r3, #3
 8007e18:	aa07      	add	r2, sp, #28
 8007e1a:	9204      	str	r2, [sp, #16]
 8007e1c:	aa06      	add	r2, sp, #24
 8007e1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007e22:	e9cd 3500 	strd	r3, r5, [sp]
 8007e26:	4622      	mov	r2, r4
 8007e28:	463b      	mov	r3, r7
 8007e2a:	f000 fcf5 	bl	8008818 <_dtoa_r>
 8007e2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e32:	4606      	mov	r6, r0
 8007e34:	d102      	bne.n	8007e3c <__cvt+0x60>
 8007e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e38:	07db      	lsls	r3, r3, #31
 8007e3a:	d522      	bpl.n	8007e82 <__cvt+0xa6>
 8007e3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e40:	eb06 0905 	add.w	r9, r6, r5
 8007e44:	d110      	bne.n	8007e68 <__cvt+0x8c>
 8007e46:	7833      	ldrb	r3, [r6, #0]
 8007e48:	2b30      	cmp	r3, #48	; 0x30
 8007e4a:	d10a      	bne.n	8007e62 <__cvt+0x86>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4620      	mov	r0, r4
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f9 f896 	bl	8000f84 <__aeabi_dcmpeq>
 8007e58:	b918      	cbnz	r0, 8007e62 <__cvt+0x86>
 8007e5a:	f1c5 0501 	rsb	r5, r5, #1
 8007e5e:	f8ca 5000 	str.w	r5, [sl]
 8007e62:	f8da 3000 	ldr.w	r3, [sl]
 8007e66:	4499      	add	r9, r3
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4639      	mov	r1, r7
 8007e70:	f7f9 f888 	bl	8000f84 <__aeabi_dcmpeq>
 8007e74:	b108      	cbz	r0, 8007e7a <__cvt+0x9e>
 8007e76:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e7a:	2230      	movs	r2, #48	; 0x30
 8007e7c:	9b07      	ldr	r3, [sp, #28]
 8007e7e:	454b      	cmp	r3, r9
 8007e80:	d307      	bcc.n	8007e92 <__cvt+0xb6>
 8007e82:	4630      	mov	r0, r6
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e88:	1b9b      	subs	r3, r3, r6
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	b008      	add	sp, #32
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	1c59      	adds	r1, r3, #1
 8007e94:	9107      	str	r1, [sp, #28]
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e7f0      	b.n	8007e7c <__cvt+0xa0>

08007e9a <__exponent>:
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e9e:	2900      	cmp	r1, #0
 8007ea0:	f803 2b02 	strb.w	r2, [r3], #2
 8007ea4:	bfb6      	itet	lt
 8007ea6:	222d      	movlt	r2, #45	; 0x2d
 8007ea8:	222b      	movge	r2, #43	; 0x2b
 8007eaa:	4249      	neglt	r1, r1
 8007eac:	2909      	cmp	r1, #9
 8007eae:	7042      	strb	r2, [r0, #1]
 8007eb0:	dd2b      	ble.n	8007f0a <__exponent+0x70>
 8007eb2:	f10d 0407 	add.w	r4, sp, #7
 8007eb6:	46a4      	mov	ip, r4
 8007eb8:	270a      	movs	r7, #10
 8007eba:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	46a6      	mov	lr, r4
 8007ec2:	fb07 1516 	mls	r5, r7, r6, r1
 8007ec6:	2a63      	cmp	r2, #99	; 0x63
 8007ec8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007ecc:	4631      	mov	r1, r6
 8007ece:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ed2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ed6:	dcf0      	bgt.n	8007eba <__exponent+0x20>
 8007ed8:	3130      	adds	r1, #48	; 0x30
 8007eda:	f1ae 0502 	sub.w	r5, lr, #2
 8007ede:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	1c44      	adds	r4, r0, #1
 8007ee6:	4561      	cmp	r1, ip
 8007ee8:	d30a      	bcc.n	8007f00 <__exponent+0x66>
 8007eea:	f10d 0209 	add.w	r2, sp, #9
 8007eee:	eba2 020e 	sub.w	r2, r2, lr
 8007ef2:	4565      	cmp	r5, ip
 8007ef4:	bf88      	it	hi
 8007ef6:	2200      	movhi	r2, #0
 8007ef8:	4413      	add	r3, r2
 8007efa:	1a18      	subs	r0, r3, r0
 8007efc:	b003      	add	sp, #12
 8007efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f08:	e7ed      	b.n	8007ee6 <__exponent+0x4c>
 8007f0a:	2330      	movs	r3, #48	; 0x30
 8007f0c:	3130      	adds	r1, #48	; 0x30
 8007f0e:	7083      	strb	r3, [r0, #2]
 8007f10:	70c1      	strb	r1, [r0, #3]
 8007f12:	1d03      	adds	r3, r0, #4
 8007f14:	e7f1      	b.n	8007efa <__exponent+0x60>
	...

08007f18 <_printf_float>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	b091      	sub	sp, #68	; 0x44
 8007f1e:	460c      	mov	r4, r1
 8007f20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007f24:	4616      	mov	r6, r2
 8007f26:	461f      	mov	r7, r3
 8007f28:	4605      	mov	r5, r0
 8007f2a:	f001 fb59 	bl	80095e0 <_localeconv_r>
 8007f2e:	6803      	ldr	r3, [r0, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	9309      	str	r3, [sp, #36]	; 0x24
 8007f34:	f7f8 fbf9 	bl	800072a <strlen>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f40:	900a      	str	r0, [sp, #40]	; 0x28
 8007f42:	3307      	adds	r3, #7
 8007f44:	f023 0307 	bic.w	r3, r3, #7
 8007f48:	f103 0208 	add.w	r2, r3, #8
 8007f4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f50:	f8d4 b000 	ldr.w	fp, [r4]
 8007f54:	f8c8 2000 	str.w	r2, [r8]
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007f64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4b9c      	ldr	r3, [pc, #624]	; (80081e4 <_printf_float+0x2cc>)
 8007f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f74:	f7f9 f838 	bl	8000fe8 <__aeabi_dcmpun>
 8007f78:	bb70      	cbnz	r0, 8007fd8 <_printf_float+0xc0>
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4b98      	ldr	r3, [pc, #608]	; (80081e4 <_printf_float+0x2cc>)
 8007f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f84:	f7f9 f812 	bl	8000fac <__aeabi_dcmple>
 8007f88:	bb30      	cbnz	r0, 8007fd8 <_printf_float+0xc0>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4651      	mov	r1, sl
 8007f92:	f7f9 f801 	bl	8000f98 <__aeabi_dcmplt>
 8007f96:	b110      	cbz	r0, 8007f9e <_printf_float+0x86>
 8007f98:	232d      	movs	r3, #45	; 0x2d
 8007f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f9e:	4b92      	ldr	r3, [pc, #584]	; (80081e8 <_printf_float+0x2d0>)
 8007fa0:	4892      	ldr	r0, [pc, #584]	; (80081ec <_printf_float+0x2d4>)
 8007fa2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007fa6:	bf94      	ite	ls
 8007fa8:	4698      	movls	r8, r3
 8007faa:	4680      	movhi	r8, r0
 8007fac:	2303      	movs	r3, #3
 8007fae:	f04f 0a00 	mov.w	sl, #0
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	f02b 0304 	bic.w	r3, fp, #4
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	4633      	mov	r3, r6
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	9700      	str	r7, [sp, #0]
 8007fc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007fc4:	f000 f9d4 	bl	8008370 <_printf_common>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f040 8090 	bne.w	80080ee <_printf_float+0x1d6>
 8007fce:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd2:	b011      	add	sp, #68	; 0x44
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	4642      	mov	r2, r8
 8007fda:	4653      	mov	r3, sl
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4651      	mov	r1, sl
 8007fe0:	f7f9 f802 	bl	8000fe8 <__aeabi_dcmpun>
 8007fe4:	b148      	cbz	r0, 8007ffa <_printf_float+0xe2>
 8007fe6:	f1ba 0f00 	cmp.w	sl, #0
 8007fea:	bfb8      	it	lt
 8007fec:	232d      	movlt	r3, #45	; 0x2d
 8007fee:	4880      	ldr	r0, [pc, #512]	; (80081f0 <_printf_float+0x2d8>)
 8007ff0:	bfb8      	it	lt
 8007ff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ff6:	4b7f      	ldr	r3, [pc, #508]	; (80081f4 <_printf_float+0x2dc>)
 8007ff8:	e7d3      	b.n	8007fa2 <_printf_float+0x8a>
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	d142      	bne.n	800808a <_printf_float+0x172>
 8008004:	2306      	movs	r3, #6
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	9206      	str	r2, [sp, #24]
 800800c:	aa0e      	add	r2, sp, #56	; 0x38
 800800e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008012:	aa0d      	add	r2, sp, #52	; 0x34
 8008014:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008018:	9203      	str	r2, [sp, #12]
 800801a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800801e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	4642      	mov	r2, r8
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4628      	mov	r0, r5
 800802c:	4653      	mov	r3, sl
 800802e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008030:	f7ff fed4 	bl	8007ddc <__cvt>
 8008034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008036:	4680      	mov	r8, r0
 8008038:	2947      	cmp	r1, #71	; 0x47
 800803a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800803c:	d108      	bne.n	8008050 <_printf_float+0x138>
 800803e:	1cc8      	adds	r0, r1, #3
 8008040:	db02      	blt.n	8008048 <_printf_float+0x130>
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	4299      	cmp	r1, r3
 8008046:	dd40      	ble.n	80080ca <_printf_float+0x1b2>
 8008048:	f1a9 0902 	sub.w	r9, r9, #2
 800804c:	fa5f f989 	uxtb.w	r9, r9
 8008050:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008054:	d81f      	bhi.n	8008096 <_printf_float+0x17e>
 8008056:	464a      	mov	r2, r9
 8008058:	3901      	subs	r1, #1
 800805a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800805e:	910d      	str	r1, [sp, #52]	; 0x34
 8008060:	f7ff ff1b 	bl	8007e9a <__exponent>
 8008064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008066:	4682      	mov	sl, r0
 8008068:	1813      	adds	r3, r2, r0
 800806a:	2a01      	cmp	r2, #1
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	dc02      	bgt.n	8008076 <_printf_float+0x15e>
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	07d2      	lsls	r2, r2, #31
 8008074:	d501      	bpl.n	800807a <_printf_float+0x162>
 8008076:	3301      	adds	r3, #1
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800807e:	2b00      	cmp	r3, #0
 8008080:	d09b      	beq.n	8007fba <_printf_float+0xa2>
 8008082:	232d      	movs	r3, #45	; 0x2d
 8008084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008088:	e797      	b.n	8007fba <_printf_float+0xa2>
 800808a:	2947      	cmp	r1, #71	; 0x47
 800808c:	d1bc      	bne.n	8008008 <_printf_float+0xf0>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1ba      	bne.n	8008008 <_printf_float+0xf0>
 8008092:	2301      	movs	r3, #1
 8008094:	e7b7      	b.n	8008006 <_printf_float+0xee>
 8008096:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800809a:	d118      	bne.n	80080ce <_printf_float+0x1b6>
 800809c:	2900      	cmp	r1, #0
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	dd0b      	ble.n	80080ba <_printf_float+0x1a2>
 80080a2:	6121      	str	r1, [r4, #16]
 80080a4:	b913      	cbnz	r3, 80080ac <_printf_float+0x194>
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	07d0      	lsls	r0, r2, #31
 80080aa:	d502      	bpl.n	80080b2 <_printf_float+0x19a>
 80080ac:	3301      	adds	r3, #1
 80080ae:	440b      	add	r3, r1
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	f04f 0a00 	mov.w	sl, #0
 80080b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80080b8:	e7df      	b.n	800807a <_printf_float+0x162>
 80080ba:	b913      	cbnz	r3, 80080c2 <_printf_float+0x1aa>
 80080bc:	6822      	ldr	r2, [r4, #0]
 80080be:	07d2      	lsls	r2, r2, #31
 80080c0:	d501      	bpl.n	80080c6 <_printf_float+0x1ae>
 80080c2:	3302      	adds	r3, #2
 80080c4:	e7f4      	b.n	80080b0 <_printf_float+0x198>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e7f2      	b.n	80080b0 <_printf_float+0x198>
 80080ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80080ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080d0:	4299      	cmp	r1, r3
 80080d2:	db05      	blt.n	80080e0 <_printf_float+0x1c8>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	6121      	str	r1, [r4, #16]
 80080d8:	07d8      	lsls	r0, r3, #31
 80080da:	d5ea      	bpl.n	80080b2 <_printf_float+0x19a>
 80080dc:	1c4b      	adds	r3, r1, #1
 80080de:	e7e7      	b.n	80080b0 <_printf_float+0x198>
 80080e0:	2900      	cmp	r1, #0
 80080e2:	bfcc      	ite	gt
 80080e4:	2201      	movgt	r2, #1
 80080e6:	f1c1 0202 	rsble	r2, r1, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	e7e0      	b.n	80080b0 <_printf_float+0x198>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	055a      	lsls	r2, r3, #21
 80080f2:	d407      	bmi.n	8008104 <_printf_float+0x1ec>
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	4642      	mov	r2, r8
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	d12b      	bne.n	800815a <_printf_float+0x242>
 8008102:	e764      	b.n	8007fce <_printf_float+0xb6>
 8008104:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008108:	f240 80dd 	bls.w	80082c6 <_printf_float+0x3ae>
 800810c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	f7f8 ff36 	bl	8000f84 <__aeabi_dcmpeq>
 8008118:	2800      	cmp	r0, #0
 800811a:	d033      	beq.n	8008184 <_printf_float+0x26c>
 800811c:	2301      	movs	r3, #1
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	4a35      	ldr	r2, [pc, #212]	; (80081f8 <_printf_float+0x2e0>)
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f af51 	beq.w	8007fce <_printf_float+0xb6>
 800812c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008130:	429a      	cmp	r2, r3
 8008132:	db02      	blt.n	800813a <_printf_float+0x222>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	07d8      	lsls	r0, r3, #31
 8008138:	d50f      	bpl.n	800815a <_printf_float+0x242>
 800813a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	f43f af42 	beq.w	8007fce <_printf_float+0xb6>
 800814a:	f04f 0800 	mov.w	r8, #0
 800814e:	f104 091a 	add.w	r9, r4, #26
 8008152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008154:	3b01      	subs	r3, #1
 8008156:	4543      	cmp	r3, r8
 8008158:	dc09      	bgt.n	800816e <_printf_float+0x256>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	079b      	lsls	r3, r3, #30
 800815e:	f100 8102 	bmi.w	8008366 <_printf_float+0x44e>
 8008162:	68e0      	ldr	r0, [r4, #12]
 8008164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008166:	4298      	cmp	r0, r3
 8008168:	bfb8      	it	lt
 800816a:	4618      	movlt	r0, r3
 800816c:	e731      	b.n	8007fd2 <_printf_float+0xba>
 800816e:	2301      	movs	r3, #1
 8008170:	464a      	mov	r2, r9
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	f43f af28 	beq.w	8007fce <_printf_float+0xb6>
 800817e:	f108 0801 	add.w	r8, r8, #1
 8008182:	e7e6      	b.n	8008152 <_printf_float+0x23a>
 8008184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008186:	2b00      	cmp	r3, #0
 8008188:	dc38      	bgt.n	80081fc <_printf_float+0x2e4>
 800818a:	2301      	movs	r3, #1
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	4a19      	ldr	r2, [pc, #100]	; (80081f8 <_printf_float+0x2e0>)
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	f43f af1a 	beq.w	8007fce <_printf_float+0xb6>
 800819a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800819e:	4313      	orrs	r3, r2
 80081a0:	d102      	bne.n	80081a8 <_printf_float+0x290>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	07d9      	lsls	r1, r3, #31
 80081a6:	d5d8      	bpl.n	800815a <_printf_float+0x242>
 80081a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f af0b 	beq.w	8007fce <_printf_float+0xb6>
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	f104 0a1a 	add.w	sl, r4, #26
 80081c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081c2:	425b      	negs	r3, r3
 80081c4:	454b      	cmp	r3, r9
 80081c6:	dc01      	bgt.n	80081cc <_printf_float+0x2b4>
 80081c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ca:	e794      	b.n	80080f6 <_printf_float+0x1de>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f aef9 	beq.w	8007fce <_printf_float+0xb6>
 80081dc:	f109 0901 	add.w	r9, r9, #1
 80081e0:	e7ee      	b.n	80081c0 <_printf_float+0x2a8>
 80081e2:	bf00      	nop
 80081e4:	7fefffff 	.word	0x7fefffff
 80081e8:	0800bac0 	.word	0x0800bac0
 80081ec:	0800bac4 	.word	0x0800bac4
 80081f0:	0800bacc 	.word	0x0800bacc
 80081f4:	0800bac8 	.word	0x0800bac8
 80081f8:	0800bad0 	.word	0x0800bad0
 80081fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008200:	429a      	cmp	r2, r3
 8008202:	bfa8      	it	ge
 8008204:	461a      	movge	r2, r3
 8008206:	2a00      	cmp	r2, #0
 8008208:	4691      	mov	r9, r2
 800820a:	dc37      	bgt.n	800827c <_printf_float+0x364>
 800820c:	f04f 0b00 	mov.w	fp, #0
 8008210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008214:	f104 021a 	add.w	r2, r4, #26
 8008218:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800821c:	ebaa 0309 	sub.w	r3, sl, r9
 8008220:	455b      	cmp	r3, fp
 8008222:	dc33      	bgt.n	800828c <_printf_float+0x374>
 8008224:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008228:	429a      	cmp	r2, r3
 800822a:	db3b      	blt.n	80082a4 <_printf_float+0x38c>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07da      	lsls	r2, r3, #31
 8008230:	d438      	bmi.n	80082a4 <_printf_float+0x38c>
 8008232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008234:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008236:	eba3 020a 	sub.w	r2, r3, sl
 800823a:	eba3 0901 	sub.w	r9, r3, r1
 800823e:	4591      	cmp	r9, r2
 8008240:	bfa8      	it	ge
 8008242:	4691      	movge	r9, r2
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	dc34      	bgt.n	80082b4 <_printf_float+0x39c>
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008252:	f104 0a1a 	add.w	sl, r4, #26
 8008256:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	eba3 0309 	sub.w	r3, r3, r9
 8008260:	4543      	cmp	r3, r8
 8008262:	f77f af7a 	ble.w	800815a <_printf_float+0x242>
 8008266:	2301      	movs	r3, #1
 8008268:	4652      	mov	r2, sl
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f aeac 	beq.w	8007fce <_printf_float+0xb6>
 8008276:	f108 0801 	add.w	r8, r8, #1
 800827a:	e7ec      	b.n	8008256 <_printf_float+0x33e>
 800827c:	4613      	mov	r3, r2
 800827e:	4631      	mov	r1, r6
 8008280:	4642      	mov	r2, r8
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	d1c0      	bne.n	800820c <_printf_float+0x2f4>
 800828a:	e6a0      	b.n	8007fce <_printf_float+0xb6>
 800828c:	2301      	movs	r3, #1
 800828e:	4631      	mov	r1, r6
 8008290:	4628      	mov	r0, r5
 8008292:	920b      	str	r2, [sp, #44]	; 0x2c
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	f43f ae99 	beq.w	8007fce <_printf_float+0xb6>
 800829c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800829e:	f10b 0b01 	add.w	fp, fp, #1
 80082a2:	e7b9      	b.n	8008218 <_printf_float+0x300>
 80082a4:	4631      	mov	r1, r6
 80082a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	d1bf      	bne.n	8008232 <_printf_float+0x31a>
 80082b2:	e68c      	b.n	8007fce <_printf_float+0xb6>
 80082b4:	464b      	mov	r3, r9
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	eb08 020a 	add.w	r2, r8, sl
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	d1c2      	bne.n	800824a <_printf_float+0x332>
 80082c4:	e683      	b.n	8007fce <_printf_float+0xb6>
 80082c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c8:	2a01      	cmp	r2, #1
 80082ca:	dc01      	bgt.n	80082d0 <_printf_float+0x3b8>
 80082cc:	07db      	lsls	r3, r3, #31
 80082ce:	d537      	bpl.n	8008340 <_printf_float+0x428>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4642      	mov	r2, r8
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	f43f ae77 	beq.w	8007fce <_printf_float+0xb6>
 80082e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f ae6f 	beq.w	8007fce <_printf_float+0xb6>
 80082f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082f4:	2200      	movs	r2, #0
 80082f6:	2300      	movs	r3, #0
 80082f8:	f7f8 fe44 	bl	8000f84 <__aeabi_dcmpeq>
 80082fc:	b9d8      	cbnz	r0, 8008336 <_printf_float+0x41e>
 80082fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008300:	f108 0201 	add.w	r2, r8, #1
 8008304:	3b01      	subs	r3, #1
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	d10e      	bne.n	800832e <_printf_float+0x416>
 8008310:	e65d      	b.n	8007fce <_printf_float+0xb6>
 8008312:	2301      	movs	r3, #1
 8008314:	464a      	mov	r2, r9
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	f43f ae56 	beq.w	8007fce <_printf_float+0xb6>
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008328:	3b01      	subs	r3, #1
 800832a:	4543      	cmp	r3, r8
 800832c:	dcf1      	bgt.n	8008312 <_printf_float+0x3fa>
 800832e:	4653      	mov	r3, sl
 8008330:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008334:	e6e0      	b.n	80080f8 <_printf_float+0x1e0>
 8008336:	f04f 0800 	mov.w	r8, #0
 800833a:	f104 091a 	add.w	r9, r4, #26
 800833e:	e7f2      	b.n	8008326 <_printf_float+0x40e>
 8008340:	2301      	movs	r3, #1
 8008342:	4642      	mov	r2, r8
 8008344:	e7df      	b.n	8008306 <_printf_float+0x3ee>
 8008346:	2301      	movs	r3, #1
 8008348:	464a      	mov	r2, r9
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f ae3c 	beq.w	8007fce <_printf_float+0xb6>
 8008356:	f108 0801 	add.w	r8, r8, #1
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800835e:	1a5b      	subs	r3, r3, r1
 8008360:	4543      	cmp	r3, r8
 8008362:	dcf0      	bgt.n	8008346 <_printf_float+0x42e>
 8008364:	e6fd      	b.n	8008162 <_printf_float+0x24a>
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	f104 0919 	add.w	r9, r4, #25
 800836e:	e7f4      	b.n	800835a <_printf_float+0x442>

08008370 <_printf_common>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	4616      	mov	r6, r2
 8008376:	4699      	mov	r9, r3
 8008378:	688a      	ldr	r2, [r1, #8]
 800837a:	690b      	ldr	r3, [r1, #16]
 800837c:	4607      	mov	r7, r0
 800837e:	4293      	cmp	r3, r2
 8008380:	bfb8      	it	lt
 8008382:	4613      	movlt	r3, r2
 8008384:	6033      	str	r3, [r6, #0]
 8008386:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800838a:	460c      	mov	r4, r1
 800838c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008390:	b10a      	cbz	r2, 8008396 <_printf_common+0x26>
 8008392:	3301      	adds	r3, #1
 8008394:	6033      	str	r3, [r6, #0]
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	0699      	lsls	r1, r3, #26
 800839a:	bf42      	ittt	mi
 800839c:	6833      	ldrmi	r3, [r6, #0]
 800839e:	3302      	addmi	r3, #2
 80083a0:	6033      	strmi	r3, [r6, #0]
 80083a2:	6825      	ldr	r5, [r4, #0]
 80083a4:	f015 0506 	ands.w	r5, r5, #6
 80083a8:	d106      	bne.n	80083b8 <_printf_common+0x48>
 80083aa:	f104 0a19 	add.w	sl, r4, #25
 80083ae:	68e3      	ldr	r3, [r4, #12]
 80083b0:	6832      	ldr	r2, [r6, #0]
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	42ab      	cmp	r3, r5
 80083b6:	dc28      	bgt.n	800840a <_printf_common+0x9a>
 80083b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083bc:	1e13      	subs	r3, r2, #0
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	bf18      	it	ne
 80083c2:	2301      	movne	r3, #1
 80083c4:	0692      	lsls	r2, r2, #26
 80083c6:	d42d      	bmi.n	8008424 <_printf_common+0xb4>
 80083c8:	4649      	mov	r1, r9
 80083ca:	4638      	mov	r0, r7
 80083cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d0:	47c0      	blx	r8
 80083d2:	3001      	adds	r0, #1
 80083d4:	d020      	beq.n	8008418 <_printf_common+0xa8>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	68e5      	ldr	r5, [r4, #12]
 80083da:	f003 0306 	and.w	r3, r3, #6
 80083de:	2b04      	cmp	r3, #4
 80083e0:	bf18      	it	ne
 80083e2:	2500      	movne	r5, #0
 80083e4:	6832      	ldr	r2, [r6, #0]
 80083e6:	f04f 0600 	mov.w	r6, #0
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	bf08      	it	eq
 80083ee:	1aad      	subeq	r5, r5, r2
 80083f0:	6922      	ldr	r2, [r4, #16]
 80083f2:	bf08      	it	eq
 80083f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f8:	4293      	cmp	r3, r2
 80083fa:	bfc4      	itt	gt
 80083fc:	1a9b      	subgt	r3, r3, r2
 80083fe:	18ed      	addgt	r5, r5, r3
 8008400:	341a      	adds	r4, #26
 8008402:	42b5      	cmp	r5, r6
 8008404:	d11a      	bne.n	800843c <_printf_common+0xcc>
 8008406:	2000      	movs	r0, #0
 8008408:	e008      	b.n	800841c <_printf_common+0xac>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4649      	mov	r1, r9
 8008410:	4638      	mov	r0, r7
 8008412:	47c0      	blx	r8
 8008414:	3001      	adds	r0, #1
 8008416:	d103      	bne.n	8008420 <_printf_common+0xb0>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	3501      	adds	r5, #1
 8008422:	e7c4      	b.n	80083ae <_printf_common+0x3e>
 8008424:	2030      	movs	r0, #48	; 0x30
 8008426:	18e1      	adds	r1, r4, r3
 8008428:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008432:	4422      	add	r2, r4
 8008434:	3302      	adds	r3, #2
 8008436:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800843a:	e7c5      	b.n	80083c8 <_printf_common+0x58>
 800843c:	2301      	movs	r3, #1
 800843e:	4622      	mov	r2, r4
 8008440:	4649      	mov	r1, r9
 8008442:	4638      	mov	r0, r7
 8008444:	47c0      	blx	r8
 8008446:	3001      	adds	r0, #1
 8008448:	d0e6      	beq.n	8008418 <_printf_common+0xa8>
 800844a:	3601      	adds	r6, #1
 800844c:	e7d9      	b.n	8008402 <_printf_common+0x92>
	...

08008450 <_printf_i>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	7e0f      	ldrb	r7, [r1, #24]
 8008456:	4691      	mov	r9, r2
 8008458:	2f78      	cmp	r7, #120	; 0x78
 800845a:	4680      	mov	r8, r0
 800845c:	460c      	mov	r4, r1
 800845e:	469a      	mov	sl, r3
 8008460:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008466:	d807      	bhi.n	8008478 <_printf_i+0x28>
 8008468:	2f62      	cmp	r7, #98	; 0x62
 800846a:	d80a      	bhi.n	8008482 <_printf_i+0x32>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f000 80d9 	beq.w	8008624 <_printf_i+0x1d4>
 8008472:	2f58      	cmp	r7, #88	; 0x58
 8008474:	f000 80a4 	beq.w	80085c0 <_printf_i+0x170>
 8008478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800847c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008480:	e03a      	b.n	80084f8 <_printf_i+0xa8>
 8008482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008486:	2b15      	cmp	r3, #21
 8008488:	d8f6      	bhi.n	8008478 <_printf_i+0x28>
 800848a:	a101      	add	r1, pc, #4	; (adr r1, 8008490 <_printf_i+0x40>)
 800848c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084fd 	.word	0x080084fd
 8008498:	08008479 	.word	0x08008479
 800849c:	08008479 	.word	0x08008479
 80084a0:	08008479 	.word	0x08008479
 80084a4:	08008479 	.word	0x08008479
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008479 	.word	0x08008479
 80084b0:	08008479 	.word	0x08008479
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	0800860b 	.word	0x0800860b
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	080085ed 	.word	0x080085ed
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	0800862d 	.word	0x0800862d
 80084d4:	08008479 	.word	0x08008479
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085f5 	.word	0x080085f5
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	602a      	str	r2, [r5, #0]
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0a4      	b.n	8008646 <_printf_i+0x1f6>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	0606      	lsls	r6, r0, #24
 8008502:	f101 0304 	add.w	r3, r1, #4
 8008506:	d50a      	bpl.n	800851e <_printf_i+0xce>
 8008508:	680e      	ldr	r6, [r1, #0]
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	2e00      	cmp	r6, #0
 800850e:	da03      	bge.n	8008518 <_printf_i+0xc8>
 8008510:	232d      	movs	r3, #45	; 0x2d
 8008512:	4276      	negs	r6, r6
 8008514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008518:	230a      	movs	r3, #10
 800851a:	485e      	ldr	r0, [pc, #376]	; (8008694 <_printf_i+0x244>)
 800851c:	e019      	b.n	8008552 <_printf_i+0x102>
 800851e:	680e      	ldr	r6, [r1, #0]
 8008520:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008524:	602b      	str	r3, [r5, #0]
 8008526:	bf18      	it	ne
 8008528:	b236      	sxthne	r6, r6
 800852a:	e7ef      	b.n	800850c <_printf_i+0xbc>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	6029      	str	r1, [r5, #0]
 8008534:	0601      	lsls	r1, r0, #24
 8008536:	d501      	bpl.n	800853c <_printf_i+0xec>
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0xf2>
 800853c:	0646      	lsls	r6, r0, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0xe8>
 8008540:	881e      	ldrh	r6, [r3, #0]
 8008542:	2f6f      	cmp	r7, #111	; 0x6f
 8008544:	bf0c      	ite	eq
 8008546:	2308      	moveq	r3, #8
 8008548:	230a      	movne	r3, #10
 800854a:	4852      	ldr	r0, [pc, #328]	; (8008694 <_printf_i+0x244>)
 800854c:	2100      	movs	r1, #0
 800854e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008552:	6865      	ldr	r5, [r4, #4]
 8008554:	2d00      	cmp	r5, #0
 8008556:	bfa8      	it	ge
 8008558:	6821      	ldrge	r1, [r4, #0]
 800855a:	60a5      	str	r5, [r4, #8]
 800855c:	bfa4      	itt	ge
 800855e:	f021 0104 	bicge.w	r1, r1, #4
 8008562:	6021      	strge	r1, [r4, #0]
 8008564:	b90e      	cbnz	r6, 800856a <_printf_i+0x11a>
 8008566:	2d00      	cmp	r5, #0
 8008568:	d04d      	beq.n	8008606 <_printf_i+0x1b6>
 800856a:	4615      	mov	r5, r2
 800856c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008570:	fb03 6711 	mls	r7, r3, r1, r6
 8008574:	5dc7      	ldrb	r7, [r0, r7]
 8008576:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800857a:	4637      	mov	r7, r6
 800857c:	42bb      	cmp	r3, r7
 800857e:	460e      	mov	r6, r1
 8008580:	d9f4      	bls.n	800856c <_printf_i+0x11c>
 8008582:	2b08      	cmp	r3, #8
 8008584:	d10b      	bne.n	800859e <_printf_i+0x14e>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	07de      	lsls	r6, r3, #31
 800858a:	d508      	bpl.n	800859e <_printf_i+0x14e>
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	6861      	ldr	r1, [r4, #4]
 8008590:	4299      	cmp	r1, r3
 8008592:	bfde      	ittt	le
 8008594:	2330      	movle	r3, #48	; 0x30
 8008596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800859a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800859e:	1b52      	subs	r2, r2, r5
 80085a0:	6122      	str	r2, [r4, #16]
 80085a2:	464b      	mov	r3, r9
 80085a4:	4621      	mov	r1, r4
 80085a6:	4640      	mov	r0, r8
 80085a8:	f8cd a000 	str.w	sl, [sp]
 80085ac:	aa03      	add	r2, sp, #12
 80085ae:	f7ff fedf 	bl	8008370 <_printf_common>
 80085b2:	3001      	adds	r0, #1
 80085b4:	d14c      	bne.n	8008650 <_printf_i+0x200>
 80085b6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ba:	b004      	add	sp, #16
 80085bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c0:	4834      	ldr	r0, [pc, #208]	; (8008694 <_printf_i+0x244>)
 80085c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085c6:	6829      	ldr	r1, [r5, #0]
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80085ce:	6029      	str	r1, [r5, #0]
 80085d0:	061d      	lsls	r5, r3, #24
 80085d2:	d514      	bpl.n	80085fe <_printf_i+0x1ae>
 80085d4:	07df      	lsls	r7, r3, #31
 80085d6:	bf44      	itt	mi
 80085d8:	f043 0320 	orrmi.w	r3, r3, #32
 80085dc:	6023      	strmi	r3, [r4, #0]
 80085de:	b91e      	cbnz	r6, 80085e8 <_printf_i+0x198>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	f023 0320 	bic.w	r3, r3, #32
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	2310      	movs	r3, #16
 80085ea:	e7af      	b.n	800854c <_printf_i+0xfc>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	f043 0320 	orr.w	r3, r3, #32
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	2378      	movs	r3, #120	; 0x78
 80085f6:	4828      	ldr	r0, [pc, #160]	; (8008698 <_printf_i+0x248>)
 80085f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085fc:	e7e3      	b.n	80085c6 <_printf_i+0x176>
 80085fe:	0659      	lsls	r1, r3, #25
 8008600:	bf48      	it	mi
 8008602:	b2b6      	uxthmi	r6, r6
 8008604:	e7e6      	b.n	80085d4 <_printf_i+0x184>
 8008606:	4615      	mov	r5, r2
 8008608:	e7bb      	b.n	8008582 <_printf_i+0x132>
 800860a:	682b      	ldr	r3, [r5, #0]
 800860c:	6826      	ldr	r6, [r4, #0]
 800860e:	1d18      	adds	r0, r3, #4
 8008610:	6961      	ldr	r1, [r4, #20]
 8008612:	6028      	str	r0, [r5, #0]
 8008614:	0635      	lsls	r5, r6, #24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	d501      	bpl.n	800861e <_printf_i+0x1ce>
 800861a:	6019      	str	r1, [r3, #0]
 800861c:	e002      	b.n	8008624 <_printf_i+0x1d4>
 800861e:	0670      	lsls	r0, r6, #25
 8008620:	d5fb      	bpl.n	800861a <_printf_i+0x1ca>
 8008622:	8019      	strh	r1, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	4615      	mov	r5, r2
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	e7ba      	b.n	80085a2 <_printf_i+0x152>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	2100      	movs	r1, #0
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	681d      	ldr	r5, [r3, #0]
 8008636:	6862      	ldr	r2, [r4, #4]
 8008638:	4628      	mov	r0, r5
 800863a:	f000 ffd8 	bl	80095ee <memchr>
 800863e:	b108      	cbz	r0, 8008644 <_printf_i+0x1f4>
 8008640:	1b40      	subs	r0, r0, r5
 8008642:	6060      	str	r0, [r4, #4]
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	2300      	movs	r3, #0
 800864a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864e:	e7a8      	b.n	80085a2 <_printf_i+0x152>
 8008650:	462a      	mov	r2, r5
 8008652:	4649      	mov	r1, r9
 8008654:	4640      	mov	r0, r8
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	47d0      	blx	sl
 800865a:	3001      	adds	r0, #1
 800865c:	d0ab      	beq.n	80085b6 <_printf_i+0x166>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	079b      	lsls	r3, r3, #30
 8008662:	d413      	bmi.n	800868c <_printf_i+0x23c>
 8008664:	68e0      	ldr	r0, [r4, #12]
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	4298      	cmp	r0, r3
 800866a:	bfb8      	it	lt
 800866c:	4618      	movlt	r0, r3
 800866e:	e7a4      	b.n	80085ba <_printf_i+0x16a>
 8008670:	2301      	movs	r3, #1
 8008672:	4632      	mov	r2, r6
 8008674:	4649      	mov	r1, r9
 8008676:	4640      	mov	r0, r8
 8008678:	47d0      	blx	sl
 800867a:	3001      	adds	r0, #1
 800867c:	d09b      	beq.n	80085b6 <_printf_i+0x166>
 800867e:	3501      	adds	r5, #1
 8008680:	68e3      	ldr	r3, [r4, #12]
 8008682:	9903      	ldr	r1, [sp, #12]
 8008684:	1a5b      	subs	r3, r3, r1
 8008686:	42ab      	cmp	r3, r5
 8008688:	dcf2      	bgt.n	8008670 <_printf_i+0x220>
 800868a:	e7eb      	b.n	8008664 <_printf_i+0x214>
 800868c:	2500      	movs	r5, #0
 800868e:	f104 0619 	add.w	r6, r4, #25
 8008692:	e7f5      	b.n	8008680 <_printf_i+0x230>
 8008694:	0800bad2 	.word	0x0800bad2
 8008698:	0800bae3 	.word	0x0800bae3

0800869c <_sbrk_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	2300      	movs	r3, #0
 80086a0:	4d05      	ldr	r5, [pc, #20]	; (80086b8 <_sbrk_r+0x1c>)
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	f7fa f976 	bl	8002998 <_sbrk>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_sbrk_r+0x1a>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_sbrk_r+0x1a>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	20003c20 	.word	0x20003c20

080086bc <siprintf>:
 80086bc:	b40e      	push	{r1, r2, r3}
 80086be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c2:	b500      	push	{lr}
 80086c4:	b09c      	sub	sp, #112	; 0x70
 80086c6:	ab1d      	add	r3, sp, #116	; 0x74
 80086c8:	9002      	str	r0, [sp, #8]
 80086ca:	9006      	str	r0, [sp, #24]
 80086cc:	9107      	str	r1, [sp, #28]
 80086ce:	9104      	str	r1, [sp, #16]
 80086d0:	4808      	ldr	r0, [pc, #32]	; (80086f4 <siprintf+0x38>)
 80086d2:	4909      	ldr	r1, [pc, #36]	; (80086f8 <siprintf+0x3c>)
 80086d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d8:	9105      	str	r1, [sp, #20]
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	a902      	add	r1, sp, #8
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	f001 fb7e 	bl	8009de0 <_svfiprintf_r>
 80086e4:	2200      	movs	r2, #0
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	b01c      	add	sp, #112	; 0x70
 80086ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80086f0:	b003      	add	sp, #12
 80086f2:	4770      	bx	lr
 80086f4:	20000018 	.word	0x20000018
 80086f8:	ffff0208 	.word	0xffff0208

080086fc <quorem>:
 80086fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	6903      	ldr	r3, [r0, #16]
 8008702:	690c      	ldr	r4, [r1, #16]
 8008704:	4607      	mov	r7, r0
 8008706:	42a3      	cmp	r3, r4
 8008708:	f2c0 8082 	blt.w	8008810 <quorem+0x114>
 800870c:	3c01      	subs	r4, #1
 800870e:	f100 0514 	add.w	r5, r0, #20
 8008712:	f101 0814 	add.w	r8, r1, #20
 8008716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008720:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008724:	3301      	adds	r3, #1
 8008726:	429a      	cmp	r2, r3
 8008728:	fbb2 f6f3 	udiv	r6, r2, r3
 800872c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008734:	d331      	bcc.n	800879a <quorem+0x9e>
 8008736:	f04f 0e00 	mov.w	lr, #0
 800873a:	4640      	mov	r0, r8
 800873c:	46ac      	mov	ip, r5
 800873e:	46f2      	mov	sl, lr
 8008740:	f850 2b04 	ldr.w	r2, [r0], #4
 8008744:	b293      	uxth	r3, r2
 8008746:	fb06 e303 	mla	r3, r6, r3, lr
 800874a:	0c12      	lsrs	r2, r2, #16
 800874c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008750:	b29b      	uxth	r3, r3
 8008752:	fb06 e202 	mla	r2, r6, r2, lr
 8008756:	ebaa 0303 	sub.w	r3, sl, r3
 800875a:	f8dc a000 	ldr.w	sl, [ip]
 800875e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008762:	fa1f fa8a 	uxth.w	sl, sl
 8008766:	4453      	add	r3, sl
 8008768:	f8dc a000 	ldr.w	sl, [ip]
 800876c:	b292      	uxth	r2, r2
 800876e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008772:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008776:	b29b      	uxth	r3, r3
 8008778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800877c:	4581      	cmp	r9, r0
 800877e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008782:	f84c 3b04 	str.w	r3, [ip], #4
 8008786:	d2db      	bcs.n	8008740 <quorem+0x44>
 8008788:	f855 300b 	ldr.w	r3, [r5, fp]
 800878c:	b92b      	cbnz	r3, 800879a <quorem+0x9e>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	3b04      	subs	r3, #4
 8008792:	429d      	cmp	r5, r3
 8008794:	461a      	mov	r2, r3
 8008796:	d32f      	bcc.n	80087f8 <quorem+0xfc>
 8008798:	613c      	str	r4, [r7, #16]
 800879a:	4638      	mov	r0, r7
 800879c:	f001 f9c0 	bl	8009b20 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	db25      	blt.n	80087f0 <quorem+0xf4>
 80087a4:	4628      	mov	r0, r5
 80087a6:	f04f 0c00 	mov.w	ip, #0
 80087aa:	3601      	adds	r6, #1
 80087ac:	f858 1b04 	ldr.w	r1, [r8], #4
 80087b0:	f8d0 e000 	ldr.w	lr, [r0]
 80087b4:	b28b      	uxth	r3, r1
 80087b6:	ebac 0303 	sub.w	r3, ip, r3
 80087ba:	fa1f f28e 	uxth.w	r2, lr
 80087be:	4413      	add	r3, r2
 80087c0:	0c0a      	lsrs	r2, r1, #16
 80087c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d0:	45c1      	cmp	r9, r8
 80087d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087d6:	f840 3b04 	str.w	r3, [r0], #4
 80087da:	d2e7      	bcs.n	80087ac <quorem+0xb0>
 80087dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087e4:	b922      	cbnz	r2, 80087f0 <quorem+0xf4>
 80087e6:	3b04      	subs	r3, #4
 80087e8:	429d      	cmp	r5, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	d30a      	bcc.n	8008804 <quorem+0x108>
 80087ee:	613c      	str	r4, [r7, #16]
 80087f0:	4630      	mov	r0, r6
 80087f2:	b003      	add	sp, #12
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	3b04      	subs	r3, #4
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	d1cb      	bne.n	8008798 <quorem+0x9c>
 8008800:	3c01      	subs	r4, #1
 8008802:	e7c6      	b.n	8008792 <quorem+0x96>
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	3b04      	subs	r3, #4
 8008808:	2a00      	cmp	r2, #0
 800880a:	d1f0      	bne.n	80087ee <quorem+0xf2>
 800880c:	3c01      	subs	r4, #1
 800880e:	e7eb      	b.n	80087e8 <quorem+0xec>
 8008810:	2000      	movs	r0, #0
 8008812:	e7ee      	b.n	80087f2 <quorem+0xf6>
 8008814:	0000      	movs	r0, r0
	...

08008818 <_dtoa_r>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	4616      	mov	r6, r2
 800881e:	461f      	mov	r7, r3
 8008820:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008822:	b099      	sub	sp, #100	; 0x64
 8008824:	4605      	mov	r5, r0
 8008826:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800882a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800882e:	b974      	cbnz	r4, 800884e <_dtoa_r+0x36>
 8008830:	2010      	movs	r0, #16
 8008832:	f7ff f9bd 	bl	8007bb0 <malloc>
 8008836:	4602      	mov	r2, r0
 8008838:	6268      	str	r0, [r5, #36]	; 0x24
 800883a:	b920      	cbnz	r0, 8008846 <_dtoa_r+0x2e>
 800883c:	21ea      	movs	r1, #234	; 0xea
 800883e:	4ba8      	ldr	r3, [pc, #672]	; (8008ae0 <_dtoa_r+0x2c8>)
 8008840:	48a8      	ldr	r0, [pc, #672]	; (8008ae4 <_dtoa_r+0x2cc>)
 8008842:	f001 fe3b 	bl	800a4bc <__assert_func>
 8008846:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800884a:	6004      	str	r4, [r0, #0]
 800884c:	60c4      	str	r4, [r0, #12]
 800884e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008850:	6819      	ldr	r1, [r3, #0]
 8008852:	b151      	cbz	r1, 800886a <_dtoa_r+0x52>
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	2301      	movs	r3, #1
 8008858:	4093      	lsls	r3, r2
 800885a:	604a      	str	r2, [r1, #4]
 800885c:	608b      	str	r3, [r1, #8]
 800885e:	4628      	mov	r0, r5
 8008860:	f000 ff20 	bl	80096a4 <_Bfree>
 8008864:	2200      	movs	r2, #0
 8008866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	1e3b      	subs	r3, r7, #0
 800886c:	bfaf      	iteee	ge
 800886e:	2300      	movge	r3, #0
 8008870:	2201      	movlt	r2, #1
 8008872:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008876:	9305      	strlt	r3, [sp, #20]
 8008878:	bfa8      	it	ge
 800887a:	f8c8 3000 	strge.w	r3, [r8]
 800887e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008882:	4b99      	ldr	r3, [pc, #612]	; (8008ae8 <_dtoa_r+0x2d0>)
 8008884:	bfb8      	it	lt
 8008886:	f8c8 2000 	strlt.w	r2, [r8]
 800888a:	ea33 0309 	bics.w	r3, r3, r9
 800888e:	d119      	bne.n	80088c4 <_dtoa_r+0xac>
 8008890:	f242 730f 	movw	r3, #9999	; 0x270f
 8008894:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800889c:	4333      	orrs	r3, r6
 800889e:	f000 857f 	beq.w	80093a0 <_dtoa_r+0xb88>
 80088a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088a4:	b953      	cbnz	r3, 80088bc <_dtoa_r+0xa4>
 80088a6:	4b91      	ldr	r3, [pc, #580]	; (8008aec <_dtoa_r+0x2d4>)
 80088a8:	e022      	b.n	80088f0 <_dtoa_r+0xd8>
 80088aa:	4b91      	ldr	r3, [pc, #580]	; (8008af0 <_dtoa_r+0x2d8>)
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	3308      	adds	r3, #8
 80088b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	9803      	ldr	r0, [sp, #12]
 80088b6:	b019      	add	sp, #100	; 0x64
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	4b8b      	ldr	r3, [pc, #556]	; (8008aec <_dtoa_r+0x2d4>)
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	3303      	adds	r3, #3
 80088c2:	e7f5      	b.n	80088b0 <_dtoa_r+0x98>
 80088c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80088cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	f7f8 fb56 	bl	8000f84 <__aeabi_dcmpeq>
 80088d8:	4680      	mov	r8, r0
 80088da:	b158      	cbz	r0, 80088f4 <_dtoa_r+0xdc>
 80088dc:	2301      	movs	r3, #1
 80088de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8558 	beq.w	800939a <_dtoa_r+0xb82>
 80088ea:	4882      	ldr	r0, [pc, #520]	; (8008af4 <_dtoa_r+0x2dc>)
 80088ec:	6018      	str	r0, [r3, #0]
 80088ee:	1e43      	subs	r3, r0, #1
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	e7df      	b.n	80088b4 <_dtoa_r+0x9c>
 80088f4:	ab16      	add	r3, sp, #88	; 0x58
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	ab17      	add	r3, sp, #92	; 0x5c
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4628      	mov	r0, r5
 80088fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008902:	f001 f9b5 	bl	8009c70 <__d2b>
 8008906:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800890a:	4683      	mov	fp, r0
 800890c:	2c00      	cmp	r4, #0
 800890e:	d07f      	beq.n	8008a10 <_dtoa_r+0x1f8>
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008916:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800891a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800891e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008922:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008926:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800892a:	2200      	movs	r2, #0
 800892c:	4b72      	ldr	r3, [pc, #456]	; (8008af8 <_dtoa_r+0x2e0>)
 800892e:	f7f7 ff09 	bl	8000744 <__aeabi_dsub>
 8008932:	a365      	add	r3, pc, #404	; (adr r3, 8008ac8 <_dtoa_r+0x2b0>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f8 f8bc 	bl	8000ab4 <__aeabi_dmul>
 800893c:	a364      	add	r3, pc, #400	; (adr r3, 8008ad0 <_dtoa_r+0x2b8>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 ff01 	bl	8000748 <__adddf3>
 8008946:	4606      	mov	r6, r0
 8008948:	4620      	mov	r0, r4
 800894a:	460f      	mov	r7, r1
 800894c:	f7f8 f848 	bl	80009e0 <__aeabi_i2d>
 8008950:	a361      	add	r3, pc, #388	; (adr r3, 8008ad8 <_dtoa_r+0x2c0>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f8 f8ad 	bl	8000ab4 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4630      	mov	r0, r6
 8008960:	4639      	mov	r1, r7
 8008962:	f7f7 fef1 	bl	8000748 <__adddf3>
 8008966:	4606      	mov	r6, r0
 8008968:	460f      	mov	r7, r1
 800896a:	f7f8 fb53 	bl	8001014 <__aeabi_d2iz>
 800896e:	2200      	movs	r2, #0
 8008970:	4682      	mov	sl, r0
 8008972:	2300      	movs	r3, #0
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 fb0e 	bl	8000f98 <__aeabi_dcmplt>
 800897c:	b148      	cbz	r0, 8008992 <_dtoa_r+0x17a>
 800897e:	4650      	mov	r0, sl
 8008980:	f7f8 f82e 	bl	80009e0 <__aeabi_i2d>
 8008984:	4632      	mov	r2, r6
 8008986:	463b      	mov	r3, r7
 8008988:	f7f8 fafc 	bl	8000f84 <__aeabi_dcmpeq>
 800898c:	b908      	cbnz	r0, 8008992 <_dtoa_r+0x17a>
 800898e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008992:	f1ba 0f16 	cmp.w	sl, #22
 8008996:	d858      	bhi.n	8008a4a <_dtoa_r+0x232>
 8008998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800899c:	4b57      	ldr	r3, [pc, #348]	; (8008afc <_dtoa_r+0x2e4>)
 800899e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f8 faf7 	bl	8000f98 <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d04f      	beq.n	8008a4e <_dtoa_r+0x236>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089b8:	1b1c      	subs	r4, r3, r4
 80089ba:	1e63      	subs	r3, r4, #1
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	bf49      	itett	mi
 80089c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80089c4:	2300      	movpl	r3, #0
 80089c6:	9306      	strmi	r3, [sp, #24]
 80089c8:	2300      	movmi	r3, #0
 80089ca:	bf54      	ite	pl
 80089cc:	9306      	strpl	r3, [sp, #24]
 80089ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80089d0:	f1ba 0f00 	cmp.w	sl, #0
 80089d4:	db3d      	blt.n	8008a52 <_dtoa_r+0x23a>
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089dc:	4453      	add	r3, sl
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	2300      	movs	r3, #0
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	f200 808c 	bhi.w	8008b04 <_dtoa_r+0x2ec>
 80089ec:	2b05      	cmp	r3, #5
 80089ee:	bfc4      	itt	gt
 80089f0:	3b04      	subgt	r3, #4
 80089f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80089f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089f6:	bfc8      	it	gt
 80089f8:	2400      	movgt	r4, #0
 80089fa:	f1a3 0302 	sub.w	r3, r3, #2
 80089fe:	bfd8      	it	le
 8008a00:	2401      	movle	r4, #1
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	f200 808a 	bhi.w	8008b1c <_dtoa_r+0x304>
 8008a08:	e8df f003 	tbb	[pc, r3]
 8008a0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008a10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008a14:	441c      	add	r4, r3
 8008a16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	bfc3      	ittte	gt
 8008a1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008a26:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a2a:	f1c3 0320 	rsble	r3, r3, #32
 8008a2e:	bfc6      	itte	gt
 8008a30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a34:	4318      	orrgt	r0, r3
 8008a36:	fa06 f003 	lslle.w	r0, r6, r3
 8008a3a:	f7f7 ffc1 	bl	80009c0 <__aeabi_ui2d>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a44:	3c01      	subs	r4, #1
 8008a46:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a48:	e76f      	b.n	800892a <_dtoa_r+0x112>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e7b2      	b.n	80089b4 <_dtoa_r+0x19c>
 8008a4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a50:	e7b1      	b.n	80089b6 <_dtoa_r+0x19e>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	eba3 030a 	sub.w	r3, r3, sl
 8008a58:	9306      	str	r3, [sp, #24]
 8008a5a:	f1ca 0300 	rsb	r3, sl, #0
 8008a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a60:	2300      	movs	r3, #0
 8008a62:	930e      	str	r3, [sp, #56]	; 0x38
 8008a64:	e7be      	b.n	80089e4 <_dtoa_r+0x1cc>
 8008a66:	2300      	movs	r3, #0
 8008a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dc58      	bgt.n	8008b22 <_dtoa_r+0x30a>
 8008a70:	f04f 0901 	mov.w	r9, #1
 8008a74:	464b      	mov	r3, r9
 8008a76:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008a7e:	2200      	movs	r2, #0
 8008a80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008a82:	6042      	str	r2, [r0, #4]
 8008a84:	2204      	movs	r2, #4
 8008a86:	f102 0614 	add.w	r6, r2, #20
 8008a8a:	429e      	cmp	r6, r3
 8008a8c:	6841      	ldr	r1, [r0, #4]
 8008a8e:	d94e      	bls.n	8008b2e <_dtoa_r+0x316>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 fdc7 	bl	8009624 <_Balloc>
 8008a96:	9003      	str	r0, [sp, #12]
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d14c      	bne.n	8008b36 <_dtoa_r+0x31e>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <_dtoa_r+0x2e8>)
 8008aa4:	e6cc      	b.n	8008840 <_dtoa_r+0x28>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e7de      	b.n	8008a68 <_dtoa_r+0x250>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ab0:	eb0a 0903 	add.w	r9, sl, r3
 8008ab4:	f109 0301 	add.w	r3, r9, #1
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	9308      	str	r3, [sp, #32]
 8008abc:	bfb8      	it	lt
 8008abe:	2301      	movlt	r3, #1
 8008ac0:	e7dd      	b.n	8008a7e <_dtoa_r+0x266>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7f2      	b.n	8008aac <_dtoa_r+0x294>
 8008ac6:	bf00      	nop
 8008ac8:	636f4361 	.word	0x636f4361
 8008acc:	3fd287a7 	.word	0x3fd287a7
 8008ad0:	8b60c8b3 	.word	0x8b60c8b3
 8008ad4:	3fc68a28 	.word	0x3fc68a28
 8008ad8:	509f79fb 	.word	0x509f79fb
 8008adc:	3fd34413 	.word	0x3fd34413
 8008ae0:	0800bb01 	.word	0x0800bb01
 8008ae4:	0800bb18 	.word	0x0800bb18
 8008ae8:	7ff00000 	.word	0x7ff00000
 8008aec:	0800bafd 	.word	0x0800bafd
 8008af0:	0800baf4 	.word	0x0800baf4
 8008af4:	0800bad1 	.word	0x0800bad1
 8008af8:	3ff80000 	.word	0x3ff80000
 8008afc:	0800bc68 	.word	0x0800bc68
 8008b00:	0800bb73 	.word	0x0800bb73
 8008b04:	2401      	movs	r4, #1
 8008b06:	2300      	movs	r3, #0
 8008b08:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b0a:	9322      	str	r3, [sp, #136]	; 0x88
 8008b0c:	f04f 39ff 	mov.w	r9, #4294967295
 8008b10:	2200      	movs	r2, #0
 8008b12:	2312      	movs	r3, #18
 8008b14:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b18:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b1a:	e7b0      	b.n	8008a7e <_dtoa_r+0x266>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b20:	e7f4      	b.n	8008b0c <_dtoa_r+0x2f4>
 8008b22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008b26:	464b      	mov	r3, r9
 8008b28:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b2c:	e7a7      	b.n	8008a7e <_dtoa_r+0x266>
 8008b2e:	3101      	adds	r1, #1
 8008b30:	6041      	str	r1, [r0, #4]
 8008b32:	0052      	lsls	r2, r2, #1
 8008b34:	e7a7      	b.n	8008a86 <_dtoa_r+0x26e>
 8008b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b38:	9a03      	ldr	r2, [sp, #12]
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	9b08      	ldr	r3, [sp, #32]
 8008b3e:	2b0e      	cmp	r3, #14
 8008b40:	f200 80a8 	bhi.w	8008c94 <_dtoa_r+0x47c>
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	f000 80a5 	beq.w	8008c94 <_dtoa_r+0x47c>
 8008b4a:	f1ba 0f00 	cmp.w	sl, #0
 8008b4e:	dd34      	ble.n	8008bba <_dtoa_r+0x3a2>
 8008b50:	4a9a      	ldr	r2, [pc, #616]	; (8008dbc <_dtoa_r+0x5a4>)
 8008b52:	f00a 030f 	and.w	r3, sl, #15
 8008b56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b66:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008b6a:	d016      	beq.n	8008b9a <_dtoa_r+0x382>
 8008b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b70:	4b93      	ldr	r3, [pc, #588]	; (8008dc0 <_dtoa_r+0x5a8>)
 8008b72:	2703      	movs	r7, #3
 8008b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b78:	f7f8 f8c6 	bl	8000d08 <__aeabi_ddiv>
 8008b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b80:	f004 040f 	and.w	r4, r4, #15
 8008b84:	4e8e      	ldr	r6, [pc, #568]	; (8008dc0 <_dtoa_r+0x5a8>)
 8008b86:	b954      	cbnz	r4, 8008b9e <_dtoa_r+0x386>
 8008b88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	f7f8 f8ba 	bl	8000d08 <__aeabi_ddiv>
 8008b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b98:	e029      	b.n	8008bee <_dtoa_r+0x3d6>
 8008b9a:	2702      	movs	r7, #2
 8008b9c:	e7f2      	b.n	8008b84 <_dtoa_r+0x36c>
 8008b9e:	07e1      	lsls	r1, r4, #31
 8008ba0:	d508      	bpl.n	8008bb4 <_dtoa_r+0x39c>
 8008ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ba6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008baa:	f7f7 ff83 	bl	8000ab4 <__aeabi_dmul>
 8008bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008bb2:	3701      	adds	r7, #1
 8008bb4:	1064      	asrs	r4, r4, #1
 8008bb6:	3608      	adds	r6, #8
 8008bb8:	e7e5      	b.n	8008b86 <_dtoa_r+0x36e>
 8008bba:	f000 80a5 	beq.w	8008d08 <_dtoa_r+0x4f0>
 8008bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc2:	f1ca 0400 	rsb	r4, sl, #0
 8008bc6:	4b7d      	ldr	r3, [pc, #500]	; (8008dbc <_dtoa_r+0x5a4>)
 8008bc8:	f004 020f 	and.w	r2, r4, #15
 8008bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 ff6e 	bl	8000ab4 <__aeabi_dmul>
 8008bd8:	2702      	movs	r7, #2
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008be0:	4e77      	ldr	r6, [pc, #476]	; (8008dc0 <_dtoa_r+0x5a8>)
 8008be2:	1124      	asrs	r4, r4, #4
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	f040 8084 	bne.w	8008cf2 <_dtoa_r+0x4da>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1d2      	bne.n	8008b94 <_dtoa_r+0x37c>
 8008bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 808b 	beq.w	8008d0c <_dtoa_r+0x4f4>
 8008bf6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008bfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c02:	2200      	movs	r2, #0
 8008c04:	4b6f      	ldr	r3, [pc, #444]	; (8008dc4 <_dtoa_r+0x5ac>)
 8008c06:	f7f8 f9c7 	bl	8000f98 <__aeabi_dcmplt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d07e      	beq.n	8008d0c <_dtoa_r+0x4f4>
 8008c0e:	9b08      	ldr	r3, [sp, #32]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d07b      	beq.n	8008d0c <_dtoa_r+0x4f4>
 8008c14:	f1b9 0f00 	cmp.w	r9, #0
 8008c18:	dd38      	ble.n	8008c8c <_dtoa_r+0x474>
 8008c1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4b69      	ldr	r3, [pc, #420]	; (8008dc8 <_dtoa_r+0x5b0>)
 8008c22:	f7f7 ff47 	bl	8000ab4 <__aeabi_dmul>
 8008c26:	464c      	mov	r4, r9
 8008c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008c30:	3701      	adds	r7, #1
 8008c32:	4638      	mov	r0, r7
 8008c34:	f7f7 fed4 	bl	80009e0 <__aeabi_i2d>
 8008c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3c:	f7f7 ff3a 	bl	8000ab4 <__aeabi_dmul>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b62      	ldr	r3, [pc, #392]	; (8008dcc <_dtoa_r+0x5b4>)
 8008c44:	f7f7 fd80 	bl	8000748 <__adddf3>
 8008c48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c50:	9611      	str	r6, [sp, #68]	; 0x44
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d15d      	bne.n	8008d12 <_dtoa_r+0x4fa>
 8008c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4b5c      	ldr	r3, [pc, #368]	; (8008dd0 <_dtoa_r+0x5b8>)
 8008c5e:	f7f7 fd71 	bl	8000744 <__aeabi_dsub>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c6a:	4633      	mov	r3, r6
 8008c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c6e:	f7f8 f9b1 	bl	8000fd4 <__aeabi_dcmpgt>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f040 829c 	bne.w	80091b0 <_dtoa_r+0x998>
 8008c78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c82:	f7f8 f989 	bl	8000f98 <__aeabi_dcmplt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f040 8290 	bne.w	80091ac <_dtoa_r+0x994>
 8008c8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008c90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f2c0 8152 	blt.w	8008f40 <_dtoa_r+0x728>
 8008c9c:	f1ba 0f0e 	cmp.w	sl, #14
 8008ca0:	f300 814e 	bgt.w	8008f40 <_dtoa_r+0x728>
 8008ca4:	4b45      	ldr	r3, [pc, #276]	; (8008dbc <_dtoa_r+0x5a4>)
 8008ca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008caa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f280 80db 	bge.w	8008e70 <_dtoa_r+0x658>
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f300 80d7 	bgt.w	8008e70 <_dtoa_r+0x658>
 8008cc2:	f040 8272 	bne.w	80091aa <_dtoa_r+0x992>
 8008cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4b40      	ldr	r3, [pc, #256]	; (8008dd0 <_dtoa_r+0x5b8>)
 8008cce:	f7f7 fef1 	bl	8000ab4 <__aeabi_dmul>
 8008cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd6:	f7f8 f973 	bl	8000fc0 <__aeabi_dcmpge>
 8008cda:	9c08      	ldr	r4, [sp, #32]
 8008cdc:	4626      	mov	r6, r4
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f040 8248 	bne.w	8009174 <_dtoa_r+0x95c>
 8008ce4:	2331      	movs	r3, #49	; 0x31
 8008ce6:	9f03      	ldr	r7, [sp, #12]
 8008ce8:	f10a 0a01 	add.w	sl, sl, #1
 8008cec:	f807 3b01 	strb.w	r3, [r7], #1
 8008cf0:	e244      	b.n	800917c <_dtoa_r+0x964>
 8008cf2:	07e2      	lsls	r2, r4, #31
 8008cf4:	d505      	bpl.n	8008d02 <_dtoa_r+0x4ea>
 8008cf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cfa:	f7f7 fedb 	bl	8000ab4 <__aeabi_dmul>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	3701      	adds	r7, #1
 8008d02:	1064      	asrs	r4, r4, #1
 8008d04:	3608      	adds	r6, #8
 8008d06:	e76d      	b.n	8008be4 <_dtoa_r+0x3cc>
 8008d08:	2702      	movs	r7, #2
 8008d0a:	e770      	b.n	8008bee <_dtoa_r+0x3d6>
 8008d0c:	46d0      	mov	r8, sl
 8008d0e:	9c08      	ldr	r4, [sp, #32]
 8008d10:	e78f      	b.n	8008c32 <_dtoa_r+0x41a>
 8008d12:	9903      	ldr	r1, [sp, #12]
 8008d14:	4b29      	ldr	r3, [pc, #164]	; (8008dbc <_dtoa_r+0x5a4>)
 8008d16:	4421      	add	r1, r4
 8008d18:	9112      	str	r1, [sp, #72]	; 0x48
 8008d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008d24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d055      	beq.n	8008dd8 <_dtoa_r+0x5c0>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	4929      	ldr	r1, [pc, #164]	; (8008dd4 <_dtoa_r+0x5bc>)
 8008d30:	f7f7 ffea 	bl	8000d08 <__aeabi_ddiv>
 8008d34:	463b      	mov	r3, r7
 8008d36:	4632      	mov	r2, r6
 8008d38:	f7f7 fd04 	bl	8000744 <__aeabi_dsub>
 8008d3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d40:	9f03      	ldr	r7, [sp, #12]
 8008d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d46:	f7f8 f965 	bl	8001014 <__aeabi_d2iz>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	f7f7 fe48 	bl	80009e0 <__aeabi_i2d>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d58:	f7f7 fcf4 	bl	8000744 <__aeabi_dsub>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	3430      	adds	r4, #48	; 0x30
 8008d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d6a:	f807 4b01 	strb.w	r4, [r7], #1
 8008d6e:	f7f8 f913 	bl	8000f98 <__aeabi_dcmplt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d174      	bne.n	8008e60 <_dtoa_r+0x648>
 8008d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	4911      	ldr	r1, [pc, #68]	; (8008dc4 <_dtoa_r+0x5ac>)
 8008d7e:	f7f7 fce1 	bl	8000744 <__aeabi_dsub>
 8008d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d86:	f7f8 f907 	bl	8000f98 <__aeabi_dcmplt>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f040 80b7 	bne.w	8008efe <_dtoa_r+0x6e6>
 8008d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d92:	429f      	cmp	r7, r3
 8008d94:	f43f af7a 	beq.w	8008c8c <_dtoa_r+0x474>
 8008d98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <_dtoa_r+0x5b0>)
 8008da0:	f7f7 fe88 	bl	8000ab4 <__aeabi_dmul>
 8008da4:	2200      	movs	r2, #0
 8008da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <_dtoa_r+0x5b0>)
 8008db0:	f7f7 fe80 	bl	8000ab4 <__aeabi_dmul>
 8008db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008db8:	e7c3      	b.n	8008d42 <_dtoa_r+0x52a>
 8008dba:	bf00      	nop
 8008dbc:	0800bc68 	.word	0x0800bc68
 8008dc0:	0800bc40 	.word	0x0800bc40
 8008dc4:	3ff00000 	.word	0x3ff00000
 8008dc8:	40240000 	.word	0x40240000
 8008dcc:	401c0000 	.word	0x401c0000
 8008dd0:	40140000 	.word	0x40140000
 8008dd4:	3fe00000 	.word	0x3fe00000
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fe6a 	bl	8000ab4 <__aeabi_dmul>
 8008de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008de2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008de6:	9c03      	ldr	r4, [sp, #12]
 8008de8:	9314      	str	r3, [sp, #80]	; 0x50
 8008dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dee:	f7f8 f911 	bl	8001014 <__aeabi_d2iz>
 8008df2:	9015      	str	r0, [sp, #84]	; 0x54
 8008df4:	f7f7 fdf4 	bl	80009e0 <__aeabi_i2d>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e00:	f7f7 fca0 	bl	8000744 <__aeabi_dsub>
 8008e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e06:	4606      	mov	r6, r0
 8008e08:	3330      	adds	r3, #48	; 0x30
 8008e0a:	f804 3b01 	strb.w	r3, [r4], #1
 8008e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e10:	460f      	mov	r7, r1
 8008e12:	429c      	cmp	r4, r3
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	d124      	bne.n	8008e64 <_dtoa_r+0x64c>
 8008e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e1e:	4bb0      	ldr	r3, [pc, #704]	; (80090e0 <_dtoa_r+0x8c8>)
 8008e20:	f7f7 fc92 	bl	8000748 <__adddf3>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f8 f8d2 	bl	8000fd4 <__aeabi_dcmpgt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d163      	bne.n	8008efc <_dtoa_r+0x6e4>
 8008e34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e38:	2000      	movs	r0, #0
 8008e3a:	49a9      	ldr	r1, [pc, #676]	; (80090e0 <_dtoa_r+0x8c8>)
 8008e3c:	f7f7 fc82 	bl	8000744 <__aeabi_dsub>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f8 f8a6 	bl	8000f98 <__aeabi_dcmplt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f43f af1d 	beq.w	8008c8c <_dtoa_r+0x474>
 8008e52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e54:	1e7b      	subs	r3, r7, #1
 8008e56:	9314      	str	r3, [sp, #80]	; 0x50
 8008e58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008e5c:	2b30      	cmp	r3, #48	; 0x30
 8008e5e:	d0f8      	beq.n	8008e52 <_dtoa_r+0x63a>
 8008e60:	46c2      	mov	sl, r8
 8008e62:	e03b      	b.n	8008edc <_dtoa_r+0x6c4>
 8008e64:	4b9f      	ldr	r3, [pc, #636]	; (80090e4 <_dtoa_r+0x8cc>)
 8008e66:	f7f7 fe25 	bl	8000ab4 <__aeabi_dmul>
 8008e6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e6e:	e7bc      	b.n	8008dea <_dtoa_r+0x5d2>
 8008e70:	9f03      	ldr	r7, [sp, #12]
 8008e72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 ff43 	bl	8000d08 <__aeabi_ddiv>
 8008e82:	f7f8 f8c7 	bl	8001014 <__aeabi_d2iz>
 8008e86:	4604      	mov	r4, r0
 8008e88:	f7f7 fdaa 	bl	80009e0 <__aeabi_i2d>
 8008e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e90:	f7f7 fe10 	bl	8000ab4 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	f7f7 fc52 	bl	8000744 <__aeabi_dsub>
 8008ea0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ea4:	f807 6b01 	strb.w	r6, [r7], #1
 8008ea8:	9e03      	ldr	r6, [sp, #12]
 8008eaa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008eae:	1bbe      	subs	r6, r7, r6
 8008eb0:	45b4      	cmp	ip, r6
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	d136      	bne.n	8008f26 <_dtoa_r+0x70e>
 8008eb8:	f7f7 fc46 	bl	8000748 <__adddf3>
 8008ebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	f7f8 f886 	bl	8000fd4 <__aeabi_dcmpgt>
 8008ec8:	bb58      	cbnz	r0, 8008f22 <_dtoa_r+0x70a>
 8008eca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ece:	4640      	mov	r0, r8
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	f7f8 f857 	bl	8000f84 <__aeabi_dcmpeq>
 8008ed6:	b108      	cbz	r0, 8008edc <_dtoa_r+0x6c4>
 8008ed8:	07e1      	lsls	r1, r4, #31
 8008eda:	d422      	bmi.n	8008f22 <_dtoa_r+0x70a>
 8008edc:	4628      	mov	r0, r5
 8008ede:	4659      	mov	r1, fp
 8008ee0:	f000 fbe0 	bl	80096a4 <_Bfree>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	703b      	strb	r3, [r7, #0]
 8008ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eea:	f10a 0001 	add.w	r0, sl, #1
 8008eee:	6018      	str	r0, [r3, #0]
 8008ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f43f acde 	beq.w	80088b4 <_dtoa_r+0x9c>
 8008ef8:	601f      	str	r7, [r3, #0]
 8008efa:	e4db      	b.n	80088b4 <_dtoa_r+0x9c>
 8008efc:	4627      	mov	r7, r4
 8008efe:	463b      	mov	r3, r7
 8008f00:	461f      	mov	r7, r3
 8008f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f06:	2a39      	cmp	r2, #57	; 0x39
 8008f08:	d107      	bne.n	8008f1a <_dtoa_r+0x702>
 8008f0a:	9a03      	ldr	r2, [sp, #12]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d1f7      	bne.n	8008f00 <_dtoa_r+0x6e8>
 8008f10:	2230      	movs	r2, #48	; 0x30
 8008f12:	9903      	ldr	r1, [sp, #12]
 8008f14:	f108 0801 	add.w	r8, r8, #1
 8008f18:	700a      	strb	r2, [r1, #0]
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	e79e      	b.n	8008e60 <_dtoa_r+0x648>
 8008f22:	46d0      	mov	r8, sl
 8008f24:	e7eb      	b.n	8008efe <_dtoa_r+0x6e6>
 8008f26:	2200      	movs	r2, #0
 8008f28:	4b6e      	ldr	r3, [pc, #440]	; (80090e4 <_dtoa_r+0x8cc>)
 8008f2a:	f7f7 fdc3 	bl	8000ab4 <__aeabi_dmul>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2300      	movs	r3, #0
 8008f32:	4680      	mov	r8, r0
 8008f34:	4689      	mov	r9, r1
 8008f36:	f7f8 f825 	bl	8000f84 <__aeabi_dcmpeq>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d09b      	beq.n	8008e76 <_dtoa_r+0x65e>
 8008f3e:	e7cd      	b.n	8008edc <_dtoa_r+0x6c4>
 8008f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	f000 80d0 	beq.w	80090e8 <_dtoa_r+0x8d0>
 8008f48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f4a:	2a01      	cmp	r2, #1
 8008f4c:	f300 80ae 	bgt.w	80090ac <_dtoa_r+0x894>
 8008f50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	f000 80a6 	beq.w	80090a4 <_dtoa_r+0x88c>
 8008f58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f5e:	9f06      	ldr	r7, [sp, #24]
 8008f60:	9a06      	ldr	r2, [sp, #24]
 8008f62:	2101      	movs	r1, #1
 8008f64:	441a      	add	r2, r3
 8008f66:	9206      	str	r2, [sp, #24]
 8008f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	441a      	add	r2, r3
 8008f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f70:	f000 fc4e 	bl	8009810 <__i2b>
 8008f74:	4606      	mov	r6, r0
 8008f76:	2f00      	cmp	r7, #0
 8008f78:	dd0c      	ble.n	8008f94 <_dtoa_r+0x77c>
 8008f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd09      	ble.n	8008f94 <_dtoa_r+0x77c>
 8008f80:	42bb      	cmp	r3, r7
 8008f82:	bfa8      	it	ge
 8008f84:	463b      	movge	r3, r7
 8008f86:	9a06      	ldr	r2, [sp, #24]
 8008f88:	1aff      	subs	r7, r7, r3
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	9206      	str	r2, [sp, #24]
 8008f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	9309      	str	r3, [sp, #36]	; 0x24
 8008f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f96:	b1f3      	cbz	r3, 8008fd6 <_dtoa_r+0x7be>
 8008f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80a8 	beq.w	80090f0 <_dtoa_r+0x8d8>
 8008fa0:	2c00      	cmp	r4, #0
 8008fa2:	dd10      	ble.n	8008fc6 <_dtoa_r+0x7ae>
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 fcef 	bl	800998c <__pow5mult>
 8008fae:	465a      	mov	r2, fp
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f000 fc41 	bl	800983c <__multiply>
 8008fba:	4680      	mov	r8, r0
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fb70 	bl	80096a4 <_Bfree>
 8008fc4:	46c3      	mov	fp, r8
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	1b1a      	subs	r2, r3, r4
 8008fca:	d004      	beq.n	8008fd6 <_dtoa_r+0x7be>
 8008fcc:	4659      	mov	r1, fp
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 fcdc 	bl	800998c <__pow5mult>
 8008fd4:	4683      	mov	fp, r0
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 fc19 	bl	8009810 <__i2b>
 8008fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f340 8086 	ble.w	80090f4 <_dtoa_r+0x8dc>
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4601      	mov	r1, r0
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 fccd 	bl	800998c <__pow5mult>
 8008ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	dd7f      	ble.n	80090fa <_dtoa_r+0x8e2>
 8008ffa:	f04f 0800 	mov.w	r8, #0
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009004:	6918      	ldr	r0, [r3, #16]
 8009006:	f000 fbb5 	bl	8009774 <__hi0bits>
 800900a:	f1c0 0020 	rsb	r0, r0, #32
 800900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009010:	4418      	add	r0, r3
 8009012:	f010 001f 	ands.w	r0, r0, #31
 8009016:	f000 8092 	beq.w	800913e <_dtoa_r+0x926>
 800901a:	f1c0 0320 	rsb	r3, r0, #32
 800901e:	2b04      	cmp	r3, #4
 8009020:	f340 808a 	ble.w	8009138 <_dtoa_r+0x920>
 8009024:	f1c0 001c 	rsb	r0, r0, #28
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	4407      	add	r7, r0
 800902c:	4403      	add	r3, r0
 800902e:	9306      	str	r3, [sp, #24]
 8009030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009032:	4403      	add	r3, r0
 8009034:	9309      	str	r3, [sp, #36]	; 0x24
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	dd05      	ble.n	8009048 <_dtoa_r+0x830>
 800903c:	4659      	mov	r1, fp
 800903e:	461a      	mov	r2, r3
 8009040:	4628      	mov	r0, r5
 8009042:	f000 fcfd 	bl	8009a40 <__lshift>
 8009046:	4683      	mov	fp, r0
 8009048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	dd05      	ble.n	800905a <_dtoa_r+0x842>
 800904e:	4621      	mov	r1, r4
 8009050:	461a      	mov	r2, r3
 8009052:	4628      	mov	r0, r5
 8009054:	f000 fcf4 	bl	8009a40 <__lshift>
 8009058:	4604      	mov	r4, r0
 800905a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d070      	beq.n	8009142 <_dtoa_r+0x92a>
 8009060:	4621      	mov	r1, r4
 8009062:	4658      	mov	r0, fp
 8009064:	f000 fd5c 	bl	8009b20 <__mcmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	da6a      	bge.n	8009142 <_dtoa_r+0x92a>
 800906c:	2300      	movs	r3, #0
 800906e:	4659      	mov	r1, fp
 8009070:	220a      	movs	r2, #10
 8009072:	4628      	mov	r0, r5
 8009074:	f000 fb38 	bl	80096e8 <__multadd>
 8009078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907a:	4683      	mov	fp, r0
 800907c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 8194 	beq.w	80093ae <_dtoa_r+0xb96>
 8009086:	4631      	mov	r1, r6
 8009088:	2300      	movs	r3, #0
 800908a:	220a      	movs	r2, #10
 800908c:	4628      	mov	r0, r5
 800908e:	f000 fb2b 	bl	80096e8 <__multadd>
 8009092:	f1b9 0f00 	cmp.w	r9, #0
 8009096:	4606      	mov	r6, r0
 8009098:	f300 8093 	bgt.w	80091c2 <_dtoa_r+0x9aa>
 800909c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909e:	2b02      	cmp	r3, #2
 80090a0:	dc57      	bgt.n	8009152 <_dtoa_r+0x93a>
 80090a2:	e08e      	b.n	80091c2 <_dtoa_r+0x9aa>
 80090a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80090a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090aa:	e757      	b.n	8008f5c <_dtoa_r+0x744>
 80090ac:	9b08      	ldr	r3, [sp, #32]
 80090ae:	1e5c      	subs	r4, r3, #1
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	bfb7      	itett	lt
 80090b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80090b8:	1b1c      	subge	r4, r3, r4
 80090ba:	1ae2      	sublt	r2, r4, r3
 80090bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80090be:	bfbe      	ittt	lt
 80090c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80090c2:	189b      	addlt	r3, r3, r2
 80090c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	bfb8      	it	lt
 80090ca:	2400      	movlt	r4, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	bfbb      	ittet	lt
 80090d0:	9b06      	ldrlt	r3, [sp, #24]
 80090d2:	9a08      	ldrlt	r2, [sp, #32]
 80090d4:	9f06      	ldrge	r7, [sp, #24]
 80090d6:	1a9f      	sublt	r7, r3, r2
 80090d8:	bfac      	ite	ge
 80090da:	9b08      	ldrge	r3, [sp, #32]
 80090dc:	2300      	movlt	r3, #0
 80090de:	e73f      	b.n	8008f60 <_dtoa_r+0x748>
 80090e0:	3fe00000 	.word	0x3fe00000
 80090e4:	40240000 	.word	0x40240000
 80090e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090ea:	9f06      	ldr	r7, [sp, #24]
 80090ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80090ee:	e742      	b.n	8008f76 <_dtoa_r+0x75e>
 80090f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090f2:	e76b      	b.n	8008fcc <_dtoa_r+0x7b4>
 80090f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	dc19      	bgt.n	800912e <_dtoa_r+0x916>
 80090fa:	9b04      	ldr	r3, [sp, #16]
 80090fc:	b9bb      	cbnz	r3, 800912e <_dtoa_r+0x916>
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009104:	b99b      	cbnz	r3, 800912e <_dtoa_r+0x916>
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800910c:	0d1b      	lsrs	r3, r3, #20
 800910e:	051b      	lsls	r3, r3, #20
 8009110:	b183      	cbz	r3, 8009134 <_dtoa_r+0x91c>
 8009112:	f04f 0801 	mov.w	r8, #1
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	3301      	adds	r3, #1
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911e:	3301      	adds	r3, #1
 8009120:	9309      	str	r3, [sp, #36]	; 0x24
 8009122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	f47f af6a 	bne.w	8008ffe <_dtoa_r+0x7e6>
 800912a:	2001      	movs	r0, #1
 800912c:	e76f      	b.n	800900e <_dtoa_r+0x7f6>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	e7f6      	b.n	8009122 <_dtoa_r+0x90a>
 8009134:	4698      	mov	r8, r3
 8009136:	e7f4      	b.n	8009122 <_dtoa_r+0x90a>
 8009138:	f43f af7d 	beq.w	8009036 <_dtoa_r+0x81e>
 800913c:	4618      	mov	r0, r3
 800913e:	301c      	adds	r0, #28
 8009140:	e772      	b.n	8009028 <_dtoa_r+0x810>
 8009142:	9b08      	ldr	r3, [sp, #32]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc36      	bgt.n	80091b6 <_dtoa_r+0x99e>
 8009148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800914a:	2b02      	cmp	r3, #2
 800914c:	dd33      	ble.n	80091b6 <_dtoa_r+0x99e>
 800914e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009152:	f1b9 0f00 	cmp.w	r9, #0
 8009156:	d10d      	bne.n	8009174 <_dtoa_r+0x95c>
 8009158:	4621      	mov	r1, r4
 800915a:	464b      	mov	r3, r9
 800915c:	2205      	movs	r2, #5
 800915e:	4628      	mov	r0, r5
 8009160:	f000 fac2 	bl	80096e8 <__multadd>
 8009164:	4601      	mov	r1, r0
 8009166:	4604      	mov	r4, r0
 8009168:	4658      	mov	r0, fp
 800916a:	f000 fcd9 	bl	8009b20 <__mcmp>
 800916e:	2800      	cmp	r0, #0
 8009170:	f73f adb8 	bgt.w	8008ce4 <_dtoa_r+0x4cc>
 8009174:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009176:	9f03      	ldr	r7, [sp, #12]
 8009178:	ea6f 0a03 	mvn.w	sl, r3
 800917c:	f04f 0800 	mov.w	r8, #0
 8009180:	4621      	mov	r1, r4
 8009182:	4628      	mov	r0, r5
 8009184:	f000 fa8e 	bl	80096a4 <_Bfree>
 8009188:	2e00      	cmp	r6, #0
 800918a:	f43f aea7 	beq.w	8008edc <_dtoa_r+0x6c4>
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	d005      	beq.n	80091a0 <_dtoa_r+0x988>
 8009194:	45b0      	cmp	r8, r6
 8009196:	d003      	beq.n	80091a0 <_dtoa_r+0x988>
 8009198:	4641      	mov	r1, r8
 800919a:	4628      	mov	r0, r5
 800919c:	f000 fa82 	bl	80096a4 <_Bfree>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4628      	mov	r0, r5
 80091a4:	f000 fa7e 	bl	80096a4 <_Bfree>
 80091a8:	e698      	b.n	8008edc <_dtoa_r+0x6c4>
 80091aa:	2400      	movs	r4, #0
 80091ac:	4626      	mov	r6, r4
 80091ae:	e7e1      	b.n	8009174 <_dtoa_r+0x95c>
 80091b0:	46c2      	mov	sl, r8
 80091b2:	4626      	mov	r6, r4
 80091b4:	e596      	b.n	8008ce4 <_dtoa_r+0x4cc>
 80091b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80fd 	beq.w	80093bc <_dtoa_r+0xba4>
 80091c2:	2f00      	cmp	r7, #0
 80091c4:	dd05      	ble.n	80091d2 <_dtoa_r+0x9ba>
 80091c6:	4631      	mov	r1, r6
 80091c8:	463a      	mov	r2, r7
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 fc38 	bl	8009a40 <__lshift>
 80091d0:	4606      	mov	r6, r0
 80091d2:	f1b8 0f00 	cmp.w	r8, #0
 80091d6:	d05c      	beq.n	8009292 <_dtoa_r+0xa7a>
 80091d8:	4628      	mov	r0, r5
 80091da:	6871      	ldr	r1, [r6, #4]
 80091dc:	f000 fa22 	bl	8009624 <_Balloc>
 80091e0:	4607      	mov	r7, r0
 80091e2:	b928      	cbnz	r0, 80091f0 <_dtoa_r+0x9d8>
 80091e4:	4602      	mov	r2, r0
 80091e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ea:	4b7f      	ldr	r3, [pc, #508]	; (80093e8 <_dtoa_r+0xbd0>)
 80091ec:	f7ff bb28 	b.w	8008840 <_dtoa_r+0x28>
 80091f0:	6932      	ldr	r2, [r6, #16]
 80091f2:	f106 010c 	add.w	r1, r6, #12
 80091f6:	3202      	adds	r2, #2
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	300c      	adds	r0, #12
 80091fc:	f7fe fce8 	bl	8007bd0 <memcpy>
 8009200:	2201      	movs	r2, #1
 8009202:	4639      	mov	r1, r7
 8009204:	4628      	mov	r0, r5
 8009206:	f000 fc1b 	bl	8009a40 <__lshift>
 800920a:	46b0      	mov	r8, r6
 800920c:	4606      	mov	r6, r0
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	9308      	str	r3, [sp, #32]
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	444b      	add	r3, r9
 8009218:	930a      	str	r3, [sp, #40]	; 0x28
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	9309      	str	r3, [sp, #36]	; 0x24
 8009222:	9b08      	ldr	r3, [sp, #32]
 8009224:	4621      	mov	r1, r4
 8009226:	3b01      	subs	r3, #1
 8009228:	4658      	mov	r0, fp
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	f7ff fa66 	bl	80086fc <quorem>
 8009230:	4603      	mov	r3, r0
 8009232:	4641      	mov	r1, r8
 8009234:	3330      	adds	r3, #48	; 0x30
 8009236:	9006      	str	r0, [sp, #24]
 8009238:	4658      	mov	r0, fp
 800923a:	930b      	str	r3, [sp, #44]	; 0x2c
 800923c:	f000 fc70 	bl	8009b20 <__mcmp>
 8009240:	4632      	mov	r2, r6
 8009242:	4681      	mov	r9, r0
 8009244:	4621      	mov	r1, r4
 8009246:	4628      	mov	r0, r5
 8009248:	f000 fc86 	bl	8009b58 <__mdiff>
 800924c:	68c2      	ldr	r2, [r0, #12]
 800924e:	4607      	mov	r7, r0
 8009250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009252:	bb02      	cbnz	r2, 8009296 <_dtoa_r+0xa7e>
 8009254:	4601      	mov	r1, r0
 8009256:	4658      	mov	r0, fp
 8009258:	f000 fc62 	bl	8009b20 <__mcmp>
 800925c:	4602      	mov	r2, r0
 800925e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009260:	4639      	mov	r1, r7
 8009262:	4628      	mov	r0, r5
 8009264:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009268:	f000 fa1c 	bl	80096a4 <_Bfree>
 800926c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800926e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009270:	9f08      	ldr	r7, [sp, #32]
 8009272:	ea43 0102 	orr.w	r1, r3, r2
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	430b      	orrs	r3, r1
 800927a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800927c:	d10d      	bne.n	800929a <_dtoa_r+0xa82>
 800927e:	2b39      	cmp	r3, #57	; 0x39
 8009280:	d029      	beq.n	80092d6 <_dtoa_r+0xabe>
 8009282:	f1b9 0f00 	cmp.w	r9, #0
 8009286:	dd01      	ble.n	800928c <_dtoa_r+0xa74>
 8009288:	9b06      	ldr	r3, [sp, #24]
 800928a:	3331      	adds	r3, #49	; 0x31
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	7013      	strb	r3, [r2, #0]
 8009290:	e776      	b.n	8009180 <_dtoa_r+0x968>
 8009292:	4630      	mov	r0, r6
 8009294:	e7b9      	b.n	800920a <_dtoa_r+0x9f2>
 8009296:	2201      	movs	r2, #1
 8009298:	e7e2      	b.n	8009260 <_dtoa_r+0xa48>
 800929a:	f1b9 0f00 	cmp.w	r9, #0
 800929e:	db06      	blt.n	80092ae <_dtoa_r+0xa96>
 80092a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80092a2:	ea41 0909 	orr.w	r9, r1, r9
 80092a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092a8:	ea59 0101 	orrs.w	r1, r9, r1
 80092ac:	d120      	bne.n	80092f0 <_dtoa_r+0xad8>
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	ddec      	ble.n	800928c <_dtoa_r+0xa74>
 80092b2:	4659      	mov	r1, fp
 80092b4:	2201      	movs	r2, #1
 80092b6:	4628      	mov	r0, r5
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	f000 fbc1 	bl	8009a40 <__lshift>
 80092be:	4621      	mov	r1, r4
 80092c0:	4683      	mov	fp, r0
 80092c2:	f000 fc2d 	bl	8009b20 <__mcmp>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	dc02      	bgt.n	80092d2 <_dtoa_r+0xaba>
 80092cc:	d1de      	bne.n	800928c <_dtoa_r+0xa74>
 80092ce:	07da      	lsls	r2, r3, #31
 80092d0:	d5dc      	bpl.n	800928c <_dtoa_r+0xa74>
 80092d2:	2b39      	cmp	r3, #57	; 0x39
 80092d4:	d1d8      	bne.n	8009288 <_dtoa_r+0xa70>
 80092d6:	2339      	movs	r3, #57	; 0x39
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	7013      	strb	r3, [r2, #0]
 80092dc:	463b      	mov	r3, r7
 80092de:	461f      	mov	r7, r3
 80092e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	2a39      	cmp	r2, #57	; 0x39
 80092e8:	d050      	beq.n	800938c <_dtoa_r+0xb74>
 80092ea:	3201      	adds	r2, #1
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e747      	b.n	8009180 <_dtoa_r+0x968>
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	dd03      	ble.n	80092fc <_dtoa_r+0xae4>
 80092f4:	2b39      	cmp	r3, #57	; 0x39
 80092f6:	d0ee      	beq.n	80092d6 <_dtoa_r+0xabe>
 80092f8:	3301      	adds	r3, #1
 80092fa:	e7c7      	b.n	800928c <_dtoa_r+0xa74>
 80092fc:	9a08      	ldr	r2, [sp, #32]
 80092fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009300:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009304:	428a      	cmp	r2, r1
 8009306:	d02a      	beq.n	800935e <_dtoa_r+0xb46>
 8009308:	4659      	mov	r1, fp
 800930a:	2300      	movs	r3, #0
 800930c:	220a      	movs	r2, #10
 800930e:	4628      	mov	r0, r5
 8009310:	f000 f9ea 	bl	80096e8 <__multadd>
 8009314:	45b0      	cmp	r8, r6
 8009316:	4683      	mov	fp, r0
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	f04f 020a 	mov.w	r2, #10
 8009320:	4641      	mov	r1, r8
 8009322:	4628      	mov	r0, r5
 8009324:	d107      	bne.n	8009336 <_dtoa_r+0xb1e>
 8009326:	f000 f9df 	bl	80096e8 <__multadd>
 800932a:	4680      	mov	r8, r0
 800932c:	4606      	mov	r6, r0
 800932e:	9b08      	ldr	r3, [sp, #32]
 8009330:	3301      	adds	r3, #1
 8009332:	9308      	str	r3, [sp, #32]
 8009334:	e775      	b.n	8009222 <_dtoa_r+0xa0a>
 8009336:	f000 f9d7 	bl	80096e8 <__multadd>
 800933a:	4631      	mov	r1, r6
 800933c:	4680      	mov	r8, r0
 800933e:	2300      	movs	r3, #0
 8009340:	220a      	movs	r2, #10
 8009342:	4628      	mov	r0, r5
 8009344:	f000 f9d0 	bl	80096e8 <__multadd>
 8009348:	4606      	mov	r6, r0
 800934a:	e7f0      	b.n	800932e <_dtoa_r+0xb16>
 800934c:	f1b9 0f00 	cmp.w	r9, #0
 8009350:	bfcc      	ite	gt
 8009352:	464f      	movgt	r7, r9
 8009354:	2701      	movle	r7, #1
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	9a03      	ldr	r2, [sp, #12]
 800935c:	4417      	add	r7, r2
 800935e:	4659      	mov	r1, fp
 8009360:	2201      	movs	r2, #1
 8009362:	4628      	mov	r0, r5
 8009364:	9308      	str	r3, [sp, #32]
 8009366:	f000 fb6b 	bl	8009a40 <__lshift>
 800936a:	4621      	mov	r1, r4
 800936c:	4683      	mov	fp, r0
 800936e:	f000 fbd7 	bl	8009b20 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	dcb2      	bgt.n	80092dc <_dtoa_r+0xac4>
 8009376:	d102      	bne.n	800937e <_dtoa_r+0xb66>
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	07db      	lsls	r3, r3, #31
 800937c:	d4ae      	bmi.n	80092dc <_dtoa_r+0xac4>
 800937e:	463b      	mov	r3, r7
 8009380:	461f      	mov	r7, r3
 8009382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009386:	2a30      	cmp	r2, #48	; 0x30
 8009388:	d0fa      	beq.n	8009380 <_dtoa_r+0xb68>
 800938a:	e6f9      	b.n	8009180 <_dtoa_r+0x968>
 800938c:	9a03      	ldr	r2, [sp, #12]
 800938e:	429a      	cmp	r2, r3
 8009390:	d1a5      	bne.n	80092de <_dtoa_r+0xac6>
 8009392:	2331      	movs	r3, #49	; 0x31
 8009394:	f10a 0a01 	add.w	sl, sl, #1
 8009398:	e779      	b.n	800928e <_dtoa_r+0xa76>
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <_dtoa_r+0xbd4>)
 800939c:	f7ff baa8 	b.w	80088f0 <_dtoa_r+0xd8>
 80093a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f aa81 	bne.w	80088aa <_dtoa_r+0x92>
 80093a8:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <_dtoa_r+0xbd8>)
 80093aa:	f7ff baa1 	b.w	80088f0 <_dtoa_r+0xd8>
 80093ae:	f1b9 0f00 	cmp.w	r9, #0
 80093b2:	dc03      	bgt.n	80093bc <_dtoa_r+0xba4>
 80093b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	f73f aecb 	bgt.w	8009152 <_dtoa_r+0x93a>
 80093bc:	9f03      	ldr	r7, [sp, #12]
 80093be:	4621      	mov	r1, r4
 80093c0:	4658      	mov	r0, fp
 80093c2:	f7ff f99b 	bl	80086fc <quorem>
 80093c6:	9a03      	ldr	r2, [sp, #12]
 80093c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093cc:	f807 3b01 	strb.w	r3, [r7], #1
 80093d0:	1aba      	subs	r2, r7, r2
 80093d2:	4591      	cmp	r9, r2
 80093d4:	ddba      	ble.n	800934c <_dtoa_r+0xb34>
 80093d6:	4659      	mov	r1, fp
 80093d8:	2300      	movs	r3, #0
 80093da:	220a      	movs	r2, #10
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 f983 	bl	80096e8 <__multadd>
 80093e2:	4683      	mov	fp, r0
 80093e4:	e7eb      	b.n	80093be <_dtoa_r+0xba6>
 80093e6:	bf00      	nop
 80093e8:	0800bb73 	.word	0x0800bb73
 80093ec:	0800bad0 	.word	0x0800bad0
 80093f0:	0800baf4 	.word	0x0800baf4

080093f4 <std>:
 80093f4:	2300      	movs	r3, #0
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	e9c0 3300 	strd	r3, r3, [r0]
 80093fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009402:	6083      	str	r3, [r0, #8]
 8009404:	8181      	strh	r1, [r0, #12]
 8009406:	6643      	str	r3, [r0, #100]	; 0x64
 8009408:	81c2      	strh	r2, [r0, #14]
 800940a:	6183      	str	r3, [r0, #24]
 800940c:	4619      	mov	r1, r3
 800940e:	2208      	movs	r2, #8
 8009410:	305c      	adds	r0, #92	; 0x5c
 8009412:	f7fe fbeb 	bl	8007bec <memset>
 8009416:	4b05      	ldr	r3, [pc, #20]	; (800942c <std+0x38>)
 8009418:	6224      	str	r4, [r4, #32]
 800941a:	6263      	str	r3, [r4, #36]	; 0x24
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <std+0x3c>)
 800941e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009420:	4b04      	ldr	r3, [pc, #16]	; (8009434 <std+0x40>)
 8009422:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009424:	4b04      	ldr	r3, [pc, #16]	; (8009438 <std+0x44>)
 8009426:	6323      	str	r3, [r4, #48]	; 0x30
 8009428:	bd10      	pop	{r4, pc}
 800942a:	bf00      	nop
 800942c:	0800a291 	.word	0x0800a291
 8009430:	0800a2b3 	.word	0x0800a2b3
 8009434:	0800a2eb 	.word	0x0800a2eb
 8009438:	0800a30f 	.word	0x0800a30f

0800943c <_cleanup_r>:
 800943c:	4901      	ldr	r1, [pc, #4]	; (8009444 <_cleanup_r+0x8>)
 800943e:	f000 b8af 	b.w	80095a0 <_fwalk_reent>
 8009442:	bf00      	nop
 8009444:	0800a61d 	.word	0x0800a61d

08009448 <__sfmoreglue>:
 8009448:	2268      	movs	r2, #104	; 0x68
 800944a:	b570      	push	{r4, r5, r6, lr}
 800944c:	1e4d      	subs	r5, r1, #1
 800944e:	4355      	muls	r5, r2
 8009450:	460e      	mov	r6, r1
 8009452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009456:	f7fe fc4d 	bl	8007cf4 <_malloc_r>
 800945a:	4604      	mov	r4, r0
 800945c:	b140      	cbz	r0, 8009470 <__sfmoreglue+0x28>
 800945e:	2100      	movs	r1, #0
 8009460:	e9c0 1600 	strd	r1, r6, [r0]
 8009464:	300c      	adds	r0, #12
 8009466:	60a0      	str	r0, [r4, #8]
 8009468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800946c:	f7fe fbbe 	bl	8007bec <memset>
 8009470:	4620      	mov	r0, r4
 8009472:	bd70      	pop	{r4, r5, r6, pc}

08009474 <__sfp_lock_acquire>:
 8009474:	4801      	ldr	r0, [pc, #4]	; (800947c <__sfp_lock_acquire+0x8>)
 8009476:	f000 b8b8 	b.w	80095ea <__retarget_lock_acquire_recursive>
 800947a:	bf00      	nop
 800947c:	20003c1d 	.word	0x20003c1d

08009480 <__sfp_lock_release>:
 8009480:	4801      	ldr	r0, [pc, #4]	; (8009488 <__sfp_lock_release+0x8>)
 8009482:	f000 b8b3 	b.w	80095ec <__retarget_lock_release_recursive>
 8009486:	bf00      	nop
 8009488:	20003c1d 	.word	0x20003c1d

0800948c <__sinit_lock_acquire>:
 800948c:	4801      	ldr	r0, [pc, #4]	; (8009494 <__sinit_lock_acquire+0x8>)
 800948e:	f000 b8ac 	b.w	80095ea <__retarget_lock_acquire_recursive>
 8009492:	bf00      	nop
 8009494:	20003c1e 	.word	0x20003c1e

08009498 <__sinit_lock_release>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__sinit_lock_release+0x8>)
 800949a:	f000 b8a7 	b.w	80095ec <__retarget_lock_release_recursive>
 800949e:	bf00      	nop
 80094a0:	20003c1e 	.word	0x20003c1e

080094a4 <__sinit>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4604      	mov	r4, r0
 80094a8:	f7ff fff0 	bl	800948c <__sinit_lock_acquire>
 80094ac:	69a3      	ldr	r3, [r4, #24]
 80094ae:	b11b      	cbz	r3, 80094b8 <__sinit+0x14>
 80094b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b4:	f7ff bff0 	b.w	8009498 <__sinit_lock_release>
 80094b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094bc:	6523      	str	r3, [r4, #80]	; 0x50
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <__sinit+0x68>)
 80094c0:	4a13      	ldr	r2, [pc, #76]	; (8009510 <__sinit+0x6c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	bf08      	it	eq
 80094ca:	2301      	moveq	r3, #1
 80094cc:	4620      	mov	r0, r4
 80094ce:	bf08      	it	eq
 80094d0:	61a3      	streq	r3, [r4, #24]
 80094d2:	f000 f81f 	bl	8009514 <__sfp>
 80094d6:	6060      	str	r0, [r4, #4]
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 f81b 	bl	8009514 <__sfp>
 80094de:	60a0      	str	r0, [r4, #8]
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 f817 	bl	8009514 <__sfp>
 80094e6:	2200      	movs	r2, #0
 80094e8:	2104      	movs	r1, #4
 80094ea:	60e0      	str	r0, [r4, #12]
 80094ec:	6860      	ldr	r0, [r4, #4]
 80094ee:	f7ff ff81 	bl	80093f4 <std>
 80094f2:	2201      	movs	r2, #1
 80094f4:	2109      	movs	r1, #9
 80094f6:	68a0      	ldr	r0, [r4, #8]
 80094f8:	f7ff ff7c 	bl	80093f4 <std>
 80094fc:	2202      	movs	r2, #2
 80094fe:	2112      	movs	r1, #18
 8009500:	68e0      	ldr	r0, [r4, #12]
 8009502:	f7ff ff77 	bl	80093f4 <std>
 8009506:	2301      	movs	r3, #1
 8009508:	61a3      	str	r3, [r4, #24]
 800950a:	e7d1      	b.n	80094b0 <__sinit+0xc>
 800950c:	0800babc 	.word	0x0800babc
 8009510:	0800943d 	.word	0x0800943d

08009514 <__sfp>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	4607      	mov	r7, r0
 8009518:	f7ff ffac 	bl	8009474 <__sfp_lock_acquire>
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <__sfp+0x84>)
 800951e:	681e      	ldr	r6, [r3, #0]
 8009520:	69b3      	ldr	r3, [r6, #24]
 8009522:	b913      	cbnz	r3, 800952a <__sfp+0x16>
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff ffbd 	bl	80094a4 <__sinit>
 800952a:	3648      	adds	r6, #72	; 0x48
 800952c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009530:	3b01      	subs	r3, #1
 8009532:	d503      	bpl.n	800953c <__sfp+0x28>
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	b30b      	cbz	r3, 800957c <__sfp+0x68>
 8009538:	6836      	ldr	r6, [r6, #0]
 800953a:	e7f7      	b.n	800952c <__sfp+0x18>
 800953c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009540:	b9d5      	cbnz	r5, 8009578 <__sfp+0x64>
 8009542:	4b16      	ldr	r3, [pc, #88]	; (800959c <__sfp+0x88>)
 8009544:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009548:	60e3      	str	r3, [r4, #12]
 800954a:	6665      	str	r5, [r4, #100]	; 0x64
 800954c:	f000 f84c 	bl	80095e8 <__retarget_lock_init_recursive>
 8009550:	f7ff ff96 	bl	8009480 <__sfp_lock_release>
 8009554:	2208      	movs	r2, #8
 8009556:	4629      	mov	r1, r5
 8009558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800955c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009560:	6025      	str	r5, [r4, #0]
 8009562:	61a5      	str	r5, [r4, #24]
 8009564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009568:	f7fe fb40 	bl	8007bec <memset>
 800956c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009574:	4620      	mov	r0, r4
 8009576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009578:	3468      	adds	r4, #104	; 0x68
 800957a:	e7d9      	b.n	8009530 <__sfp+0x1c>
 800957c:	2104      	movs	r1, #4
 800957e:	4638      	mov	r0, r7
 8009580:	f7ff ff62 	bl	8009448 <__sfmoreglue>
 8009584:	4604      	mov	r4, r0
 8009586:	6030      	str	r0, [r6, #0]
 8009588:	2800      	cmp	r0, #0
 800958a:	d1d5      	bne.n	8009538 <__sfp+0x24>
 800958c:	f7ff ff78 	bl	8009480 <__sfp_lock_release>
 8009590:	230c      	movs	r3, #12
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	e7ee      	b.n	8009574 <__sfp+0x60>
 8009596:	bf00      	nop
 8009598:	0800babc 	.word	0x0800babc
 800959c:	ffff0001 	.word	0xffff0001

080095a0 <_fwalk_reent>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	4606      	mov	r6, r0
 80095a6:	4688      	mov	r8, r1
 80095a8:	2700      	movs	r7, #0
 80095aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095b2:	f1b9 0901 	subs.w	r9, r9, #1
 80095b6:	d505      	bpl.n	80095c4 <_fwalk_reent+0x24>
 80095b8:	6824      	ldr	r4, [r4, #0]
 80095ba:	2c00      	cmp	r4, #0
 80095bc:	d1f7      	bne.n	80095ae <_fwalk_reent+0xe>
 80095be:	4638      	mov	r0, r7
 80095c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c4:	89ab      	ldrh	r3, [r5, #12]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d907      	bls.n	80095da <_fwalk_reent+0x3a>
 80095ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ce:	3301      	adds	r3, #1
 80095d0:	d003      	beq.n	80095da <_fwalk_reent+0x3a>
 80095d2:	4629      	mov	r1, r5
 80095d4:	4630      	mov	r0, r6
 80095d6:	47c0      	blx	r8
 80095d8:	4307      	orrs	r7, r0
 80095da:	3568      	adds	r5, #104	; 0x68
 80095dc:	e7e9      	b.n	80095b2 <_fwalk_reent+0x12>
	...

080095e0 <_localeconv_r>:
 80095e0:	4800      	ldr	r0, [pc, #0]	; (80095e4 <_localeconv_r+0x4>)
 80095e2:	4770      	bx	lr
 80095e4:	2000016c 	.word	0x2000016c

080095e8 <__retarget_lock_init_recursive>:
 80095e8:	4770      	bx	lr

080095ea <__retarget_lock_acquire_recursive>:
 80095ea:	4770      	bx	lr

080095ec <__retarget_lock_release_recursive>:
 80095ec:	4770      	bx	lr

080095ee <memchr>:
 80095ee:	4603      	mov	r3, r0
 80095f0:	b510      	push	{r4, lr}
 80095f2:	b2c9      	uxtb	r1, r1
 80095f4:	4402      	add	r2, r0
 80095f6:	4293      	cmp	r3, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	d101      	bne.n	8009600 <memchr+0x12>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e003      	b.n	8009608 <memchr+0x1a>
 8009600:	7804      	ldrb	r4, [r0, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	428c      	cmp	r4, r1
 8009606:	d1f6      	bne.n	80095f6 <memchr+0x8>
 8009608:	bd10      	pop	{r4, pc}
	...

0800960c <__malloc_lock>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__malloc_lock+0x8>)
 800960e:	f7ff bfec 	b.w	80095ea <__retarget_lock_acquire_recursive>
 8009612:	bf00      	nop
 8009614:	20003c1c 	.word	0x20003c1c

08009618 <__malloc_unlock>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__malloc_unlock+0x8>)
 800961a:	f7ff bfe7 	b.w	80095ec <__retarget_lock_release_recursive>
 800961e:	bf00      	nop
 8009620:	20003c1c 	.word	0x20003c1c

08009624 <_Balloc>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	b976      	cbnz	r6, 800964c <_Balloc+0x28>
 800962e:	2010      	movs	r0, #16
 8009630:	f7fe fabe 	bl	8007bb0 <malloc>
 8009634:	4602      	mov	r2, r0
 8009636:	6260      	str	r0, [r4, #36]	; 0x24
 8009638:	b920      	cbnz	r0, 8009644 <_Balloc+0x20>
 800963a:	2166      	movs	r1, #102	; 0x66
 800963c:	4b17      	ldr	r3, [pc, #92]	; (800969c <_Balloc+0x78>)
 800963e:	4818      	ldr	r0, [pc, #96]	; (80096a0 <_Balloc+0x7c>)
 8009640:	f000 ff3c 	bl	800a4bc <__assert_func>
 8009644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009648:	6006      	str	r6, [r0, #0]
 800964a:	60c6      	str	r6, [r0, #12]
 800964c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800964e:	68f3      	ldr	r3, [r6, #12]
 8009650:	b183      	cbz	r3, 8009674 <_Balloc+0x50>
 8009652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800965a:	b9b8      	cbnz	r0, 800968c <_Balloc+0x68>
 800965c:	2101      	movs	r1, #1
 800965e:	fa01 f605 	lsl.w	r6, r1, r5
 8009662:	1d72      	adds	r2, r6, #5
 8009664:	4620      	mov	r0, r4
 8009666:	0092      	lsls	r2, r2, #2
 8009668:	f7fe fac8 	bl	8007bfc <_calloc_r>
 800966c:	b160      	cbz	r0, 8009688 <_Balloc+0x64>
 800966e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009672:	e00e      	b.n	8009692 <_Balloc+0x6e>
 8009674:	2221      	movs	r2, #33	; 0x21
 8009676:	2104      	movs	r1, #4
 8009678:	4620      	mov	r0, r4
 800967a:	f7fe fabf 	bl	8007bfc <_calloc_r>
 800967e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009680:	60f0      	str	r0, [r6, #12]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e4      	bne.n	8009652 <_Balloc+0x2e>
 8009688:	2000      	movs	r0, #0
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	6802      	ldr	r2, [r0, #0]
 800968e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009692:	2300      	movs	r3, #0
 8009694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009698:	e7f7      	b.n	800968a <_Balloc+0x66>
 800969a:	bf00      	nop
 800969c:	0800bb01 	.word	0x0800bb01
 80096a0:	0800bbe4 	.word	0x0800bbe4

080096a4 <_Bfree>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096a8:	4605      	mov	r5, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	b976      	cbnz	r6, 80096cc <_Bfree+0x28>
 80096ae:	2010      	movs	r0, #16
 80096b0:	f7fe fa7e 	bl	8007bb0 <malloc>
 80096b4:	4602      	mov	r2, r0
 80096b6:	6268      	str	r0, [r5, #36]	; 0x24
 80096b8:	b920      	cbnz	r0, 80096c4 <_Bfree+0x20>
 80096ba:	218a      	movs	r1, #138	; 0x8a
 80096bc:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <_Bfree+0x3c>)
 80096be:	4809      	ldr	r0, [pc, #36]	; (80096e4 <_Bfree+0x40>)
 80096c0:	f000 fefc 	bl	800a4bc <__assert_func>
 80096c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c8:	6006      	str	r6, [r0, #0]
 80096ca:	60c6      	str	r6, [r0, #12]
 80096cc:	b13c      	cbz	r4, 80096de <_Bfree+0x3a>
 80096ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096d0:	6862      	ldr	r2, [r4, #4]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096d8:	6021      	str	r1, [r4, #0]
 80096da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	0800bb01 	.word	0x0800bb01
 80096e4:	0800bbe4 	.word	0x0800bbe4

080096e8 <__multadd>:
 80096e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ec:	4607      	mov	r7, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	461e      	mov	r6, r3
 80096f2:	2000      	movs	r0, #0
 80096f4:	690d      	ldr	r5, [r1, #16]
 80096f6:	f101 0c14 	add.w	ip, r1, #20
 80096fa:	f8dc 3000 	ldr.w	r3, [ip]
 80096fe:	3001      	adds	r0, #1
 8009700:	b299      	uxth	r1, r3
 8009702:	fb02 6101 	mla	r1, r2, r1, r6
 8009706:	0c1e      	lsrs	r6, r3, #16
 8009708:	0c0b      	lsrs	r3, r1, #16
 800970a:	fb02 3306 	mla	r3, r2, r6, r3
 800970e:	b289      	uxth	r1, r1
 8009710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009714:	4285      	cmp	r5, r0
 8009716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800971a:	f84c 1b04 	str.w	r1, [ip], #4
 800971e:	dcec      	bgt.n	80096fa <__multadd+0x12>
 8009720:	b30e      	cbz	r6, 8009766 <__multadd+0x7e>
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	42ab      	cmp	r3, r5
 8009726:	dc19      	bgt.n	800975c <__multadd+0x74>
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	4638      	mov	r0, r7
 800972c:	3101      	adds	r1, #1
 800972e:	f7ff ff79 	bl	8009624 <_Balloc>
 8009732:	4680      	mov	r8, r0
 8009734:	b928      	cbnz	r0, 8009742 <__multadd+0x5a>
 8009736:	4602      	mov	r2, r0
 8009738:	21b5      	movs	r1, #181	; 0xb5
 800973a:	4b0c      	ldr	r3, [pc, #48]	; (800976c <__multadd+0x84>)
 800973c:	480c      	ldr	r0, [pc, #48]	; (8009770 <__multadd+0x88>)
 800973e:	f000 febd 	bl	800a4bc <__assert_func>
 8009742:	6922      	ldr	r2, [r4, #16]
 8009744:	f104 010c 	add.w	r1, r4, #12
 8009748:	3202      	adds	r2, #2
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	300c      	adds	r0, #12
 800974e:	f7fe fa3f 	bl	8007bd0 <memcpy>
 8009752:	4621      	mov	r1, r4
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff ffa5 	bl	80096a4 <_Bfree>
 800975a:	4644      	mov	r4, r8
 800975c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009760:	3501      	adds	r5, #1
 8009762:	615e      	str	r6, [r3, #20]
 8009764:	6125      	str	r5, [r4, #16]
 8009766:	4620      	mov	r0, r4
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	0800bb73 	.word	0x0800bb73
 8009770:	0800bbe4 	.word	0x0800bbe4

08009774 <__hi0bits>:
 8009774:	0c02      	lsrs	r2, r0, #16
 8009776:	0412      	lsls	r2, r2, #16
 8009778:	4603      	mov	r3, r0
 800977a:	b9ca      	cbnz	r2, 80097b0 <__hi0bits+0x3c>
 800977c:	0403      	lsls	r3, r0, #16
 800977e:	2010      	movs	r0, #16
 8009780:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009784:	bf04      	itt	eq
 8009786:	021b      	lsleq	r3, r3, #8
 8009788:	3008      	addeq	r0, #8
 800978a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800978e:	bf04      	itt	eq
 8009790:	011b      	lsleq	r3, r3, #4
 8009792:	3004      	addeq	r0, #4
 8009794:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009798:	bf04      	itt	eq
 800979a:	009b      	lsleq	r3, r3, #2
 800979c:	3002      	addeq	r0, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	db05      	blt.n	80097ae <__hi0bits+0x3a>
 80097a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80097a6:	f100 0001 	add.w	r0, r0, #1
 80097aa:	bf08      	it	eq
 80097ac:	2020      	moveq	r0, #32
 80097ae:	4770      	bx	lr
 80097b0:	2000      	movs	r0, #0
 80097b2:	e7e5      	b.n	8009780 <__hi0bits+0xc>

080097b4 <__lo0bits>:
 80097b4:	6803      	ldr	r3, [r0, #0]
 80097b6:	4602      	mov	r2, r0
 80097b8:	f013 0007 	ands.w	r0, r3, #7
 80097bc:	d00b      	beq.n	80097d6 <__lo0bits+0x22>
 80097be:	07d9      	lsls	r1, r3, #31
 80097c0:	d421      	bmi.n	8009806 <__lo0bits+0x52>
 80097c2:	0798      	lsls	r0, r3, #30
 80097c4:	bf49      	itett	mi
 80097c6:	085b      	lsrmi	r3, r3, #1
 80097c8:	089b      	lsrpl	r3, r3, #2
 80097ca:	2001      	movmi	r0, #1
 80097cc:	6013      	strmi	r3, [r2, #0]
 80097ce:	bf5c      	itt	pl
 80097d0:	2002      	movpl	r0, #2
 80097d2:	6013      	strpl	r3, [r2, #0]
 80097d4:	4770      	bx	lr
 80097d6:	b299      	uxth	r1, r3
 80097d8:	b909      	cbnz	r1, 80097de <__lo0bits+0x2a>
 80097da:	2010      	movs	r0, #16
 80097dc:	0c1b      	lsrs	r3, r3, #16
 80097de:	b2d9      	uxtb	r1, r3
 80097e0:	b909      	cbnz	r1, 80097e6 <__lo0bits+0x32>
 80097e2:	3008      	adds	r0, #8
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	0719      	lsls	r1, r3, #28
 80097e8:	bf04      	itt	eq
 80097ea:	091b      	lsreq	r3, r3, #4
 80097ec:	3004      	addeq	r0, #4
 80097ee:	0799      	lsls	r1, r3, #30
 80097f0:	bf04      	itt	eq
 80097f2:	089b      	lsreq	r3, r3, #2
 80097f4:	3002      	addeq	r0, #2
 80097f6:	07d9      	lsls	r1, r3, #31
 80097f8:	d403      	bmi.n	8009802 <__lo0bits+0x4e>
 80097fa:	085b      	lsrs	r3, r3, #1
 80097fc:	f100 0001 	add.w	r0, r0, #1
 8009800:	d003      	beq.n	800980a <__lo0bits+0x56>
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	4770      	bx	lr
 8009806:	2000      	movs	r0, #0
 8009808:	4770      	bx	lr
 800980a:	2020      	movs	r0, #32
 800980c:	4770      	bx	lr
	...

08009810 <__i2b>:
 8009810:	b510      	push	{r4, lr}
 8009812:	460c      	mov	r4, r1
 8009814:	2101      	movs	r1, #1
 8009816:	f7ff ff05 	bl	8009624 <_Balloc>
 800981a:	4602      	mov	r2, r0
 800981c:	b928      	cbnz	r0, 800982a <__i2b+0x1a>
 800981e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009822:	4b04      	ldr	r3, [pc, #16]	; (8009834 <__i2b+0x24>)
 8009824:	4804      	ldr	r0, [pc, #16]	; (8009838 <__i2b+0x28>)
 8009826:	f000 fe49 	bl	800a4bc <__assert_func>
 800982a:	2301      	movs	r3, #1
 800982c:	6144      	str	r4, [r0, #20]
 800982e:	6103      	str	r3, [r0, #16]
 8009830:	bd10      	pop	{r4, pc}
 8009832:	bf00      	nop
 8009834:	0800bb73 	.word	0x0800bb73
 8009838:	0800bbe4 	.word	0x0800bbe4

0800983c <__multiply>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	4691      	mov	r9, r2
 8009842:	690a      	ldr	r2, [r1, #16]
 8009844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009848:	460c      	mov	r4, r1
 800984a:	429a      	cmp	r2, r3
 800984c:	bfbe      	ittt	lt
 800984e:	460b      	movlt	r3, r1
 8009850:	464c      	movlt	r4, r9
 8009852:	4699      	movlt	r9, r3
 8009854:	6927      	ldr	r7, [r4, #16]
 8009856:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	6861      	ldr	r1, [r4, #4]
 800985e:	eb07 060a 	add.w	r6, r7, sl
 8009862:	42b3      	cmp	r3, r6
 8009864:	b085      	sub	sp, #20
 8009866:	bfb8      	it	lt
 8009868:	3101      	addlt	r1, #1
 800986a:	f7ff fedb 	bl	8009624 <_Balloc>
 800986e:	b930      	cbnz	r0, 800987e <__multiply+0x42>
 8009870:	4602      	mov	r2, r0
 8009872:	f240 115d 	movw	r1, #349	; 0x15d
 8009876:	4b43      	ldr	r3, [pc, #268]	; (8009984 <__multiply+0x148>)
 8009878:	4843      	ldr	r0, [pc, #268]	; (8009988 <__multiply+0x14c>)
 800987a:	f000 fe1f 	bl	800a4bc <__assert_func>
 800987e:	f100 0514 	add.w	r5, r0, #20
 8009882:	462b      	mov	r3, r5
 8009884:	2200      	movs	r2, #0
 8009886:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800988a:	4543      	cmp	r3, r8
 800988c:	d321      	bcc.n	80098d2 <__multiply+0x96>
 800988e:	f104 0314 	add.w	r3, r4, #20
 8009892:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009896:	f109 0314 	add.w	r3, r9, #20
 800989a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800989e:	9202      	str	r2, [sp, #8]
 80098a0:	1b3a      	subs	r2, r7, r4
 80098a2:	3a15      	subs	r2, #21
 80098a4:	f022 0203 	bic.w	r2, r2, #3
 80098a8:	3204      	adds	r2, #4
 80098aa:	f104 0115 	add.w	r1, r4, #21
 80098ae:	428f      	cmp	r7, r1
 80098b0:	bf38      	it	cc
 80098b2:	2204      	movcc	r2, #4
 80098b4:	9201      	str	r2, [sp, #4]
 80098b6:	9a02      	ldr	r2, [sp, #8]
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d80c      	bhi.n	80098d8 <__multiply+0x9c>
 80098be:	2e00      	cmp	r6, #0
 80098c0:	dd03      	ble.n	80098ca <__multiply+0x8e>
 80098c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d059      	beq.n	800997e <__multiply+0x142>
 80098ca:	6106      	str	r6, [r0, #16]
 80098cc:	b005      	add	sp, #20
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	f843 2b04 	str.w	r2, [r3], #4
 80098d6:	e7d8      	b.n	800988a <__multiply+0x4e>
 80098d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80098dc:	f1ba 0f00 	cmp.w	sl, #0
 80098e0:	d023      	beq.n	800992a <__multiply+0xee>
 80098e2:	46a9      	mov	r9, r5
 80098e4:	f04f 0c00 	mov.w	ip, #0
 80098e8:	f104 0e14 	add.w	lr, r4, #20
 80098ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098f0:	f8d9 1000 	ldr.w	r1, [r9]
 80098f4:	fa1f fb82 	uxth.w	fp, r2
 80098f8:	b289      	uxth	r1, r1
 80098fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80098fe:	4461      	add	r1, ip
 8009900:	f8d9 c000 	ldr.w	ip, [r9]
 8009904:	0c12      	lsrs	r2, r2, #16
 8009906:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800990a:	fb0a c202 	mla	r2, sl, r2, ip
 800990e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009912:	b289      	uxth	r1, r1
 8009914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009918:	4577      	cmp	r7, lr
 800991a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800991e:	f849 1b04 	str.w	r1, [r9], #4
 8009922:	d8e3      	bhi.n	80098ec <__multiply+0xb0>
 8009924:	9a01      	ldr	r2, [sp, #4]
 8009926:	f845 c002 	str.w	ip, [r5, r2]
 800992a:	9a03      	ldr	r2, [sp, #12]
 800992c:	3304      	adds	r3, #4
 800992e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	d020      	beq.n	800997a <__multiply+0x13e>
 8009938:	46ae      	mov	lr, r5
 800993a:	f04f 0a00 	mov.w	sl, #0
 800993e:	6829      	ldr	r1, [r5, #0]
 8009940:	f104 0c14 	add.w	ip, r4, #20
 8009944:	f8bc b000 	ldrh.w	fp, [ip]
 8009948:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800994c:	b289      	uxth	r1, r1
 800994e:	fb09 220b 	mla	r2, r9, fp, r2
 8009952:	4492      	add	sl, r2
 8009954:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009958:	f84e 1b04 	str.w	r1, [lr], #4
 800995c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009960:	f8be 1000 	ldrh.w	r1, [lr]
 8009964:	0c12      	lsrs	r2, r2, #16
 8009966:	fb09 1102 	mla	r1, r9, r2, r1
 800996a:	4567      	cmp	r7, ip
 800996c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009970:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009974:	d8e6      	bhi.n	8009944 <__multiply+0x108>
 8009976:	9a01      	ldr	r2, [sp, #4]
 8009978:	50a9      	str	r1, [r5, r2]
 800997a:	3504      	adds	r5, #4
 800997c:	e79b      	b.n	80098b6 <__multiply+0x7a>
 800997e:	3e01      	subs	r6, #1
 8009980:	e79d      	b.n	80098be <__multiply+0x82>
 8009982:	bf00      	nop
 8009984:	0800bb73 	.word	0x0800bb73
 8009988:	0800bbe4 	.word	0x0800bbe4

0800998c <__pow5mult>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	4615      	mov	r5, r2
 8009992:	f012 0203 	ands.w	r2, r2, #3
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	d007      	beq.n	80099ac <__pow5mult+0x20>
 800999c:	4c25      	ldr	r4, [pc, #148]	; (8009a34 <__pow5mult+0xa8>)
 800999e:	3a01      	subs	r2, #1
 80099a0:	2300      	movs	r3, #0
 80099a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099a6:	f7ff fe9f 	bl	80096e8 <__multadd>
 80099aa:	4607      	mov	r7, r0
 80099ac:	10ad      	asrs	r5, r5, #2
 80099ae:	d03d      	beq.n	8009a2c <__pow5mult+0xa0>
 80099b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099b2:	b97c      	cbnz	r4, 80099d4 <__pow5mult+0x48>
 80099b4:	2010      	movs	r0, #16
 80099b6:	f7fe f8fb 	bl	8007bb0 <malloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6270      	str	r0, [r6, #36]	; 0x24
 80099be:	b928      	cbnz	r0, 80099cc <__pow5mult+0x40>
 80099c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099c4:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <__pow5mult+0xac>)
 80099c6:	481d      	ldr	r0, [pc, #116]	; (8009a3c <__pow5mult+0xb0>)
 80099c8:	f000 fd78 	bl	800a4bc <__assert_func>
 80099cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d0:	6004      	str	r4, [r0, #0]
 80099d2:	60c4      	str	r4, [r0, #12]
 80099d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099dc:	b94c      	cbnz	r4, 80099f2 <__pow5mult+0x66>
 80099de:	f240 2171 	movw	r1, #625	; 0x271
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7ff ff14 	bl	8009810 <__i2b>
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	07eb      	lsls	r3, r5, #31
 80099f8:	d50a      	bpl.n	8009a10 <__pow5mult+0x84>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4622      	mov	r2, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ff1c 	bl	800983c <__multiply>
 8009a04:	4680      	mov	r8, r0
 8009a06:	4639      	mov	r1, r7
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fe4b 	bl	80096a4 <_Bfree>
 8009a0e:	4647      	mov	r7, r8
 8009a10:	106d      	asrs	r5, r5, #1
 8009a12:	d00b      	beq.n	8009a2c <__pow5mult+0xa0>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	b938      	cbnz	r0, 8009a28 <__pow5mult+0x9c>
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ff0d 	bl	800983c <__multiply>
 8009a22:	6020      	str	r0, [r4, #0]
 8009a24:	f8c0 9000 	str.w	r9, [r0]
 8009a28:	4604      	mov	r4, r0
 8009a2a:	e7e4      	b.n	80099f6 <__pow5mult+0x6a>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	bf00      	nop
 8009a34:	0800bd30 	.word	0x0800bd30
 8009a38:	0800bb01 	.word	0x0800bb01
 8009a3c:	0800bbe4 	.word	0x0800bbe4

08009a40 <__lshift>:
 8009a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	4607      	mov	r7, r0
 8009a48:	4691      	mov	r9, r2
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	6849      	ldr	r1, [r1, #4]
 8009a4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a52:	68a3      	ldr	r3, [r4, #8]
 8009a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a58:	f108 0601 	add.w	r6, r8, #1
 8009a5c:	42b3      	cmp	r3, r6
 8009a5e:	db0b      	blt.n	8009a78 <__lshift+0x38>
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff fddf 	bl	8009624 <_Balloc>
 8009a66:	4605      	mov	r5, r0
 8009a68:	b948      	cbnz	r0, 8009a7e <__lshift+0x3e>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a70:	4b29      	ldr	r3, [pc, #164]	; (8009b18 <__lshift+0xd8>)
 8009a72:	482a      	ldr	r0, [pc, #168]	; (8009b1c <__lshift+0xdc>)
 8009a74:	f000 fd22 	bl	800a4bc <__assert_func>
 8009a78:	3101      	adds	r1, #1
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	e7ee      	b.n	8009a5c <__lshift+0x1c>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f100 0114 	add.w	r1, r0, #20
 8009a84:	f100 0210 	add.w	r2, r0, #16
 8009a88:	4618      	mov	r0, r3
 8009a8a:	4553      	cmp	r3, sl
 8009a8c:	db37      	blt.n	8009afe <__lshift+0xbe>
 8009a8e:	6920      	ldr	r0, [r4, #16]
 8009a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a94:	f104 0314 	add.w	r3, r4, #20
 8009a98:	f019 091f 	ands.w	r9, r9, #31
 8009a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009aa4:	d02f      	beq.n	8009b06 <__lshift+0xc6>
 8009aa6:	468a      	mov	sl, r1
 8009aa8:	f04f 0c00 	mov.w	ip, #0
 8009aac:	f1c9 0e20 	rsb	lr, r9, #32
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	fa02 f209 	lsl.w	r2, r2, r9
 8009ab6:	ea42 020c 	orr.w	r2, r2, ip
 8009aba:	f84a 2b04 	str.w	r2, [sl], #4
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	4298      	cmp	r0, r3
 8009ac4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ac8:	d8f2      	bhi.n	8009ab0 <__lshift+0x70>
 8009aca:	1b03      	subs	r3, r0, r4
 8009acc:	3b15      	subs	r3, #21
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	f104 0215 	add.w	r2, r4, #21
 8009ad8:	4290      	cmp	r0, r2
 8009ada:	bf38      	it	cc
 8009adc:	2304      	movcc	r3, #4
 8009ade:	f841 c003 	str.w	ip, [r1, r3]
 8009ae2:	f1bc 0f00 	cmp.w	ip, #0
 8009ae6:	d001      	beq.n	8009aec <__lshift+0xac>
 8009ae8:	f108 0602 	add.w	r6, r8, #2
 8009aec:	3e01      	subs	r6, #1
 8009aee:	4638      	mov	r0, r7
 8009af0:	4621      	mov	r1, r4
 8009af2:	612e      	str	r6, [r5, #16]
 8009af4:	f7ff fdd6 	bl	80096a4 <_Bfree>
 8009af8:	4628      	mov	r0, r5
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b02:	3301      	adds	r3, #1
 8009b04:	e7c1      	b.n	8009a8a <__lshift+0x4a>
 8009b06:	3904      	subs	r1, #4
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	4298      	cmp	r0, r3
 8009b0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b12:	d8f9      	bhi.n	8009b08 <__lshift+0xc8>
 8009b14:	e7ea      	b.n	8009aec <__lshift+0xac>
 8009b16:	bf00      	nop
 8009b18:	0800bb73 	.word	0x0800bb73
 8009b1c:	0800bbe4 	.word	0x0800bbe4

08009b20 <__mcmp>:
 8009b20:	4603      	mov	r3, r0
 8009b22:	690a      	ldr	r2, [r1, #16]
 8009b24:	6900      	ldr	r0, [r0, #16]
 8009b26:	b530      	push	{r4, r5, lr}
 8009b28:	1a80      	subs	r0, r0, r2
 8009b2a:	d10d      	bne.n	8009b48 <__mcmp+0x28>
 8009b2c:	3314      	adds	r3, #20
 8009b2e:	3114      	adds	r1, #20
 8009b30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b40:	4295      	cmp	r5, r2
 8009b42:	d002      	beq.n	8009b4a <__mcmp+0x2a>
 8009b44:	d304      	bcc.n	8009b50 <__mcmp+0x30>
 8009b46:	2001      	movs	r0, #1
 8009b48:	bd30      	pop	{r4, r5, pc}
 8009b4a:	42a3      	cmp	r3, r4
 8009b4c:	d3f4      	bcc.n	8009b38 <__mcmp+0x18>
 8009b4e:	e7fb      	b.n	8009b48 <__mcmp+0x28>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	e7f8      	b.n	8009b48 <__mcmp+0x28>
	...

08009b58 <__mdiff>:
 8009b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	4607      	mov	r7, r0
 8009b60:	4611      	mov	r1, r2
 8009b62:	4628      	mov	r0, r5
 8009b64:	4614      	mov	r4, r2
 8009b66:	f7ff ffdb 	bl	8009b20 <__mcmp>
 8009b6a:	1e06      	subs	r6, r0, #0
 8009b6c:	d111      	bne.n	8009b92 <__mdiff+0x3a>
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff fd57 	bl	8009624 <_Balloc>
 8009b76:	4602      	mov	r2, r0
 8009b78:	b928      	cbnz	r0, 8009b86 <__mdiff+0x2e>
 8009b7a:	f240 2132 	movw	r1, #562	; 0x232
 8009b7e:	4b3a      	ldr	r3, [pc, #232]	; (8009c68 <__mdiff+0x110>)
 8009b80:	483a      	ldr	r0, [pc, #232]	; (8009c6c <__mdiff+0x114>)
 8009b82:	f000 fc9b 	bl	800a4bc <__assert_func>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b92:	bfa4      	itt	ge
 8009b94:	4623      	movge	r3, r4
 8009b96:	462c      	movge	r4, r5
 8009b98:	4638      	mov	r0, r7
 8009b9a:	6861      	ldr	r1, [r4, #4]
 8009b9c:	bfa6      	itte	ge
 8009b9e:	461d      	movge	r5, r3
 8009ba0:	2600      	movge	r6, #0
 8009ba2:	2601      	movlt	r6, #1
 8009ba4:	f7ff fd3e 	bl	8009624 <_Balloc>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	b918      	cbnz	r0, 8009bb4 <__mdiff+0x5c>
 8009bac:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bb0:	4b2d      	ldr	r3, [pc, #180]	; (8009c68 <__mdiff+0x110>)
 8009bb2:	e7e5      	b.n	8009b80 <__mdiff+0x28>
 8009bb4:	f102 0814 	add.w	r8, r2, #20
 8009bb8:	46c2      	mov	sl, r8
 8009bba:	f04f 0c00 	mov.w	ip, #0
 8009bbe:	6927      	ldr	r7, [r4, #16]
 8009bc0:	60c6      	str	r6, [r0, #12]
 8009bc2:	692e      	ldr	r6, [r5, #16]
 8009bc4:	f104 0014 	add.w	r0, r4, #20
 8009bc8:	f105 0914 	add.w	r9, r5, #20
 8009bcc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009bd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bd4:	3410      	adds	r4, #16
 8009bd6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009bda:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bde:	fa1f f18b 	uxth.w	r1, fp
 8009be2:	448c      	add	ip, r1
 8009be4:	b299      	uxth	r1, r3
 8009be6:	0c1b      	lsrs	r3, r3, #16
 8009be8:	ebac 0101 	sub.w	r1, ip, r1
 8009bec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bf0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009bf4:	b289      	uxth	r1, r1
 8009bf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009bfa:	454e      	cmp	r6, r9
 8009bfc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c00:	f84a 3b04 	str.w	r3, [sl], #4
 8009c04:	d8e7      	bhi.n	8009bd6 <__mdiff+0x7e>
 8009c06:	1b73      	subs	r3, r6, r5
 8009c08:	3b15      	subs	r3, #21
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	3515      	adds	r5, #21
 8009c10:	3304      	adds	r3, #4
 8009c12:	42ae      	cmp	r6, r5
 8009c14:	bf38      	it	cc
 8009c16:	2304      	movcc	r3, #4
 8009c18:	4418      	add	r0, r3
 8009c1a:	4443      	add	r3, r8
 8009c1c:	461e      	mov	r6, r3
 8009c1e:	4605      	mov	r5, r0
 8009c20:	4575      	cmp	r5, lr
 8009c22:	d30e      	bcc.n	8009c42 <__mdiff+0xea>
 8009c24:	f10e 0103 	add.w	r1, lr, #3
 8009c28:	1a09      	subs	r1, r1, r0
 8009c2a:	f021 0103 	bic.w	r1, r1, #3
 8009c2e:	3803      	subs	r0, #3
 8009c30:	4586      	cmp	lr, r0
 8009c32:	bf38      	it	cc
 8009c34:	2100      	movcc	r1, #0
 8009c36:	4419      	add	r1, r3
 8009c38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009c3c:	b18b      	cbz	r3, 8009c62 <__mdiff+0x10a>
 8009c3e:	6117      	str	r7, [r2, #16]
 8009c40:	e7a4      	b.n	8009b8c <__mdiff+0x34>
 8009c42:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c46:	fa1f f188 	uxth.w	r1, r8
 8009c4a:	4461      	add	r1, ip
 8009c4c:	140c      	asrs	r4, r1, #16
 8009c4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c52:	b289      	uxth	r1, r1
 8009c54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c58:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009c5c:	f846 1b04 	str.w	r1, [r6], #4
 8009c60:	e7de      	b.n	8009c20 <__mdiff+0xc8>
 8009c62:	3f01      	subs	r7, #1
 8009c64:	e7e8      	b.n	8009c38 <__mdiff+0xe0>
 8009c66:	bf00      	nop
 8009c68:	0800bb73 	.word	0x0800bb73
 8009c6c:	0800bbe4 	.word	0x0800bbe4

08009c70 <__d2b>:
 8009c70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c74:	2101      	movs	r1, #1
 8009c76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009c7a:	4690      	mov	r8, r2
 8009c7c:	461d      	mov	r5, r3
 8009c7e:	f7ff fcd1 	bl	8009624 <_Balloc>
 8009c82:	4604      	mov	r4, r0
 8009c84:	b930      	cbnz	r0, 8009c94 <__d2b+0x24>
 8009c86:	4602      	mov	r2, r0
 8009c88:	f240 310a 	movw	r1, #778	; 0x30a
 8009c8c:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <__d2b+0xb0>)
 8009c8e:	4825      	ldr	r0, [pc, #148]	; (8009d24 <__d2b+0xb4>)
 8009c90:	f000 fc14 	bl	800a4bc <__assert_func>
 8009c94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009c98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009c9c:	bb2d      	cbnz	r5, 8009cea <__d2b+0x7a>
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ca4:	d026      	beq.n	8009cf4 <__d2b+0x84>
 8009ca6:	4668      	mov	r0, sp
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	f7ff fd83 	bl	80097b4 <__lo0bits>
 8009cae:	9900      	ldr	r1, [sp, #0]
 8009cb0:	b1f0      	cbz	r0, 8009cf0 <__d2b+0x80>
 8009cb2:	9a01      	ldr	r2, [sp, #4]
 8009cb4:	f1c0 0320 	rsb	r3, r0, #32
 8009cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbc:	430b      	orrs	r3, r1
 8009cbe:	40c2      	lsrs	r2, r0
 8009cc0:	6163      	str	r3, [r4, #20]
 8009cc2:	9201      	str	r2, [sp, #4]
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bf14      	ite	ne
 8009cca:	2102      	movne	r1, #2
 8009ccc:	2101      	moveq	r1, #1
 8009cce:	61a3      	str	r3, [r4, #24]
 8009cd0:	6121      	str	r1, [r4, #16]
 8009cd2:	b1c5      	cbz	r5, 8009d06 <__d2b+0x96>
 8009cd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cd8:	4405      	add	r5, r0
 8009cda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cde:	603d      	str	r5, [r7, #0]
 8009ce0:	6030      	str	r0, [r6, #0]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	b002      	add	sp, #8
 8009ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cee:	e7d6      	b.n	8009c9e <__d2b+0x2e>
 8009cf0:	6161      	str	r1, [r4, #20]
 8009cf2:	e7e7      	b.n	8009cc4 <__d2b+0x54>
 8009cf4:	a801      	add	r0, sp, #4
 8009cf6:	f7ff fd5d 	bl	80097b4 <__lo0bits>
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	6121      	str	r1, [r4, #16]
 8009d00:	6163      	str	r3, [r4, #20]
 8009d02:	3020      	adds	r0, #32
 8009d04:	e7e5      	b.n	8009cd2 <__d2b+0x62>
 8009d06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009d0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d0e:	6038      	str	r0, [r7, #0]
 8009d10:	6918      	ldr	r0, [r3, #16]
 8009d12:	f7ff fd2f 	bl	8009774 <__hi0bits>
 8009d16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009d1a:	6031      	str	r1, [r6, #0]
 8009d1c:	e7e1      	b.n	8009ce2 <__d2b+0x72>
 8009d1e:	bf00      	nop
 8009d20:	0800bb73 	.word	0x0800bb73
 8009d24:	0800bbe4 	.word	0x0800bbe4

08009d28 <__ssputs_r>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	688e      	ldr	r6, [r1, #8]
 8009d2e:	4682      	mov	sl, r0
 8009d30:	429e      	cmp	r6, r3
 8009d32:	460c      	mov	r4, r1
 8009d34:	4690      	mov	r8, r2
 8009d36:	461f      	mov	r7, r3
 8009d38:	d838      	bhi.n	8009dac <__ssputs_r+0x84>
 8009d3a:	898a      	ldrh	r2, [r1, #12]
 8009d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d40:	d032      	beq.n	8009da8 <__ssputs_r+0x80>
 8009d42:	6825      	ldr	r5, [r4, #0]
 8009d44:	6909      	ldr	r1, [r1, #16]
 8009d46:	3301      	adds	r3, #1
 8009d48:	eba5 0901 	sub.w	r9, r5, r1
 8009d4c:	6965      	ldr	r5, [r4, #20]
 8009d4e:	444b      	add	r3, r9
 8009d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d58:	106d      	asrs	r5, r5, #1
 8009d5a:	429d      	cmp	r5, r3
 8009d5c:	bf38      	it	cc
 8009d5e:	461d      	movcc	r5, r3
 8009d60:	0553      	lsls	r3, r2, #21
 8009d62:	d531      	bpl.n	8009dc8 <__ssputs_r+0xa0>
 8009d64:	4629      	mov	r1, r5
 8009d66:	f7fd ffc5 	bl	8007cf4 <_malloc_r>
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	b950      	cbnz	r0, 8009d84 <__ssputs_r+0x5c>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	f8ca 3000 	str.w	r3, [sl]
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d84:	464a      	mov	r2, r9
 8009d86:	6921      	ldr	r1, [r4, #16]
 8009d88:	f7fd ff22 	bl	8007bd0 <memcpy>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	6126      	str	r6, [r4, #16]
 8009d9a:	444e      	add	r6, r9
 8009d9c:	6026      	str	r6, [r4, #0]
 8009d9e:	463e      	mov	r6, r7
 8009da0:	6165      	str	r5, [r4, #20]
 8009da2:	eba5 0509 	sub.w	r5, r5, r9
 8009da6:	60a5      	str	r5, [r4, #8]
 8009da8:	42be      	cmp	r6, r7
 8009daa:	d900      	bls.n	8009dae <__ssputs_r+0x86>
 8009dac:	463e      	mov	r6, r7
 8009dae:	4632      	mov	r2, r6
 8009db0:	4641      	mov	r1, r8
 8009db2:	6820      	ldr	r0, [r4, #0]
 8009db4:	f000 fd0a 	bl	800a7cc <memmove>
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	2000      	movs	r0, #0
 8009dbc:	1b9b      	subs	r3, r3, r6
 8009dbe:	60a3      	str	r3, [r4, #8]
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	4433      	add	r3, r6
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	e7db      	b.n	8009d80 <__ssputs_r+0x58>
 8009dc8:	462a      	mov	r2, r5
 8009dca:	f000 fd19 	bl	800a800 <_realloc_r>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d1e1      	bne.n	8009d98 <__ssputs_r+0x70>
 8009dd4:	4650      	mov	r0, sl
 8009dd6:	6921      	ldr	r1, [r4, #16]
 8009dd8:	f7fd ff24 	bl	8007c24 <_free_r>
 8009ddc:	e7c7      	b.n	8009d6e <__ssputs_r+0x46>
	...

08009de0 <_svfiprintf_r>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	4698      	mov	r8, r3
 8009de6:	898b      	ldrh	r3, [r1, #12]
 8009de8:	4607      	mov	r7, r0
 8009dea:	061b      	lsls	r3, r3, #24
 8009dec:	460d      	mov	r5, r1
 8009dee:	4614      	mov	r4, r2
 8009df0:	b09d      	sub	sp, #116	; 0x74
 8009df2:	d50e      	bpl.n	8009e12 <_svfiprintf_r+0x32>
 8009df4:	690b      	ldr	r3, [r1, #16]
 8009df6:	b963      	cbnz	r3, 8009e12 <_svfiprintf_r+0x32>
 8009df8:	2140      	movs	r1, #64	; 0x40
 8009dfa:	f7fd ff7b 	bl	8007cf4 <_malloc_r>
 8009dfe:	6028      	str	r0, [r5, #0]
 8009e00:	6128      	str	r0, [r5, #16]
 8009e02:	b920      	cbnz	r0, 8009e0e <_svfiprintf_r+0x2e>
 8009e04:	230c      	movs	r3, #12
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	e0d1      	b.n	8009fb2 <_svfiprintf_r+0x1d2>
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	616b      	str	r3, [r5, #20]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9309      	str	r3, [sp, #36]	; 0x24
 8009e16:	2320      	movs	r3, #32
 8009e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e1c:	2330      	movs	r3, #48	; 0x30
 8009e1e:	f04f 0901 	mov.w	r9, #1
 8009e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fcc <_svfiprintf_r+0x1ec>
 8009e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2e:	4623      	mov	r3, r4
 8009e30:	469a      	mov	sl, r3
 8009e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e36:	b10a      	cbz	r2, 8009e3c <_svfiprintf_r+0x5c>
 8009e38:	2a25      	cmp	r2, #37	; 0x25
 8009e3a:	d1f9      	bne.n	8009e30 <_svfiprintf_r+0x50>
 8009e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e40:	d00b      	beq.n	8009e5a <_svfiprintf_r+0x7a>
 8009e42:	465b      	mov	r3, fp
 8009e44:	4622      	mov	r2, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	4638      	mov	r0, r7
 8009e4a:	f7ff ff6d 	bl	8009d28 <__ssputs_r>
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f000 80aa 	beq.w	8009fa8 <_svfiprintf_r+0x1c8>
 8009e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e56:	445a      	add	r2, fp
 8009e58:	9209      	str	r2, [sp, #36]	; 0x24
 8009e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80a2 	beq.w	8009fa8 <_svfiprintf_r+0x1c8>
 8009e64:	2300      	movs	r3, #0
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6e:	f10a 0a01 	add.w	sl, sl, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	9307      	str	r3, [sp, #28]
 8009e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7c:	4654      	mov	r4, sl
 8009e7e:	2205      	movs	r2, #5
 8009e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e84:	4851      	ldr	r0, [pc, #324]	; (8009fcc <_svfiprintf_r+0x1ec>)
 8009e86:	f7ff fbb2 	bl	80095ee <memchr>
 8009e8a:	9a04      	ldr	r2, [sp, #16]
 8009e8c:	b9d8      	cbnz	r0, 8009ec6 <_svfiprintf_r+0xe6>
 8009e8e:	06d0      	lsls	r0, r2, #27
 8009e90:	bf44      	itt	mi
 8009e92:	2320      	movmi	r3, #32
 8009e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e98:	0711      	lsls	r1, r2, #28
 8009e9a:	bf44      	itt	mi
 8009e9c:	232b      	movmi	r3, #43	; 0x2b
 8009e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	d015      	beq.n	8009ed6 <_svfiprintf_r+0xf6>
 8009eaa:	4654      	mov	r4, sl
 8009eac:	2000      	movs	r0, #0
 8009eae:	f04f 0c0a 	mov.w	ip, #10
 8009eb2:	9a07      	ldr	r2, [sp, #28]
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eba:	3b30      	subs	r3, #48	; 0x30
 8009ebc:	2b09      	cmp	r3, #9
 8009ebe:	d94e      	bls.n	8009f5e <_svfiprintf_r+0x17e>
 8009ec0:	b1b0      	cbz	r0, 8009ef0 <_svfiprintf_r+0x110>
 8009ec2:	9207      	str	r2, [sp, #28]
 8009ec4:	e014      	b.n	8009ef0 <_svfiprintf_r+0x110>
 8009ec6:	eba0 0308 	sub.w	r3, r0, r8
 8009eca:	fa09 f303 	lsl.w	r3, r9, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	46a2      	mov	sl, r4
 8009ed2:	9304      	str	r3, [sp, #16]
 8009ed4:	e7d2      	b.n	8009e7c <_svfiprintf_r+0x9c>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	1d19      	adds	r1, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9103      	str	r1, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfbb      	ittet	lt
 8009ee2:	425b      	neglt	r3, r3
 8009ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee8:	9307      	strge	r3, [sp, #28]
 8009eea:	9307      	strlt	r3, [sp, #28]
 8009eec:	bfb8      	it	lt
 8009eee:	9204      	strlt	r2, [sp, #16]
 8009ef0:	7823      	ldrb	r3, [r4, #0]
 8009ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef4:	d10c      	bne.n	8009f10 <_svfiprintf_r+0x130>
 8009ef6:	7863      	ldrb	r3, [r4, #1]
 8009ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8009efa:	d135      	bne.n	8009f68 <_svfiprintf_r+0x188>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	3402      	adds	r4, #2
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	9203      	str	r2, [sp, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfb8      	it	lt
 8009f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0e:	9305      	str	r3, [sp, #20]
 8009f10:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009fd0 <_svfiprintf_r+0x1f0>
 8009f14:	2203      	movs	r2, #3
 8009f16:	4650      	mov	r0, sl
 8009f18:	7821      	ldrb	r1, [r4, #0]
 8009f1a:	f7ff fb68 	bl	80095ee <memchr>
 8009f1e:	b140      	cbz	r0, 8009f32 <_svfiprintf_r+0x152>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	eba0 000a 	sub.w	r0, r0, sl
 8009f26:	fa03 f000 	lsl.w	r0, r3, r0
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	4303      	orrs	r3, r0
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f36:	2206      	movs	r2, #6
 8009f38:	4826      	ldr	r0, [pc, #152]	; (8009fd4 <_svfiprintf_r+0x1f4>)
 8009f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3e:	f7ff fb56 	bl	80095ee <memchr>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d038      	beq.n	8009fb8 <_svfiprintf_r+0x1d8>
 8009f46:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <_svfiprintf_r+0x1f8>)
 8009f48:	bb1b      	cbnz	r3, 8009f92 <_svfiprintf_r+0x1b2>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	3307      	adds	r3, #7
 8009f4e:	f023 0307 	bic.w	r3, r3, #7
 8009f52:	3308      	adds	r3, #8
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	4433      	add	r3, r6
 8009f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5c:	e767      	b.n	8009e2e <_svfiprintf_r+0x4e>
 8009f5e:	460c      	mov	r4, r1
 8009f60:	2001      	movs	r0, #1
 8009f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f66:	e7a5      	b.n	8009eb4 <_svfiprintf_r+0xd4>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f04f 0c0a 	mov.w	ip, #10
 8009f6e:	4619      	mov	r1, r3
 8009f70:	3401      	adds	r4, #1
 8009f72:	9305      	str	r3, [sp, #20]
 8009f74:	4620      	mov	r0, r4
 8009f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f7a:	3a30      	subs	r2, #48	; 0x30
 8009f7c:	2a09      	cmp	r2, #9
 8009f7e:	d903      	bls.n	8009f88 <_svfiprintf_r+0x1a8>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0c5      	beq.n	8009f10 <_svfiprintf_r+0x130>
 8009f84:	9105      	str	r1, [sp, #20]
 8009f86:	e7c3      	b.n	8009f10 <_svfiprintf_r+0x130>
 8009f88:	4604      	mov	r4, r0
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f90:	e7f0      	b.n	8009f74 <_svfiprintf_r+0x194>
 8009f92:	ab03      	add	r3, sp, #12
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	462a      	mov	r2, r5
 8009f98:	4638      	mov	r0, r7
 8009f9a:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <_svfiprintf_r+0x1fc>)
 8009f9c:	a904      	add	r1, sp, #16
 8009f9e:	f7fd ffbb 	bl	8007f18 <_printf_float>
 8009fa2:	1c42      	adds	r2, r0, #1
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	d1d6      	bne.n	8009f56 <_svfiprintf_r+0x176>
 8009fa8:	89ab      	ldrh	r3, [r5, #12]
 8009faa:	065b      	lsls	r3, r3, #25
 8009fac:	f53f af2c 	bmi.w	8009e08 <_svfiprintf_r+0x28>
 8009fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb2:	b01d      	add	sp, #116	; 0x74
 8009fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb8:	ab03      	add	r3, sp, #12
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <_svfiprintf_r+0x1fc>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	f7fe fa44 	bl	8008450 <_printf_i>
 8009fc8:	e7eb      	b.n	8009fa2 <_svfiprintf_r+0x1c2>
 8009fca:	bf00      	nop
 8009fcc:	0800bd3c 	.word	0x0800bd3c
 8009fd0:	0800bd42 	.word	0x0800bd42
 8009fd4:	0800bd46 	.word	0x0800bd46
 8009fd8:	08007f19 	.word	0x08007f19
 8009fdc:	08009d29 	.word	0x08009d29

08009fe0 <__sfputc_r>:
 8009fe0:	6893      	ldr	r3, [r2, #8]
 8009fe2:	b410      	push	{r4}
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	6093      	str	r3, [r2, #8]
 8009fea:	da07      	bge.n	8009ffc <__sfputc_r+0x1c>
 8009fec:	6994      	ldr	r4, [r2, #24]
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	db01      	blt.n	8009ff6 <__sfputc_r+0x16>
 8009ff2:	290a      	cmp	r1, #10
 8009ff4:	d102      	bne.n	8009ffc <__sfputc_r+0x1c>
 8009ff6:	bc10      	pop	{r4}
 8009ff8:	f000 b98e 	b.w	800a318 <__swbuf_r>
 8009ffc:	6813      	ldr	r3, [r2, #0]
 8009ffe:	1c58      	adds	r0, r3, #1
 800a000:	6010      	str	r0, [r2, #0]
 800a002:	7019      	strb	r1, [r3, #0]
 800a004:	4608      	mov	r0, r1
 800a006:	bc10      	pop	{r4}
 800a008:	4770      	bx	lr

0800a00a <__sfputs_r>:
 800a00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	4614      	mov	r4, r2
 800a012:	18d5      	adds	r5, r2, r3
 800a014:	42ac      	cmp	r4, r5
 800a016:	d101      	bne.n	800a01c <__sfputs_r+0x12>
 800a018:	2000      	movs	r0, #0
 800a01a:	e007      	b.n	800a02c <__sfputs_r+0x22>
 800a01c:	463a      	mov	r2, r7
 800a01e:	4630      	mov	r0, r6
 800a020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a024:	f7ff ffdc 	bl	8009fe0 <__sfputc_r>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d1f3      	bne.n	800a014 <__sfputs_r+0xa>
 800a02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a030 <_vfiprintf_r>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	460d      	mov	r5, r1
 800a036:	4614      	mov	r4, r2
 800a038:	4698      	mov	r8, r3
 800a03a:	4606      	mov	r6, r0
 800a03c:	b09d      	sub	sp, #116	; 0x74
 800a03e:	b118      	cbz	r0, 800a048 <_vfiprintf_r+0x18>
 800a040:	6983      	ldr	r3, [r0, #24]
 800a042:	b90b      	cbnz	r3, 800a048 <_vfiprintf_r+0x18>
 800a044:	f7ff fa2e 	bl	80094a4 <__sinit>
 800a048:	4b89      	ldr	r3, [pc, #548]	; (800a270 <_vfiprintf_r+0x240>)
 800a04a:	429d      	cmp	r5, r3
 800a04c:	d11b      	bne.n	800a086 <_vfiprintf_r+0x56>
 800a04e:	6875      	ldr	r5, [r6, #4]
 800a050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a052:	07d9      	lsls	r1, r3, #31
 800a054:	d405      	bmi.n	800a062 <_vfiprintf_r+0x32>
 800a056:	89ab      	ldrh	r3, [r5, #12]
 800a058:	059a      	lsls	r2, r3, #22
 800a05a:	d402      	bmi.n	800a062 <_vfiprintf_r+0x32>
 800a05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05e:	f7ff fac4 	bl	80095ea <__retarget_lock_acquire_recursive>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	071b      	lsls	r3, r3, #28
 800a066:	d501      	bpl.n	800a06c <_vfiprintf_r+0x3c>
 800a068:	692b      	ldr	r3, [r5, #16]
 800a06a:	b9eb      	cbnz	r3, 800a0a8 <_vfiprintf_r+0x78>
 800a06c:	4629      	mov	r1, r5
 800a06e:	4630      	mov	r0, r6
 800a070:	f000 f9b6 	bl	800a3e0 <__swsetup_r>
 800a074:	b1c0      	cbz	r0, 800a0a8 <_vfiprintf_r+0x78>
 800a076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a078:	07dc      	lsls	r4, r3, #31
 800a07a:	d50e      	bpl.n	800a09a <_vfiprintf_r+0x6a>
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	b01d      	add	sp, #116	; 0x74
 800a082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a086:	4b7b      	ldr	r3, [pc, #492]	; (800a274 <_vfiprintf_r+0x244>)
 800a088:	429d      	cmp	r5, r3
 800a08a:	d101      	bne.n	800a090 <_vfiprintf_r+0x60>
 800a08c:	68b5      	ldr	r5, [r6, #8]
 800a08e:	e7df      	b.n	800a050 <_vfiprintf_r+0x20>
 800a090:	4b79      	ldr	r3, [pc, #484]	; (800a278 <_vfiprintf_r+0x248>)
 800a092:	429d      	cmp	r5, r3
 800a094:	bf08      	it	eq
 800a096:	68f5      	ldreq	r5, [r6, #12]
 800a098:	e7da      	b.n	800a050 <_vfiprintf_r+0x20>
 800a09a:	89ab      	ldrh	r3, [r5, #12]
 800a09c:	0598      	lsls	r0, r3, #22
 800a09e:	d4ed      	bmi.n	800a07c <_vfiprintf_r+0x4c>
 800a0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a2:	f7ff faa3 	bl	80095ec <__retarget_lock_release_recursive>
 800a0a6:	e7e9      	b.n	800a07c <_vfiprintf_r+0x4c>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ac:	2320      	movs	r3, #32
 800a0ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0b2:	2330      	movs	r3, #48	; 0x30
 800a0b4:	f04f 0901 	mov.w	r9, #1
 800a0b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a27c <_vfiprintf_r+0x24c>
 800a0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0c4:	4623      	mov	r3, r4
 800a0c6:	469a      	mov	sl, r3
 800a0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0cc:	b10a      	cbz	r2, 800a0d2 <_vfiprintf_r+0xa2>
 800a0ce:	2a25      	cmp	r2, #37	; 0x25
 800a0d0:	d1f9      	bne.n	800a0c6 <_vfiprintf_r+0x96>
 800a0d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a0d6:	d00b      	beq.n	800a0f0 <_vfiprintf_r+0xc0>
 800a0d8:	465b      	mov	r3, fp
 800a0da:	4622      	mov	r2, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7ff ff93 	bl	800a00a <__sfputs_r>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f000 80aa 	beq.w	800a23e <_vfiprintf_r+0x20e>
 800a0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ec:	445a      	add	r2, fp
 800a0ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 80a2 	beq.w	800a23e <_vfiprintf_r+0x20e>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a104:	f10a 0a01 	add.w	sl, sl, #1
 800a108:	9304      	str	r3, [sp, #16]
 800a10a:	9307      	str	r3, [sp, #28]
 800a10c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a110:	931a      	str	r3, [sp, #104]	; 0x68
 800a112:	4654      	mov	r4, sl
 800a114:	2205      	movs	r2, #5
 800a116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11a:	4858      	ldr	r0, [pc, #352]	; (800a27c <_vfiprintf_r+0x24c>)
 800a11c:	f7ff fa67 	bl	80095ee <memchr>
 800a120:	9a04      	ldr	r2, [sp, #16]
 800a122:	b9d8      	cbnz	r0, 800a15c <_vfiprintf_r+0x12c>
 800a124:	06d1      	lsls	r1, r2, #27
 800a126:	bf44      	itt	mi
 800a128:	2320      	movmi	r3, #32
 800a12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a12e:	0713      	lsls	r3, r2, #28
 800a130:	bf44      	itt	mi
 800a132:	232b      	movmi	r3, #43	; 0x2b
 800a134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a138:	f89a 3000 	ldrb.w	r3, [sl]
 800a13c:	2b2a      	cmp	r3, #42	; 0x2a
 800a13e:	d015      	beq.n	800a16c <_vfiprintf_r+0x13c>
 800a140:	4654      	mov	r4, sl
 800a142:	2000      	movs	r0, #0
 800a144:	f04f 0c0a 	mov.w	ip, #10
 800a148:	9a07      	ldr	r2, [sp, #28]
 800a14a:	4621      	mov	r1, r4
 800a14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a150:	3b30      	subs	r3, #48	; 0x30
 800a152:	2b09      	cmp	r3, #9
 800a154:	d94e      	bls.n	800a1f4 <_vfiprintf_r+0x1c4>
 800a156:	b1b0      	cbz	r0, 800a186 <_vfiprintf_r+0x156>
 800a158:	9207      	str	r2, [sp, #28]
 800a15a:	e014      	b.n	800a186 <_vfiprintf_r+0x156>
 800a15c:	eba0 0308 	sub.w	r3, r0, r8
 800a160:	fa09 f303 	lsl.w	r3, r9, r3
 800a164:	4313      	orrs	r3, r2
 800a166:	46a2      	mov	sl, r4
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	e7d2      	b.n	800a112 <_vfiprintf_r+0xe2>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	1d19      	adds	r1, r3, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	9103      	str	r1, [sp, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	bfbb      	ittet	lt
 800a178:	425b      	neglt	r3, r3
 800a17a:	f042 0202 	orrlt.w	r2, r2, #2
 800a17e:	9307      	strge	r3, [sp, #28]
 800a180:	9307      	strlt	r3, [sp, #28]
 800a182:	bfb8      	it	lt
 800a184:	9204      	strlt	r2, [sp, #16]
 800a186:	7823      	ldrb	r3, [r4, #0]
 800a188:	2b2e      	cmp	r3, #46	; 0x2e
 800a18a:	d10c      	bne.n	800a1a6 <_vfiprintf_r+0x176>
 800a18c:	7863      	ldrb	r3, [r4, #1]
 800a18e:	2b2a      	cmp	r3, #42	; 0x2a
 800a190:	d135      	bne.n	800a1fe <_vfiprintf_r+0x1ce>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	3402      	adds	r4, #2
 800a196:	1d1a      	adds	r2, r3, #4
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	9203      	str	r2, [sp, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	bfb8      	it	lt
 800a1a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1a4:	9305      	str	r3, [sp, #20]
 800a1a6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a280 <_vfiprintf_r+0x250>
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	7821      	ldrb	r1, [r4, #0]
 800a1b0:	f7ff fa1d 	bl	80095ee <memchr>
 800a1b4:	b140      	cbz	r0, 800a1c8 <_vfiprintf_r+0x198>
 800a1b6:	2340      	movs	r3, #64	; 0x40
 800a1b8:	eba0 000a 	sub.w	r0, r0, sl
 800a1bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	3401      	adds	r4, #1
 800a1c4:	4303      	orrs	r3, r0
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1cc:	2206      	movs	r2, #6
 800a1ce:	482d      	ldr	r0, [pc, #180]	; (800a284 <_vfiprintf_r+0x254>)
 800a1d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1d4:	f7ff fa0b 	bl	80095ee <memchr>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d03f      	beq.n	800a25c <_vfiprintf_r+0x22c>
 800a1dc:	4b2a      	ldr	r3, [pc, #168]	; (800a288 <_vfiprintf_r+0x258>)
 800a1de:	bb1b      	cbnz	r3, 800a228 <_vfiprintf_r+0x1f8>
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	3307      	adds	r3, #7
 800a1e4:	f023 0307 	bic.w	r3, r3, #7
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	9303      	str	r3, [sp, #12]
 800a1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ee:	443b      	add	r3, r7
 800a1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f2:	e767      	b.n	800a0c4 <_vfiprintf_r+0x94>
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1fc:	e7a5      	b.n	800a14a <_vfiprintf_r+0x11a>
 800a1fe:	2300      	movs	r3, #0
 800a200:	f04f 0c0a 	mov.w	ip, #10
 800a204:	4619      	mov	r1, r3
 800a206:	3401      	adds	r4, #1
 800a208:	9305      	str	r3, [sp, #20]
 800a20a:	4620      	mov	r0, r4
 800a20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a210:	3a30      	subs	r2, #48	; 0x30
 800a212:	2a09      	cmp	r2, #9
 800a214:	d903      	bls.n	800a21e <_vfiprintf_r+0x1ee>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0c5      	beq.n	800a1a6 <_vfiprintf_r+0x176>
 800a21a:	9105      	str	r1, [sp, #20]
 800a21c:	e7c3      	b.n	800a1a6 <_vfiprintf_r+0x176>
 800a21e:	4604      	mov	r4, r0
 800a220:	2301      	movs	r3, #1
 800a222:	fb0c 2101 	mla	r1, ip, r1, r2
 800a226:	e7f0      	b.n	800a20a <_vfiprintf_r+0x1da>
 800a228:	ab03      	add	r3, sp, #12
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	462a      	mov	r2, r5
 800a22e:	4630      	mov	r0, r6
 800a230:	4b16      	ldr	r3, [pc, #88]	; (800a28c <_vfiprintf_r+0x25c>)
 800a232:	a904      	add	r1, sp, #16
 800a234:	f7fd fe70 	bl	8007f18 <_printf_float>
 800a238:	4607      	mov	r7, r0
 800a23a:	1c78      	adds	r0, r7, #1
 800a23c:	d1d6      	bne.n	800a1ec <_vfiprintf_r+0x1bc>
 800a23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a240:	07d9      	lsls	r1, r3, #31
 800a242:	d405      	bmi.n	800a250 <_vfiprintf_r+0x220>
 800a244:	89ab      	ldrh	r3, [r5, #12]
 800a246:	059a      	lsls	r2, r3, #22
 800a248:	d402      	bmi.n	800a250 <_vfiprintf_r+0x220>
 800a24a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a24c:	f7ff f9ce 	bl	80095ec <__retarget_lock_release_recursive>
 800a250:	89ab      	ldrh	r3, [r5, #12]
 800a252:	065b      	lsls	r3, r3, #25
 800a254:	f53f af12 	bmi.w	800a07c <_vfiprintf_r+0x4c>
 800a258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a25a:	e711      	b.n	800a080 <_vfiprintf_r+0x50>
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4630      	mov	r0, r6
 800a264:	4b09      	ldr	r3, [pc, #36]	; (800a28c <_vfiprintf_r+0x25c>)
 800a266:	a904      	add	r1, sp, #16
 800a268:	f7fe f8f2 	bl	8008450 <_printf_i>
 800a26c:	e7e4      	b.n	800a238 <_vfiprintf_r+0x208>
 800a26e:	bf00      	nop
 800a270:	0800bba4 	.word	0x0800bba4
 800a274:	0800bbc4 	.word	0x0800bbc4
 800a278:	0800bb84 	.word	0x0800bb84
 800a27c:	0800bd3c 	.word	0x0800bd3c
 800a280:	0800bd42 	.word	0x0800bd42
 800a284:	0800bd46 	.word	0x0800bd46
 800a288:	08007f19 	.word	0x08007f19
 800a28c:	0800a00b 	.word	0x0800a00b

0800a290 <__sread>:
 800a290:	b510      	push	{r4, lr}
 800a292:	460c      	mov	r4, r1
 800a294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a298:	f000 fae2 	bl	800a860 <_read_r>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	bfab      	itete	ge
 800a2a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a2a4:	181b      	addge	r3, r3, r0
 800a2a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2aa:	bfac      	ite	ge
 800a2ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ae:	81a3      	strhlt	r3, [r4, #12]
 800a2b0:	bd10      	pop	{r4, pc}

0800a2b2 <__swrite>:
 800a2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b6:	461f      	mov	r7, r3
 800a2b8:	898b      	ldrh	r3, [r1, #12]
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	05db      	lsls	r3, r3, #23
 800a2be:	460c      	mov	r4, r1
 800a2c0:	4616      	mov	r6, r2
 800a2c2:	d505      	bpl.n	800a2d0 <__swrite+0x1e>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2cc:	f000 f9f4 	bl	800a6b8 <_lseek_r>
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	4628      	mov	r0, r5
 800a2dc:	463b      	mov	r3, r7
 800a2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e6:	f000 b869 	b.w	800a3bc <_write_r>

0800a2ea <__sseek>:
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f2:	f000 f9e1 	bl	800a6b8 <_lseek_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	bf15      	itete	ne
 800a2fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a306:	81a3      	strheq	r3, [r4, #12]
 800a308:	bf18      	it	ne
 800a30a:	81a3      	strhne	r3, [r4, #12]
 800a30c:	bd10      	pop	{r4, pc}

0800a30e <__sclose>:
 800a30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a312:	f000 b8f1 	b.w	800a4f8 <_close_r>
	...

0800a318 <__swbuf_r>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	460e      	mov	r6, r1
 800a31c:	4614      	mov	r4, r2
 800a31e:	4605      	mov	r5, r0
 800a320:	b118      	cbz	r0, 800a32a <__swbuf_r+0x12>
 800a322:	6983      	ldr	r3, [r0, #24]
 800a324:	b90b      	cbnz	r3, 800a32a <__swbuf_r+0x12>
 800a326:	f7ff f8bd 	bl	80094a4 <__sinit>
 800a32a:	4b21      	ldr	r3, [pc, #132]	; (800a3b0 <__swbuf_r+0x98>)
 800a32c:	429c      	cmp	r4, r3
 800a32e:	d12b      	bne.n	800a388 <__swbuf_r+0x70>
 800a330:	686c      	ldr	r4, [r5, #4]
 800a332:	69a3      	ldr	r3, [r4, #24]
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	071a      	lsls	r2, r3, #28
 800a33a:	d52f      	bpl.n	800a39c <__swbuf_r+0x84>
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	b36b      	cbz	r3, 800a39c <__swbuf_r+0x84>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	6820      	ldr	r0, [r4, #0]
 800a344:	b2f6      	uxtb	r6, r6
 800a346:	1ac0      	subs	r0, r0, r3
 800a348:	6963      	ldr	r3, [r4, #20]
 800a34a:	4637      	mov	r7, r6
 800a34c:	4283      	cmp	r3, r0
 800a34e:	dc04      	bgt.n	800a35a <__swbuf_r+0x42>
 800a350:	4621      	mov	r1, r4
 800a352:	4628      	mov	r0, r5
 800a354:	f000 f962 	bl	800a61c <_fflush_r>
 800a358:	bb30      	cbnz	r0, 800a3a8 <__swbuf_r+0x90>
 800a35a:	68a3      	ldr	r3, [r4, #8]
 800a35c:	3001      	adds	r0, #1
 800a35e:	3b01      	subs	r3, #1
 800a360:	60a3      	str	r3, [r4, #8]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	701e      	strb	r6, [r3, #0]
 800a36a:	6963      	ldr	r3, [r4, #20]
 800a36c:	4283      	cmp	r3, r0
 800a36e:	d004      	beq.n	800a37a <__swbuf_r+0x62>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	07db      	lsls	r3, r3, #31
 800a374:	d506      	bpl.n	800a384 <__swbuf_r+0x6c>
 800a376:	2e0a      	cmp	r6, #10
 800a378:	d104      	bne.n	800a384 <__swbuf_r+0x6c>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f94d 	bl	800a61c <_fflush_r>
 800a382:	b988      	cbnz	r0, 800a3a8 <__swbuf_r+0x90>
 800a384:	4638      	mov	r0, r7
 800a386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a388:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <__swbuf_r+0x9c>)
 800a38a:	429c      	cmp	r4, r3
 800a38c:	d101      	bne.n	800a392 <__swbuf_r+0x7a>
 800a38e:	68ac      	ldr	r4, [r5, #8]
 800a390:	e7cf      	b.n	800a332 <__swbuf_r+0x1a>
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <__swbuf_r+0xa0>)
 800a394:	429c      	cmp	r4, r3
 800a396:	bf08      	it	eq
 800a398:	68ec      	ldreq	r4, [r5, #12]
 800a39a:	e7ca      	b.n	800a332 <__swbuf_r+0x1a>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 f81e 	bl	800a3e0 <__swsetup_r>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d0cb      	beq.n	800a340 <__swbuf_r+0x28>
 800a3a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a3ac:	e7ea      	b.n	800a384 <__swbuf_r+0x6c>
 800a3ae:	bf00      	nop
 800a3b0:	0800bba4 	.word	0x0800bba4
 800a3b4:	0800bbc4 	.word	0x0800bbc4
 800a3b8:	0800bb84 	.word	0x0800bb84

0800a3bc <_write_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4d05      	ldr	r5, [pc, #20]	; (800a3dc <_write_r+0x20>)
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7f8 fa98 	bl	8002900 <_write>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_write_r+0x1e>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_write_r+0x1e>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	20003c20 	.word	0x20003c20

0800a3e0 <__swsetup_r>:
 800a3e0:	4b32      	ldr	r3, [pc, #200]	; (800a4ac <__swsetup_r+0xcc>)
 800a3e2:	b570      	push	{r4, r5, r6, lr}
 800a3e4:	681d      	ldr	r5, [r3, #0]
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	b125      	cbz	r5, 800a3f6 <__swsetup_r+0x16>
 800a3ec:	69ab      	ldr	r3, [r5, #24]
 800a3ee:	b913      	cbnz	r3, 800a3f6 <__swsetup_r+0x16>
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7ff f857 	bl	80094a4 <__sinit>
 800a3f6:	4b2e      	ldr	r3, [pc, #184]	; (800a4b0 <__swsetup_r+0xd0>)
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	d10f      	bne.n	800a41c <__swsetup_r+0x3c>
 800a3fc:	686c      	ldr	r4, [r5, #4]
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a404:	0719      	lsls	r1, r3, #28
 800a406:	d42c      	bmi.n	800a462 <__swsetup_r+0x82>
 800a408:	06dd      	lsls	r5, r3, #27
 800a40a:	d411      	bmi.n	800a430 <__swsetup_r+0x50>
 800a40c:	2309      	movs	r3, #9
 800a40e:	6033      	str	r3, [r6, #0]
 800a410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	e03e      	b.n	800a49a <__swsetup_r+0xba>
 800a41c:	4b25      	ldr	r3, [pc, #148]	; (800a4b4 <__swsetup_r+0xd4>)
 800a41e:	429c      	cmp	r4, r3
 800a420:	d101      	bne.n	800a426 <__swsetup_r+0x46>
 800a422:	68ac      	ldr	r4, [r5, #8]
 800a424:	e7eb      	b.n	800a3fe <__swsetup_r+0x1e>
 800a426:	4b24      	ldr	r3, [pc, #144]	; (800a4b8 <__swsetup_r+0xd8>)
 800a428:	429c      	cmp	r4, r3
 800a42a:	bf08      	it	eq
 800a42c:	68ec      	ldreq	r4, [r5, #12]
 800a42e:	e7e6      	b.n	800a3fe <__swsetup_r+0x1e>
 800a430:	0758      	lsls	r0, r3, #29
 800a432:	d512      	bpl.n	800a45a <__swsetup_r+0x7a>
 800a434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a436:	b141      	cbz	r1, 800a44a <__swsetup_r+0x6a>
 800a438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a43c:	4299      	cmp	r1, r3
 800a43e:	d002      	beq.n	800a446 <__swsetup_r+0x66>
 800a440:	4630      	mov	r0, r6
 800a442:	f7fd fbef 	bl	8007c24 <_free_r>
 800a446:	2300      	movs	r3, #0
 800a448:	6363      	str	r3, [r4, #52]	; 0x34
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	2300      	movs	r3, #0
 800a454:	6063      	str	r3, [r4, #4]
 800a456:	6923      	ldr	r3, [r4, #16]
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f043 0308 	orr.w	r3, r3, #8
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	b94b      	cbnz	r3, 800a47a <__swsetup_r+0x9a>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a470:	d003      	beq.n	800a47a <__swsetup_r+0x9a>
 800a472:	4621      	mov	r1, r4
 800a474:	4630      	mov	r0, r6
 800a476:	f000 f957 	bl	800a728 <__smakebuf_r>
 800a47a:	89a0      	ldrh	r0, [r4, #12]
 800a47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a480:	f010 0301 	ands.w	r3, r0, #1
 800a484:	d00a      	beq.n	800a49c <__swsetup_r+0xbc>
 800a486:	2300      	movs	r3, #0
 800a488:	60a3      	str	r3, [r4, #8]
 800a48a:	6963      	ldr	r3, [r4, #20]
 800a48c:	425b      	negs	r3, r3
 800a48e:	61a3      	str	r3, [r4, #24]
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	b943      	cbnz	r3, 800a4a6 <__swsetup_r+0xc6>
 800a494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a498:	d1ba      	bne.n	800a410 <__swsetup_r+0x30>
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	0781      	lsls	r1, r0, #30
 800a49e:	bf58      	it	pl
 800a4a0:	6963      	ldrpl	r3, [r4, #20]
 800a4a2:	60a3      	str	r3, [r4, #8]
 800a4a4:	e7f4      	b.n	800a490 <__swsetup_r+0xb0>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e7f7      	b.n	800a49a <__swsetup_r+0xba>
 800a4aa:	bf00      	nop
 800a4ac:	20000018 	.word	0x20000018
 800a4b0:	0800bba4 	.word	0x0800bba4
 800a4b4:	0800bbc4 	.word	0x0800bbc4
 800a4b8:	0800bb84 	.word	0x0800bb84

0800a4bc <__assert_func>:
 800a4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4be:	4614      	mov	r4, r2
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <__assert_func+0x2c>)
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68d8      	ldr	r0, [r3, #12]
 800a4ca:	b14c      	cbz	r4, 800a4e0 <__assert_func+0x24>
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <__assert_func+0x30>)
 800a4ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4d2:	9100      	str	r1, [sp, #0]
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	4906      	ldr	r1, [pc, #24]	; (800a4f0 <__assert_func+0x34>)
 800a4d8:	f000 f8dc 	bl	800a694 <fiprintf>
 800a4dc:	f000 f9df 	bl	800a89e <abort>
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <__assert_func+0x38>)
 800a4e2:	461c      	mov	r4, r3
 800a4e4:	e7f3      	b.n	800a4ce <__assert_func+0x12>
 800a4e6:	bf00      	nop
 800a4e8:	20000018 	.word	0x20000018
 800a4ec:	0800bd4d 	.word	0x0800bd4d
 800a4f0:	0800bd5a 	.word	0x0800bd5a
 800a4f4:	0800bd88 	.word	0x0800bd88

0800a4f8 <_close_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4d05      	ldr	r5, [pc, #20]	; (800a514 <_close_r+0x1c>)
 800a4fe:	4604      	mov	r4, r0
 800a500:	4608      	mov	r0, r1
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	f7f8 fa18 	bl	8002938 <_close>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_close_r+0x1a>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_close_r+0x1a>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	20003c20 	.word	0x20003c20

0800a518 <__sflush_r>:
 800a518:	898a      	ldrh	r2, [r1, #12]
 800a51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51c:	4605      	mov	r5, r0
 800a51e:	0710      	lsls	r0, r2, #28
 800a520:	460c      	mov	r4, r1
 800a522:	d457      	bmi.n	800a5d4 <__sflush_r+0xbc>
 800a524:	684b      	ldr	r3, [r1, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	dc04      	bgt.n	800a534 <__sflush_r+0x1c>
 800a52a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	dc01      	bgt.n	800a534 <__sflush_r+0x1c>
 800a530:	2000      	movs	r0, #0
 800a532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a536:	2e00      	cmp	r6, #0
 800a538:	d0fa      	beq.n	800a530 <__sflush_r+0x18>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a540:	682f      	ldr	r7, [r5, #0]
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	d032      	beq.n	800a5ac <__sflush_r+0x94>
 800a546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	075a      	lsls	r2, r3, #29
 800a54c:	d505      	bpl.n	800a55a <__sflush_r+0x42>
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	1ac0      	subs	r0, r0, r3
 800a552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a554:	b10b      	cbz	r3, 800a55a <__sflush_r+0x42>
 800a556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a558:	1ac0      	subs	r0, r0, r3
 800a55a:	2300      	movs	r3, #0
 800a55c:	4602      	mov	r2, r0
 800a55e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a560:	4628      	mov	r0, r5
 800a562:	6a21      	ldr	r1, [r4, #32]
 800a564:	47b0      	blx	r6
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	d106      	bne.n	800a57a <__sflush_r+0x62>
 800a56c:	6829      	ldr	r1, [r5, #0]
 800a56e:	291d      	cmp	r1, #29
 800a570:	d82c      	bhi.n	800a5cc <__sflush_r+0xb4>
 800a572:	4a29      	ldr	r2, [pc, #164]	; (800a618 <__sflush_r+0x100>)
 800a574:	40ca      	lsrs	r2, r1
 800a576:	07d6      	lsls	r6, r2, #31
 800a578:	d528      	bpl.n	800a5cc <__sflush_r+0xb4>
 800a57a:	2200      	movs	r2, #0
 800a57c:	6062      	str	r2, [r4, #4]
 800a57e:	6922      	ldr	r2, [r4, #16]
 800a580:	04d9      	lsls	r1, r3, #19
 800a582:	6022      	str	r2, [r4, #0]
 800a584:	d504      	bpl.n	800a590 <__sflush_r+0x78>
 800a586:	1c42      	adds	r2, r0, #1
 800a588:	d101      	bne.n	800a58e <__sflush_r+0x76>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b903      	cbnz	r3, 800a590 <__sflush_r+0x78>
 800a58e:	6560      	str	r0, [r4, #84]	; 0x54
 800a590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a592:	602f      	str	r7, [r5, #0]
 800a594:	2900      	cmp	r1, #0
 800a596:	d0cb      	beq.n	800a530 <__sflush_r+0x18>
 800a598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a59c:	4299      	cmp	r1, r3
 800a59e:	d002      	beq.n	800a5a6 <__sflush_r+0x8e>
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7fd fb3f 	bl	8007c24 <_free_r>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a5aa:	e7c2      	b.n	800a532 <__sflush_r+0x1a>
 800a5ac:	6a21      	ldr	r1, [r4, #32]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b0      	blx	r6
 800a5b4:	1c41      	adds	r1, r0, #1
 800a5b6:	d1c7      	bne.n	800a548 <__sflush_r+0x30>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0c4      	beq.n	800a548 <__sflush_r+0x30>
 800a5be:	2b1d      	cmp	r3, #29
 800a5c0:	d001      	beq.n	800a5c6 <__sflush_r+0xae>
 800a5c2:	2b16      	cmp	r3, #22
 800a5c4:	d101      	bne.n	800a5ca <__sflush_r+0xb2>
 800a5c6:	602f      	str	r7, [r5, #0]
 800a5c8:	e7b2      	b.n	800a530 <__sflush_r+0x18>
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d0:	81a3      	strh	r3, [r4, #12]
 800a5d2:	e7ae      	b.n	800a532 <__sflush_r+0x1a>
 800a5d4:	690f      	ldr	r7, [r1, #16]
 800a5d6:	2f00      	cmp	r7, #0
 800a5d8:	d0aa      	beq.n	800a530 <__sflush_r+0x18>
 800a5da:	0793      	lsls	r3, r2, #30
 800a5dc:	bf18      	it	ne
 800a5de:	2300      	movne	r3, #0
 800a5e0:	680e      	ldr	r6, [r1, #0]
 800a5e2:	bf08      	it	eq
 800a5e4:	694b      	ldreq	r3, [r1, #20]
 800a5e6:	1bf6      	subs	r6, r6, r7
 800a5e8:	600f      	str	r7, [r1, #0]
 800a5ea:	608b      	str	r3, [r1, #8]
 800a5ec:	2e00      	cmp	r6, #0
 800a5ee:	dd9f      	ble.n	800a530 <__sflush_r+0x18>
 800a5f0:	4633      	mov	r3, r6
 800a5f2:	463a      	mov	r2, r7
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	6a21      	ldr	r1, [r4, #32]
 800a5f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a5fc:	47e0      	blx	ip
 800a5fe:	2800      	cmp	r0, #0
 800a600:	dc06      	bgt.n	800a610 <__sflush_r+0xf8>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	e790      	b.n	800a532 <__sflush_r+0x1a>
 800a610:	4407      	add	r7, r0
 800a612:	1a36      	subs	r6, r6, r0
 800a614:	e7ea      	b.n	800a5ec <__sflush_r+0xd4>
 800a616:	bf00      	nop
 800a618:	20400001 	.word	0x20400001

0800a61c <_fflush_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	690b      	ldr	r3, [r1, #16]
 800a620:	4605      	mov	r5, r0
 800a622:	460c      	mov	r4, r1
 800a624:	b913      	cbnz	r3, 800a62c <_fflush_r+0x10>
 800a626:	2500      	movs	r5, #0
 800a628:	4628      	mov	r0, r5
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	b118      	cbz	r0, 800a636 <_fflush_r+0x1a>
 800a62e:	6983      	ldr	r3, [r0, #24]
 800a630:	b90b      	cbnz	r3, 800a636 <_fflush_r+0x1a>
 800a632:	f7fe ff37 	bl	80094a4 <__sinit>
 800a636:	4b14      	ldr	r3, [pc, #80]	; (800a688 <_fflush_r+0x6c>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	d11b      	bne.n	800a674 <_fflush_r+0x58>
 800a63c:	686c      	ldr	r4, [r5, #4]
 800a63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0ef      	beq.n	800a626 <_fflush_r+0xa>
 800a646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a648:	07d0      	lsls	r0, r2, #31
 800a64a:	d404      	bmi.n	800a656 <_fflush_r+0x3a>
 800a64c:	0599      	lsls	r1, r3, #22
 800a64e:	d402      	bmi.n	800a656 <_fflush_r+0x3a>
 800a650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a652:	f7fe ffca 	bl	80095ea <__retarget_lock_acquire_recursive>
 800a656:	4628      	mov	r0, r5
 800a658:	4621      	mov	r1, r4
 800a65a:	f7ff ff5d 	bl	800a518 <__sflush_r>
 800a65e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a660:	4605      	mov	r5, r0
 800a662:	07da      	lsls	r2, r3, #31
 800a664:	d4e0      	bmi.n	800a628 <_fflush_r+0xc>
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	059b      	lsls	r3, r3, #22
 800a66a:	d4dd      	bmi.n	800a628 <_fflush_r+0xc>
 800a66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a66e:	f7fe ffbd 	bl	80095ec <__retarget_lock_release_recursive>
 800a672:	e7d9      	b.n	800a628 <_fflush_r+0xc>
 800a674:	4b05      	ldr	r3, [pc, #20]	; (800a68c <_fflush_r+0x70>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d101      	bne.n	800a67e <_fflush_r+0x62>
 800a67a:	68ac      	ldr	r4, [r5, #8]
 800a67c:	e7df      	b.n	800a63e <_fflush_r+0x22>
 800a67e:	4b04      	ldr	r3, [pc, #16]	; (800a690 <_fflush_r+0x74>)
 800a680:	429c      	cmp	r4, r3
 800a682:	bf08      	it	eq
 800a684:	68ec      	ldreq	r4, [r5, #12]
 800a686:	e7da      	b.n	800a63e <_fflush_r+0x22>
 800a688:	0800bba4 	.word	0x0800bba4
 800a68c:	0800bbc4 	.word	0x0800bbc4
 800a690:	0800bb84 	.word	0x0800bb84

0800a694 <fiprintf>:
 800a694:	b40e      	push	{r1, r2, r3}
 800a696:	b503      	push	{r0, r1, lr}
 800a698:	4601      	mov	r1, r0
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <fiprintf+0x20>)
 800a69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f7ff fcc3 	bl	800a030 <_vfiprintf_r>
 800a6aa:	b002      	add	sp, #8
 800a6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b0:	b003      	add	sp, #12
 800a6b2:	4770      	bx	lr
 800a6b4:	20000018 	.word	0x20000018

0800a6b8 <_lseek_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	4611      	mov	r1, r2
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4d05      	ldr	r5, [pc, #20]	; (800a6d8 <_lseek_r+0x20>)
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f8 f95a 	bl	8002980 <_lseek>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_lseek_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_lseek_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20003c20 	.word	0x20003c20

0800a6dc <__swhatbuf_r>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	460e      	mov	r6, r1
 800a6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	461d      	mov	r5, r3
 800a6ea:	b096      	sub	sp, #88	; 0x58
 800a6ec:	da08      	bge.n	800a700 <__swhatbuf_r+0x24>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	061a      	lsls	r2, r3, #24
 800a6f8:	d410      	bmi.n	800a71c <__swhatbuf_r+0x40>
 800a6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fe:	e00e      	b.n	800a71e <__swhatbuf_r+0x42>
 800a700:	466a      	mov	r2, sp
 800a702:	f000 f8d3 	bl	800a8ac <_fstat_r>
 800a706:	2800      	cmp	r0, #0
 800a708:	dbf1      	blt.n	800a6ee <__swhatbuf_r+0x12>
 800a70a:	9a01      	ldr	r2, [sp, #4]
 800a70c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a714:	425a      	negs	r2, r3
 800a716:	415a      	adcs	r2, r3
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	e7ee      	b.n	800a6fa <__swhatbuf_r+0x1e>
 800a71c:	2340      	movs	r3, #64	; 0x40
 800a71e:	2000      	movs	r0, #0
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	b016      	add	sp, #88	; 0x58
 800a724:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a728 <__smakebuf_r>:
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a72c:	079d      	lsls	r5, r3, #30
 800a72e:	4606      	mov	r6, r0
 800a730:	460c      	mov	r4, r1
 800a732:	d507      	bpl.n	800a744 <__smakebuf_r+0x1c>
 800a734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	2301      	movs	r3, #1
 800a73e:	6163      	str	r3, [r4, #20]
 800a740:	b002      	add	sp, #8
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	466a      	mov	r2, sp
 800a746:	ab01      	add	r3, sp, #4
 800a748:	f7ff ffc8 	bl	800a6dc <__swhatbuf_r>
 800a74c:	9900      	ldr	r1, [sp, #0]
 800a74e:	4605      	mov	r5, r0
 800a750:	4630      	mov	r0, r6
 800a752:	f7fd facf 	bl	8007cf4 <_malloc_r>
 800a756:	b948      	cbnz	r0, 800a76c <__smakebuf_r+0x44>
 800a758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75c:	059a      	lsls	r2, r3, #22
 800a75e:	d4ef      	bmi.n	800a740 <__smakebuf_r+0x18>
 800a760:	f023 0303 	bic.w	r3, r3, #3
 800a764:	f043 0302 	orr.w	r3, r3, #2
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	e7e3      	b.n	800a734 <__smakebuf_r+0xc>
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <__smakebuf_r+0x7c>)
 800a76e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	6020      	str	r0, [r4, #0]
 800a774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	6120      	str	r0, [r4, #16]
 800a77e:	6163      	str	r3, [r4, #20]
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	b15b      	cbz	r3, 800a79c <__smakebuf_r+0x74>
 800a784:	4630      	mov	r0, r6
 800a786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a78a:	f000 f8a1 	bl	800a8d0 <_isatty_r>
 800a78e:	b128      	cbz	r0, 800a79c <__smakebuf_r+0x74>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	89a0      	ldrh	r0, [r4, #12]
 800a79e:	4305      	orrs	r5, r0
 800a7a0:	81a5      	strh	r5, [r4, #12]
 800a7a2:	e7cd      	b.n	800a740 <__smakebuf_r+0x18>
 800a7a4:	0800943d 	.word	0x0800943d

0800a7a8 <__ascii_mbtowc>:
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	b901      	cbnz	r1, 800a7ae <__ascii_mbtowc+0x6>
 800a7ac:	a901      	add	r1, sp, #4
 800a7ae:	b142      	cbz	r2, 800a7c2 <__ascii_mbtowc+0x1a>
 800a7b0:	b14b      	cbz	r3, 800a7c6 <__ascii_mbtowc+0x1e>
 800a7b2:	7813      	ldrb	r3, [r2, #0]
 800a7b4:	600b      	str	r3, [r1, #0]
 800a7b6:	7812      	ldrb	r2, [r2, #0]
 800a7b8:	1e10      	subs	r0, r2, #0
 800a7ba:	bf18      	it	ne
 800a7bc:	2001      	movne	r0, #1
 800a7be:	b002      	add	sp, #8
 800a7c0:	4770      	bx	lr
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	e7fb      	b.n	800a7be <__ascii_mbtowc+0x16>
 800a7c6:	f06f 0001 	mvn.w	r0, #1
 800a7ca:	e7f8      	b.n	800a7be <__ascii_mbtowc+0x16>

0800a7cc <memmove>:
 800a7cc:	4288      	cmp	r0, r1
 800a7ce:	b510      	push	{r4, lr}
 800a7d0:	eb01 0402 	add.w	r4, r1, r2
 800a7d4:	d902      	bls.n	800a7dc <memmove+0x10>
 800a7d6:	4284      	cmp	r4, r0
 800a7d8:	4623      	mov	r3, r4
 800a7da:	d807      	bhi.n	800a7ec <memmove+0x20>
 800a7dc:	1e43      	subs	r3, r0, #1
 800a7de:	42a1      	cmp	r1, r4
 800a7e0:	d008      	beq.n	800a7f4 <memmove+0x28>
 800a7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ea:	e7f8      	b.n	800a7de <memmove+0x12>
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	4402      	add	r2, r0
 800a7f0:	428a      	cmp	r2, r1
 800a7f2:	d100      	bne.n	800a7f6 <memmove+0x2a>
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7fe:	e7f7      	b.n	800a7f0 <memmove+0x24>

0800a800 <_realloc_r>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	4680      	mov	r8, r0
 800a806:	4614      	mov	r4, r2
 800a808:	460e      	mov	r6, r1
 800a80a:	b921      	cbnz	r1, 800a816 <_realloc_r+0x16>
 800a80c:	4611      	mov	r1, r2
 800a80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	f7fd ba6f 	b.w	8007cf4 <_malloc_r>
 800a816:	b92a      	cbnz	r2, 800a824 <_realloc_r+0x24>
 800a818:	f7fd fa04 	bl	8007c24 <_free_r>
 800a81c:	4625      	mov	r5, r4
 800a81e:	4628      	mov	r0, r5
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	f000 f864 	bl	800a8f0 <_malloc_usable_size_r>
 800a828:	4284      	cmp	r4, r0
 800a82a:	4607      	mov	r7, r0
 800a82c:	d802      	bhi.n	800a834 <_realloc_r+0x34>
 800a82e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a832:	d812      	bhi.n	800a85a <_realloc_r+0x5a>
 800a834:	4621      	mov	r1, r4
 800a836:	4640      	mov	r0, r8
 800a838:	f7fd fa5c 	bl	8007cf4 <_malloc_r>
 800a83c:	4605      	mov	r5, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0ed      	beq.n	800a81e <_realloc_r+0x1e>
 800a842:	42bc      	cmp	r4, r7
 800a844:	4622      	mov	r2, r4
 800a846:	4631      	mov	r1, r6
 800a848:	bf28      	it	cs
 800a84a:	463a      	movcs	r2, r7
 800a84c:	f7fd f9c0 	bl	8007bd0 <memcpy>
 800a850:	4631      	mov	r1, r6
 800a852:	4640      	mov	r0, r8
 800a854:	f7fd f9e6 	bl	8007c24 <_free_r>
 800a858:	e7e1      	b.n	800a81e <_realloc_r+0x1e>
 800a85a:	4635      	mov	r5, r6
 800a85c:	e7df      	b.n	800a81e <_realloc_r+0x1e>
	...

0800a860 <_read_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	2200      	movs	r2, #0
 800a86a:	4d05      	ldr	r5, [pc, #20]	; (800a880 <_read_r+0x20>)
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7f8 f829 	bl	80028c6 <_read>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_read_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_read_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20003c20 	.word	0x20003c20

0800a884 <__ascii_wctomb>:
 800a884:	4603      	mov	r3, r0
 800a886:	4608      	mov	r0, r1
 800a888:	b141      	cbz	r1, 800a89c <__ascii_wctomb+0x18>
 800a88a:	2aff      	cmp	r2, #255	; 0xff
 800a88c:	d904      	bls.n	800a898 <__ascii_wctomb+0x14>
 800a88e:	228a      	movs	r2, #138	; 0x8a
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	4770      	bx	lr
 800a898:	2001      	movs	r0, #1
 800a89a:	700a      	strb	r2, [r1, #0]
 800a89c:	4770      	bx	lr

0800a89e <abort>:
 800a89e:	2006      	movs	r0, #6
 800a8a0:	b508      	push	{r3, lr}
 800a8a2:	f000 f855 	bl	800a950 <raise>
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	f7f8 f803 	bl	80028b2 <_exit>

0800a8ac <_fstat_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d06      	ldr	r5, [pc, #24]	; (800a8cc <_fstat_r+0x20>)
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f7f8 f848 	bl	800294e <_fstat>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d102      	bne.n	800a8c8 <_fstat_r+0x1c>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b103      	cbz	r3, 800a8c8 <_fstat_r+0x1c>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20003c20 	.word	0x20003c20

0800a8d0 <_isatty_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4d05      	ldr	r5, [pc, #20]	; (800a8ec <_isatty_r+0x1c>)
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f8 f846 	bl	800296c <_isatty>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_isatty_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_isatty_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	20003c20 	.word	0x20003c20

0800a8f0 <_malloc_usable_size_r>:
 800a8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8f4:	1f18      	subs	r0, r3, #4
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bfbc      	itt	lt
 800a8fa:	580b      	ldrlt	r3, [r1, r0]
 800a8fc:	18c0      	addlt	r0, r0, r3
 800a8fe:	4770      	bx	lr

0800a900 <_raise_r>:
 800a900:	291f      	cmp	r1, #31
 800a902:	b538      	push	{r3, r4, r5, lr}
 800a904:	4604      	mov	r4, r0
 800a906:	460d      	mov	r5, r1
 800a908:	d904      	bls.n	800a914 <_raise_r+0x14>
 800a90a:	2316      	movs	r3, #22
 800a90c:	6003      	str	r3, [r0, #0]
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a916:	b112      	cbz	r2, 800a91e <_raise_r+0x1e>
 800a918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a91c:	b94b      	cbnz	r3, 800a932 <_raise_r+0x32>
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 f830 	bl	800a984 <_getpid_r>
 800a924:	462a      	mov	r2, r5
 800a926:	4601      	mov	r1, r0
 800a928:	4620      	mov	r0, r4
 800a92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a92e:	f000 b817 	b.w	800a960 <_kill_r>
 800a932:	2b01      	cmp	r3, #1
 800a934:	d00a      	beq.n	800a94c <_raise_r+0x4c>
 800a936:	1c59      	adds	r1, r3, #1
 800a938:	d103      	bne.n	800a942 <_raise_r+0x42>
 800a93a:	2316      	movs	r3, #22
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	2001      	movs	r0, #1
 800a940:	e7e7      	b.n	800a912 <_raise_r+0x12>
 800a942:	2400      	movs	r4, #0
 800a944:	4628      	mov	r0, r5
 800a946:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a94a:	4798      	blx	r3
 800a94c:	2000      	movs	r0, #0
 800a94e:	e7e0      	b.n	800a912 <_raise_r+0x12>

0800a950 <raise>:
 800a950:	4b02      	ldr	r3, [pc, #8]	; (800a95c <raise+0xc>)
 800a952:	4601      	mov	r1, r0
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	f7ff bfd3 	b.w	800a900 <_raise_r>
 800a95a:	bf00      	nop
 800a95c:	20000018 	.word	0x20000018

0800a960 <_kill_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	2300      	movs	r3, #0
 800a964:	4d06      	ldr	r5, [pc, #24]	; (800a980 <_kill_r+0x20>)
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	4611      	mov	r1, r2
 800a96c:	602b      	str	r3, [r5, #0]
 800a96e:	f7f7 ff90 	bl	8002892 <_kill>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d102      	bne.n	800a97c <_kill_r+0x1c>
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	b103      	cbz	r3, 800a97c <_kill_r+0x1c>
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	bf00      	nop
 800a980:	20003c20 	.word	0x20003c20

0800a984 <_getpid_r>:
 800a984:	f7f7 bf7e 	b.w	8002884 <_getpid>

0800a988 <sqrt>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	f000 f839 	bl	800aa04 <__ieee754_sqrt>
 800a992:	4632      	mov	r2, r6
 800a994:	4604      	mov	r4, r0
 800a996:	460d      	mov	r5, r1
 800a998:	463b      	mov	r3, r7
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f6 fb23 	bl	8000fe8 <__aeabi_dcmpun>
 800a9a2:	b990      	cbnz	r0, 800a9ca <sqrt+0x42>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	f7f6 faf4 	bl	8000f98 <__aeabi_dcmplt>
 800a9b0:	b158      	cbz	r0, 800a9ca <sqrt+0x42>
 800a9b2:	f7fd f8d3 	bl	8007b5c <__errno>
 800a9b6:	2321      	movs	r3, #33	; 0x21
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4610      	mov	r0, r2
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f7f6 f9a1 	bl	8000d08 <__aeabi_ddiv>
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9d0 <sqrtf>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	f000 f8c6 	bl	800ab64 <__ieee754_sqrtf>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f7f6 fe85 	bl	80016ec <__aeabi_fcmpun>
 800a9e2:	b968      	cbnz	r0, 800aa00 <sqrtf+0x30>
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f7f6 fe58 	bl	800169c <__aeabi_fcmplt>
 800a9ec:	b140      	cbz	r0, 800aa00 <sqrtf+0x30>
 800a9ee:	f7fd f8b5 	bl	8007b5c <__errno>
 800a9f2:	2321      	movs	r3, #33	; 0x21
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6003      	str	r3, [r0, #0]
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	f7f6 fd65 	bl	80014c8 <__aeabi_fdiv>
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4620      	mov	r0, r4
 800aa02:	bd38      	pop	{r3, r4, r5, pc}

0800aa04 <__ieee754_sqrt>:
 800aa04:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ab60 <__ieee754_sqrt+0x15c>
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	ea3c 0c01 	bics.w	ip, ip, r1
 800aa10:	4606      	mov	r6, r0
 800aa12:	460d      	mov	r5, r1
 800aa14:	460c      	mov	r4, r1
 800aa16:	460a      	mov	r2, r1
 800aa18:	4607      	mov	r7, r0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	d10f      	bne.n	800aa3e <__ieee754_sqrt+0x3a>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	f7f6 f847 	bl	8000ab4 <__aeabi_dmul>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7f5 fe8b 	bl	8000748 <__adddf3>
 800aa32:	4606      	mov	r6, r0
 800aa34:	460d      	mov	r5, r1
 800aa36:	4630      	mov	r0, r6
 800aa38:	4629      	mov	r1, r5
 800aa3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	dc0e      	bgt.n	800aa60 <__ieee754_sqrt+0x5c>
 800aa42:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800aa46:	ea5c 0707 	orrs.w	r7, ip, r7
 800aa4a:	d0f4      	beq.n	800aa36 <__ieee754_sqrt+0x32>
 800aa4c:	b141      	cbz	r1, 800aa60 <__ieee754_sqrt+0x5c>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	f7f5 fe77 	bl	8000744 <__aeabi_dsub>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	f7f6 f955 	bl	8000d08 <__aeabi_ddiv>
 800aa5e:	e7e8      	b.n	800aa32 <__ieee754_sqrt+0x2e>
 800aa60:	1521      	asrs	r1, r4, #20
 800aa62:	d075      	beq.n	800ab50 <__ieee754_sqrt+0x14c>
 800aa64:	07cc      	lsls	r4, r1, #31
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aa6e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800aa72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa76:	bf5e      	ittt	pl
 800aa78:	0fd9      	lsrpl	r1, r3, #31
 800aa7a:	005b      	lslpl	r3, r3, #1
 800aa7c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800aa80:	0fd9      	lsrs	r1, r3, #31
 800aa82:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800aa86:	2516      	movs	r5, #22
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa8e:	107f      	asrs	r7, r7, #1
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	1846      	adds	r6, r0, r1
 800aa94:	4296      	cmp	r6, r2
 800aa96:	bfde      	ittt	le
 800aa98:	1b92      	suble	r2, r2, r6
 800aa9a:	1870      	addle	r0, r6, r1
 800aa9c:	1864      	addle	r4, r4, r1
 800aa9e:	0052      	lsls	r2, r2, #1
 800aaa0:	3d01      	subs	r5, #1
 800aaa2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aaa6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aaaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aaae:	d1f0      	bne.n	800aa92 <__ieee754_sqrt+0x8e>
 800aab0:	4629      	mov	r1, r5
 800aab2:	f04f 0e20 	mov.w	lr, #32
 800aab6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aaba:	4282      	cmp	r2, r0
 800aabc:	eb06 0c05 	add.w	ip, r6, r5
 800aac0:	dc02      	bgt.n	800aac8 <__ieee754_sqrt+0xc4>
 800aac2:	d113      	bne.n	800aaec <__ieee754_sqrt+0xe8>
 800aac4:	459c      	cmp	ip, r3
 800aac6:	d811      	bhi.n	800aaec <__ieee754_sqrt+0xe8>
 800aac8:	f1bc 0f00 	cmp.w	ip, #0
 800aacc:	eb0c 0506 	add.w	r5, ip, r6
 800aad0:	da43      	bge.n	800ab5a <__ieee754_sqrt+0x156>
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	db41      	blt.n	800ab5a <__ieee754_sqrt+0x156>
 800aad6:	f100 0801 	add.w	r8, r0, #1
 800aada:	1a12      	subs	r2, r2, r0
 800aadc:	4640      	mov	r0, r8
 800aade:	459c      	cmp	ip, r3
 800aae0:	bf88      	it	hi
 800aae2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aae6:	eba3 030c 	sub.w	r3, r3, ip
 800aaea:	4431      	add	r1, r6
 800aaec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aaf0:	f1be 0e01 	subs.w	lr, lr, #1
 800aaf4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800aaf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aafc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab00:	d1db      	bne.n	800aaba <__ieee754_sqrt+0xb6>
 800ab02:	4313      	orrs	r3, r2
 800ab04:	d006      	beq.n	800ab14 <__ieee754_sqrt+0x110>
 800ab06:	1c48      	adds	r0, r1, #1
 800ab08:	bf0b      	itete	eq
 800ab0a:	4671      	moveq	r1, lr
 800ab0c:	3101      	addne	r1, #1
 800ab0e:	3401      	addeq	r4, #1
 800ab10:	f021 0101 	bicne.w	r1, r1, #1
 800ab14:	1063      	asrs	r3, r4, #1
 800ab16:	0849      	lsrs	r1, r1, #1
 800ab18:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ab1c:	07e2      	lsls	r2, r4, #31
 800ab1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ab22:	bf48      	it	mi
 800ab24:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ab28:	460e      	mov	r6, r1
 800ab2a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ab2e:	e782      	b.n	800aa36 <__ieee754_sqrt+0x32>
 800ab30:	0ada      	lsrs	r2, r3, #11
 800ab32:	3815      	subs	r0, #21
 800ab34:	055b      	lsls	r3, r3, #21
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	d0fa      	beq.n	800ab30 <__ieee754_sqrt+0x12c>
 800ab3a:	02d5      	lsls	r5, r2, #11
 800ab3c:	d50a      	bpl.n	800ab54 <__ieee754_sqrt+0x150>
 800ab3e:	f1c1 0420 	rsb	r4, r1, #32
 800ab42:	fa23 f404 	lsr.w	r4, r3, r4
 800ab46:	1e4d      	subs	r5, r1, #1
 800ab48:	408b      	lsls	r3, r1
 800ab4a:	4322      	orrs	r2, r4
 800ab4c:	1b41      	subs	r1, r0, r5
 800ab4e:	e789      	b.n	800aa64 <__ieee754_sqrt+0x60>
 800ab50:	4608      	mov	r0, r1
 800ab52:	e7f0      	b.n	800ab36 <__ieee754_sqrt+0x132>
 800ab54:	0052      	lsls	r2, r2, #1
 800ab56:	3101      	adds	r1, #1
 800ab58:	e7ef      	b.n	800ab3a <__ieee754_sqrt+0x136>
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	e7bd      	b.n	800aada <__ieee754_sqrt+0xd6>
 800ab5e:	bf00      	nop
 800ab60:	7ff00000 	.word	0x7ff00000

0800ab64 <__ieee754_sqrtf>:
 800ab64:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ab68:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4604      	mov	r4, r0
 800ab72:	d309      	bcc.n	800ab88 <__ieee754_sqrtf+0x24>
 800ab74:	4601      	mov	r1, r0
 800ab76:	f7f6 fbf3 	bl	8001360 <__aeabi_fmul>
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7f6 fae7 	bl	8001150 <__addsf3>
 800ab82:	4604      	mov	r4, r0
 800ab84:	4620      	mov	r0, r4
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	d0fb      	beq.n	800ab84 <__ieee754_sqrtf+0x20>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	da06      	bge.n	800ab9e <__ieee754_sqrtf+0x3a>
 800ab90:	4601      	mov	r1, r0
 800ab92:	f7f6 fadb 	bl	800114c <__aeabi_fsub>
 800ab96:	4601      	mov	r1, r0
 800ab98:	f7f6 fc96 	bl	80014c8 <__aeabi_fdiv>
 800ab9c:	e7f1      	b.n	800ab82 <__ieee754_sqrtf+0x1e>
 800ab9e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800aba2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800aba6:	d029      	beq.n	800abfc <__ieee754_sqrtf+0x98>
 800aba8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800abac:	07cb      	lsls	r3, r1, #31
 800abae:	f04f 0300 	mov.w	r3, #0
 800abb2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800abb6:	f04f 0419 	mov.w	r4, #25
 800abba:	461e      	mov	r6, r3
 800abbc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800abc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800abc4:	bf58      	it	pl
 800abc6:	0052      	lslpl	r2, r2, #1
 800abc8:	1040      	asrs	r0, r0, #1
 800abca:	0052      	lsls	r2, r2, #1
 800abcc:	1875      	adds	r5, r6, r1
 800abce:	4295      	cmp	r5, r2
 800abd0:	bfde      	ittt	le
 800abd2:	186e      	addle	r6, r5, r1
 800abd4:	1b52      	suble	r2, r2, r5
 800abd6:	185b      	addle	r3, r3, r1
 800abd8:	3c01      	subs	r4, #1
 800abda:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800abde:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800abe2:	d1f3      	bne.n	800abcc <__ieee754_sqrtf+0x68>
 800abe4:	b112      	cbz	r2, 800abec <__ieee754_sqrtf+0x88>
 800abe6:	3301      	adds	r3, #1
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	105c      	asrs	r4, r3, #1
 800abee:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800abf2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800abf6:	e7c5      	b.n	800ab84 <__ieee754_sqrtf+0x20>
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	3201      	adds	r2, #1
 800abfc:	0218      	lsls	r0, r3, #8
 800abfe:	d5fb      	bpl.n	800abf8 <__ieee754_sqrtf+0x94>
 800ac00:	3a01      	subs	r2, #1
 800ac02:	1a89      	subs	r1, r1, r2
 800ac04:	e7d0      	b.n	800aba8 <__ieee754_sqrtf+0x44>
	...

0800ac08 <_init>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	bf00      	nop
 800ac0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0e:	bc08      	pop	{r3}
 800ac10:	469e      	mov	lr, r3
 800ac12:	4770      	bx	lr

0800ac14 <_fini>:
 800ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac16:	bf00      	nop
 800ac18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac1a:	bc08      	pop	{r3}
 800ac1c:	469e      	mov	lr, r3
 800ac1e:	4770      	bx	lr
